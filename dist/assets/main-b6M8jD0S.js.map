{"version":3,"file":"main-b6M8jD0S.js","sources":["../../src/constants/networks.ts","../../src/utils/ethereum.ts","../../src/config/abis.ts","../../src/constants/contracts.ts","../../src/config/contracts.ts","../../src/utils/blockchainUtils.ts","../../src/utils/provider.ts","../../src/hooks/useAuth.ts","../../src/hooks/useNetwork.ts","../../src/components/Navigation.tsx","../../src/types/post.ts","../../src/utils/postHelpers.ts","../../src/store/slices/postsSlice.ts","../../src/hooks/useWallet.ts","../../src/utils/metadataUtils.ts","../../src/types/error.ts","../../src/utils/typeMappers.ts","../../src/services/tribe/TribeService.ts","../../src/services/profile/ProfileService.ts","../../src/services/indexer/IndexerService.ts","../../src/services/TribesSDK.ts","../../src/hooks/useTribesManagement.ts","../../src/hooks/useTribesProfile.ts","../../src/utils/cn.ts","../../src/components/common/ui/Button.tsx","../../src/components/common/ui/Badge.tsx","../../src/components/common/ui/Card.tsx","../../src/components/common/ui/Dialog.tsx","../../src/components/common/ui/Input.tsx","../../src/types/tribe.ts","../../src/components/tribe/TribeCreationForm.tsx","../../src/components/posts/PostTypeFields.tsx","../../src/components/post/PostCreator.tsx","../../src/components/posts/CreatePostModal.tsx","../../src/components/BottomNav.tsx","../../src/contexts/TribesContext.tsx","../../src/hooks/useTribesData.ts","../../src/utils/tribeHelpers.ts","../../src/components/Sidebar.tsx","../../src/components/Layout.tsx","../../src/utils/storage.ts","../../src/components/RootRoute.tsx","../../src/components/NotificationToast.tsx","../../src/contexts/NotificationContext.tsx","../../src/hooks/useProfile.ts","../../src/components/WalletConnect.tsx","../../src/components/profile/ProfileForm.tsx","../../src/screens/UsernameAvatarSetup.tsx","../../src/components/layout/FeedLayout.tsx","../../src/utils/avatar.ts","../../src/components/user/UserAvatar.tsx","../../src/components/posts/styles/post.styles.ts","../../src/components/posts/types/TextPost.tsx","../../src/components/posts/types/ImagePost.tsx","../../src/components/posts/types/VideoPost.tsx","../../src/components/posts/types/LinkPost.tsx","../../src/types/event.ts","../../src/services/events.service.ts","../../src/components/posts/BasePost.tsx","../../src/components/posts/types/EventPost.tsx","../../src/components/posts/types/PollPost.tsx","../../src/components/posts/types/BountyPost.tsx","../../src/components/posts/types/ProjectPost.tsx","../../src/components/posts/PostTypeMapper.tsx","../../src/components/feed/UnifiedFeed.tsx","../../src/services/db.service.ts","../../src/services/index.ts","../../src/services/posts.service.ts","../../src/hooks/usePostsManagement.ts","../../src/screens/Dashboard.tsx","../../src/utils/contracts.ts","../../src/utils/abis.ts","../../src/screens/Profile.tsx","../../src/components/tribes/TribeCardEnhanced.tsx","../../src/components/tribes/TribeList.tsx","../../src/screens/Tribes.tsx","../../src/utils/chain.ts","../../src/components/feed/FeedCard.tsx","../../src/components/feed/ProposalFeedItem.tsx","../../src/components/feed/BountyFeedItem.tsx","../../src/components/feed/EventFeedItem.tsx","../../src/components/feed/NFTFeedItem.tsx","../../src/components/feed/ProjectFeedItem.tsx","../../src/components/feed/LivestreamFeedItem.tsx","../../src/components/feed/PollFeedItem.tsx","../../src/components/feed/PostFeedItem.tsx","../../src/components/feed/Feed.tsx","../../src/components/sidebars/TribeSidebar.tsx","../../src/components/CreatePost.tsx","../../src/hooks/usePostsData.ts","../../src/screens/TribeView.tsx","../../src/screens/TribeDetails.tsx","../../src/screens/CreateTribe.tsx","../../src/constants/onboarding.ts","../../src/utils/profile.ts","../../src/hooks/useOnboarding.ts","../../src/screens/ProfileCreation.tsx","../../src/components/FollowSuggestions.tsx","../../src/screens/Onboarding.tsx","../../src/components/topics/TopicsView.tsx","../../src/screens/TopicDetails.tsx","../../src/components/AuthGuard.tsx","../../src/constants/theme.ts","../../src/utils/initApp.ts","../../src/App.tsx","../../src/store/slices/chainSlice.ts","../../src/store/store.ts","../../src/main.tsx"],"sourcesContent":["import { Chain, defineChain } from 'viem'\n\nexport const MONAD_DEVNET_ID = '0x4EAF'\nexport const MONAD_DEVNET_DECIMAL = 20143\n\nexport const FUSE_EMBER_ID = '0x4B5E078D' // 1264453517 in hex\nexport const FUSE_EMBER_DECIMAL = 1264453517\n\nexport const MONAD_DEVNET = defineChain({\n  id: MONAD_DEVNET_DECIMAL,\n  name: 'Monad Devnet',\n  network: 'monad-devnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'DMON',\n    symbol: 'DMON',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://testnet-rpc2.monad.xyz/52227f026fa8fac9e2014c58fbf5643369b3bfc6'],\n    },\n    public: {\n      http: ['https://testnet-rpc.monad.xyz'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'MonadExplorer',\n      url: 'https://explorer-devnet.monadinfra.com',\n    },\n  },\n  testnet: true,\n})\n\nexport const FUSE_EMBER = defineChain({\n  id: FUSE_EMBER_DECIMAL,\n  name: 'Flash Testnet',\n  network: 'fuse-ember',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fuse',\n    symbol: 'FUSE',\n  },\n  rpcUrls: {\n    default: {\n      http: ['/fuse-rpc'],\n    },\n    public: {\n      http: ['/fuse-rpc'],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: 'FuseExplorer',\n      url: 'https://explorer.flash.fuse.io',\n    },\n  },\n  testnet: true,\n})\n\nexport const SUPPORTED_CHAINS: Chain[] = [MONAD_DEVNET, FUSE_EMBER]\n\nexport const DEFAULT_CHAIN = MONAD_DEVNET\n\n// Network switching configuration type\nexport interface NetworkConfig {\n  chainId: string\n  chainName: string\n  nativeCurrency: {\n    name: string\n    symbol: string\n    decimals: number\n  }\n  rpcUrls: string[]\n  blockExplorerUrls: string[]\n}\n\n// Network switching configurations for MetaMask\nexport const MONAD_NETWORK_CONFIG: NetworkConfig = {\n  chainId: MONAD_DEVNET_ID,\n  chainName: MONAD_DEVNET.name,\n  nativeCurrency: MONAD_DEVNET.nativeCurrency,\n  rpcUrls: [MONAD_DEVNET.rpcUrls.default.http[0]],\n  blockExplorerUrls: [MONAD_DEVNET.blockExplorers.default.url]\n}\n\nexport const FUSE_NETWORK_CONFIG: NetworkConfig = {\n  chainId: FUSE_EMBER_ID,\n  chainName: FUSE_EMBER.name,\n  nativeCurrency: FUSE_EMBER.nativeCurrency,\n  rpcUrls: [FUSE_EMBER.rpcUrls.default.http[0]],\n  blockExplorerUrls: [FUSE_EMBER.blockExplorers.default.url]\n}\n\n// Error messages for network switching\nexport const NETWORK_ERRORS = {\n  WRONG_NETWORK: 'Please switch to a supported network',\n  NETWORK_SWITCH_FAILED: 'Failed to switch network',\n  USER_REJECTED: 'User rejected network switch',\n  CHAIN_NOT_ADDED: 'Network not added to wallet'\n} as const ","import { \n  type WalletClient, \n  createWalletClient, \n  createPublicClient,\n  custom, \n  http \n} from 'viem';\nimport { MONAD_DEVNET } from '../constants/networks';\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\n// Local storage keys\nexport const STORAGE_KEYS = {\n  AUTH: 'tribes_auth',\n  PROFILE: 'tribes_profile',\n  FOLLOWERS: 'tribes_followers'\n} as const;\n\nexport interface FollowedProfile {\n  address: string;\n  username: string;\n  avatar: string;\n}\n\n// Save auth data to local storage\nexport const saveAuthData = (data: { address: string | null; isConnected: boolean }) => {\n  localStorage.setItem(STORAGE_KEYS.AUTH, JSON.stringify(data));\n};\n\n// Get auth data from local storage\nexport const getAuthData = () => {\n  const data = localStorage.getItem(STORAGE_KEYS.AUTH);\n  return data ? JSON.parse(data) : { address: null, isConnected: false };\n};\n\n// Save profile data to local storage\nexport const saveProfileData = (data: any) => {\n  // Handle BigInt serialization\n  const profileDataString = JSON.stringify(data, (key, value) => {\n    // Convert BigInt to string with a special marker\n    if (typeof value === 'bigint') {\n      return { __bigint: value.toString() };\n    }\n    return value;\n  });\n  \n  localStorage.setItem(STORAGE_KEYS.PROFILE, profileDataString);\n};\n\n// Get profile data from local storage\nexport const getProfileData = () => {\n  const data = localStorage.getItem(STORAGE_KEYS.PROFILE);\n  if (!data) return null;\n  \n  // Handle BigInt deserialization\n  return JSON.parse(data, (key, value) => {\n    // Check if the value is our special BigInt marker object\n    if (value && typeof value === 'object' && value.__bigint) {\n      return BigInt(value.__bigint);\n    }\n    return value;\n  });\n};\n\n// Save followed profiles to local storage\nexport const saveFollowedProfiles = (profiles: FollowedProfile[]) => {\n  localStorage.setItem(STORAGE_KEYS.FOLLOWERS, JSON.stringify(profiles));\n};\n\n// Get followed profiles from local storage\nexport const getFollowedProfiles = (): FollowedProfile[] => {\n  const data = localStorage.getItem(STORAGE_KEYS.FOLLOWERS);\n  return data ? JSON.parse(data) : [];\n};\n\n// Check if user has followed minimum required profiles\nexport const hasMinimumFollows = () => {\n  const profiles = getFollowedProfiles();\n  return profiles.length >= 3;\n};\n\nexport const getEthereumProvider = async () => {\n  if (typeof window === 'undefined' || !window.ethereum) {\n    console.warn('No ethereum provider found');\n    return null;\n  }\n  \n  try {\n    // Ensure the provider is initialized\n    await window.ethereum.request({ method: 'eth_chainId' });\n    return window.ethereum;\n  } catch (error) {\n    console.error('Error initializing ethereum provider:', error);\n    return null;\n  }\n};\n\nexport const getPublicClient = () => {\n  return createPublicClient({\n    chain: MONAD_DEVNET,\n    transport: http()\n  });\n};\n\nexport const getWalletClient = () => {\n  if (!window.ethereum) throw new Error('No ethereum provider found');\n  return createWalletClient({\n    chain: MONAD_DEVNET,\n    transport: custom(window.ethereum)\n  });\n};\n\nexport function createWalletClientFromProvider(provider: any): WalletClient {\n  return createWalletClient({\n    chain: MONAD_DEVNET,\n    transport: custom(provider)\n  });\n} ","import ProfileNFTMinterABI from '../abi/ProfileNFTMinter.json';\nimport TribeControllerABI from '../abi/TribeController.json';\nimport CollectibleControllerABI from '../abi/CollectibleController.json';\nimport EventControllerABI from '../abi/EventController.json';\nimport CommunityPointsABI from '../abi/CommunityPoints.json';\nimport VotingABI from '../abi/Voting.json';\nimport RoleManagerABI from '../abi/RoleManager.json';\nimport SuperCommunityControllerABI from '../abi/SuperCommunityController.json';\nimport ContentManagerABI from '../abi/ContentManager.json';\nimport PostMinterABI from '../abi/PostMinter.json';\n\n// Export all ABIs with proper typing\nexport const ABIS = {\n  ProfileNFTMinter: ProfileNFTMinterABI,\n  TribeController: TribeControllerABI,\n  CollectibleController: CollectibleControllerABI,\n  EventController: EventControllerABI,\n  CommunityPoints: CommunityPointsABI,\n  Voting: VotingABI,\n  RoleManager: RoleManagerABI,\n  SuperCommunityController: SuperCommunityControllerABI,\n  ContentManager: ContentManagerABI,\n  PostMinter: PostMinterABI\n} as const; ","import { MONAD_DEVNET, FUSE_EMBER, SUPPORTED_CHAINS } from './networks';\nimport { createPublicClient, createWalletClient, http, custom, Chain, PublicClient, WalletClient } from 'viem';\n\ntype ContractAddresses = {\n  ROLE_MANAGER: `0x${string}`;\n  PROFILE_NFT_MINTER: `0x${string}`;\n  TRIBE_CONTROLLER: `0x${string}`;\n  COLLECTIBLE_CONTROLLER: `0x${string}`;\n  EVENT_CONTROLLER: `0x${string}`;\n  SUPER_COMMUNITY_CONTROLLER: `0x${string}`;\n  COMMUNITY_POINTS: `0x${string}`;\n  VOTING: `0x${string}`;\n  CONTENT_MANAGER: `0x${string}`;\n  POST_MINTER: `0x${string}`;\n};\n\ntype ChainAddresses = {\n  [key: number]: ContractAddresses;\n};\n\n// Separate caches for public and wallet clients\nconst publicClientCache = new Map<number, PublicClient>();\nconst walletClientCache = new Map<number, WalletClient>();\n\n// Contract Addresses by Chain\nexport const CONTRACT_ADDRESSES: ChainAddresses = {\n  [MONAD_DEVNET.id]: {\n    ROLE_MANAGER: '0x153777B9Cb7323a911E5D3E3132B3f1158bd71BE',\n    PROFILE_NFT_MINTER: '0xFF65e7c1dD05df41e74a5b04c9958BbD661E1B0c',\n    TRIBE_CONTROLLER: '0x16C4F870B59E55bB80A620547987Bd9302FC567d',\n    COLLECTIBLE_CONTROLLER: '0x5dC8e5A38dC1edDC51aFae4FA27b7E32147D9895',\n    EVENT_CONTROLLER: '0x77B123A5dA78c9C33E28ed20aC984dF41693a024',\n    SUPER_COMMUNITY_CONTROLLER: '0x85083329E71b77430f9b7Cf7F4d17b5f9ff81290',\n    COMMUNITY_POINTS: '0x3F1F0811E2d83003e085Ba812eC7a331795032dE',\n    VOTING: '0xC27B7754950fa8554Cb588A7Aa04d406Ad639094',\n    CONTENT_MANAGER: '0x4c1B99D32A3671a35c3229cb3647d080CFb94380',\n    POST_MINTER: '0x5053a6C1c144Db7F876F7b898943b831cf3Fd817'\n  },\n  [FUSE_EMBER.id]: {\n    ROLE_MANAGER: '0x661C2B7f1C3EC1ACEeA2c02818459061D40823bD',\n    PROFILE_NFT_MINTER: '0x6fB6B1DDD4EA6640e04D70979C57E9C01c7b974a',\n    TRIBE_CONTROLLER: '0x54812005171F747f5E69afA08989F41Cf06eeE48',\n    COLLECTIBLE_CONTROLLER: '0xFD4E7c9AbEab99C9d23605519A883F1a3814595b',\n    EVENT_CONTROLLER: '0xF4515E673EF9ED006dbFAF702A87Cd579b128f37',\n    SUPER_COMMUNITY_CONTROLLER: '0x214653d9Cc9bbd148B0A1Fc833867c2cE8A0e609',\n    COMMUNITY_POINTS: '0xdcF66412c2F2E76938Ed4F991f350Eb4CEA0c377',\n    VOTING: '0xFCF9C955fB3A4B137E9526E1De979c67c9a7b45B',\n    CONTENT_MANAGER: '0x8fa7A72aAB8595E0EA48bDd0A26e7c1b7F72B362',\n    POST_MINTER: '0x58a1F6A010Eb711f5e564C073fC24bDa4AFA2392'\n  }\n} as const;\n\n// Helper to get contract addresses for current chain\nexport const getContractAddresses = (chainId: number): ContractAddresses => {\n  const addresses = CONTRACT_ADDRESSES[chainId];\n  if (!addresses) {\n    console.warn(`No contract addresses found for chain ${chainId}, falling back to Monad Devnet`);\n    return CONTRACT_ADDRESSES[MONAD_DEVNET.id];\n  }\n  return addresses;\n};\n\n// Get the current chain configuration\nexport const getCurrentChain = (chainId: number): Chain => {\n  const chain = SUPPORTED_CHAINS.find(chain => chain.id === chainId);\n  if (!chain) {\n    console.warn(`Chain ${chainId} not supported, falling back to Monad Devnet`);\n    return MONAD_DEVNET;\n  }\n  return chain;\n};\n\nexport const getPublicClient = (chainId?: number): PublicClient => {\n  const chain = chainId ? getCurrentChain(chainId) : MONAD_DEVNET;\n  const cached = publicClientCache.get(chain.id);\n  \n  if (cached) {\n    return cached;\n  }\n\n  const client = createPublicClient({\n    chain,\n    transport: http(),\n    batch: {\n      multicall: true\n    }\n  });\n\n  publicClientCache.set(chain.id, client);\n  return client;\n};\n\nexport const getWalletClient = (chainId?: number): WalletClient => {\n  if (!window.ethereum) throw new Error('No ethereum provider found');\n  \n  const chain = chainId ? getCurrentChain(chainId) : MONAD_DEVNET;\n  const cached = walletClientCache.get(chain.id);\n  \n  if (cached) {\n    return cached;\n  }\n\n  const client = createWalletClient({\n    chain,\n    transport: custom(window.ethereum)\n  });\n\n  walletClientCache.set(chain.id, client);\n  return client;\n};\n\n// Profile NFT Minter ABI\nexport const PROFILE_NFT_MINTER_ABI = [\n  // Profile Creation\n  {\n    inputs: [\n      { internalType: \"string\", name: \"username\", type: \"string\" },\n      { internalType: \"string\", name: \"metadataURI\", type: \"string\" }\n    ],\n    name: \"createProfile\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  // Username Checks\n  {\n    inputs: [{ internalType: \"string\", name: \"username\", type: \"string\" }],\n    name: \"usernameExists\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  // Profile Updates\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" },\n      { internalType: \"string\", name: \"newMetadataURI\", type: \"string\" }\n    ],\n    name: \"updateProfileMetadata\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  // Profile Queries\n  {\n    inputs: [{ internalType: \"uint256\", name: \"tokenId\", type: \"uint256\" }],\n    name: \"getProfileByTokenId\",\n    outputs: [\n      { internalType: \"string\", name: \"username\", type: \"string\" },\n      { internalType: \"string\", name: \"metadataURI\", type: \"string\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ internalType: \"string\", name: \"username\", type: \"string\" }],\n    name: \"getTokenIdByUsername\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n] as const; ","import { PublicClient, WalletClient, createPublicClient, createWalletClient, http, custom } from 'viem';\nimport { ABIS } from './abis';\nimport { MONAD_DEVNET } from '../constants/networks';\nimport { getCurrentChain, getContractAddresses as getAddresses } from '../constants/contracts';\n\n// Use the same interface as in constants/contracts.ts to avoid mismatches\ninterface ContractAddresses {\n  ROLE_MANAGER: `0x${string}`;\n  PROFILE_NFT_MINTER: `0x${string}`;\n  TRIBE_CONTROLLER: `0x${string}`;\n  COLLECTIBLE_CONTROLLER: `0x${string}`;\n  EVENT_CONTROLLER: `0x${string}`;\n  SUPER_COMMUNITY_CONTROLLER: `0x${string}`;\n  COMMUNITY_POINTS: `0x${string}`;\n  VOTING: `0x${string}`;\n  CONTENT_MANAGER: `0x${string}`;\n  POST_MINTER: `0x${string}`;\n}\n\n// Get addresses directly from constants/contracts.ts to avoid duplication\nexport function getContractAddresses(chainId: number = MONAD_DEVNET.id): ContractAddresses {\n  return getAddresses(chainId);\n}\n\n// Get chain-specific public client\nexport function getPublicClient(chainId: number = MONAD_DEVNET.id): PublicClient {\n  const chain = getCurrentChain(chainId);\n  return createPublicClient({\n    chain,\n    transport: http()\n  });\n}\n\n// Get chain-specific wallet client\nexport async function getWalletClient(chainId: number = MONAD_DEVNET.id): Promise<WalletClient> {\n  const provider = window.ethereum;\n  if (!provider) {\n    throw new Error('No provider available');\n  }\n\n  const chain = getCurrentChain(chainId);\n  const [account] = await provider.request({ method: 'eth_requestAccounts' });\n\n  return createWalletClient({\n    account,\n    chain,\n    transport: custom(provider)\n  });\n}\n\n// Get chain-specific contract configurations\nexport function getContracts(chainId: number = MONAD_DEVNET.id) {\n  const addresses = getContractAddresses(chainId);\n  \n  return {\n    profileNFTMinter: {\n      address: addresses.PROFILE_NFT_MINTER,\n      abi: ABIS.ProfileNFTMinter\n    },\n    // Use TRIBE_CONTROLLER for tribesContract for backward compatibility\n    tribesContract: {\n      address: addresses.TRIBE_CONTROLLER,\n      abi: ABIS.TribeController\n    },\n    tribeController: {\n      address: addresses.TRIBE_CONTROLLER,\n      abi: ABIS.TribeController\n    },\n    collectibleController: {\n      address: addresses.COLLECTIBLE_CONTROLLER,\n      abi: ABIS.CollectibleController\n    },\n    eventController: {\n      address: addresses.EVENT_CONTROLLER,\n      abi: ABIS.EventController\n    },\n    communityPoints: {\n      address: addresses.COMMUNITY_POINTS,\n      abi: ABIS.CommunityPoints\n    },\n    voting: {\n      address: addresses.VOTING,\n      abi: ABIS.Voting\n    },\n    roleManager: {\n      address: addresses.ROLE_MANAGER,\n      abi: ABIS.RoleManager\n    },\n    superCommunityController: {\n      address: addresses.SUPER_COMMUNITY_CONTROLLER,\n      abi: ABIS.SuperCommunityController\n    },\n    contentManager: {\n      address: addresses.CONTENT_MANAGER,\n      abi: ABIS.ContentManager\n    },\n    postMinter: {\n      address: addresses.POST_MINTER,\n      abi: ABIS.PostMinter\n    }\n  } as const;\n}\n\n// Helper to get current chain info\nexport const getCurrentChainInfo = (chainId?: number) => {\n  const chain = chainId ? getCurrentChain(chainId) : MONAD_DEVNET;\n  return {\n    chain,\n    contracts: getContracts(chain.id),\n    publicClient: getPublicClient(chain.id),\n    getWalletClient: () => getWalletClient(chain.id)\n  };\n}; ","/**\n * Utilities for blockchain operations\n */\nimport { type Log, type PublicClient, type Abi, type TransactionReceipt } from 'viem';\nimport { getPublicClient as viemGetPublicClient, getContracts as configGetContracts } from '../config/contracts';\nimport { SUPPORTED_CHAINS, MONAD_DEVNET } from '../constants/networks';\nimport { getEthereumProvider } from './ethereum';\nimport { type Chain } from 'viem';\nimport { ZeroAddress } from 'ethers';\nimport { getContractAddresses as contractsGetContractAddresses } from '../constants/contracts';\n\n// Define a more specific type for contract function parameters\ntype ContractReadFunction = (...args: unknown[]) => Promise<unknown>;\ntype ContractWriteFunction = (...args: unknown[]) => Promise<`0x${string}`>;\n\n// Define WalletClient interface\ninterface WalletClient {\n  address?: string;\n  signMessage?: (message: string) => Promise<string>;\n}\n\n// Re-export functions from other modules for consistency\nexport const getPublicClient = viemGetPublicClient;\nexport const getContracts = configGetContracts;\nexport const getContractAddresses = contractsGetContractAddresses;\n\n/**\n * Get the current chain ID from connected wallet\n * @returns Current chain ID\n */\nexport const getCurrentChainId = async (): Promise<number> => {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      console.warn('No provider available, using Monad Devnet');\n      return MONAD_DEVNET.id;\n    }\n    \n    // Different providers have different methods to get chain ID\n    // Try multiple approaches\n    try {\n      // Try using eth_chainId RPC method directly\n      const chainIdHex = await provider.request({ method: 'eth_chainId' });\n      if (chainIdHex) {\n        const chainId = parseInt(chainIdHex, 16);\n        \n        // Check if the chain is supported\n        const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n        if (!isSupported) {\n          console.warn(`Chain ID ${chainId} not supported, using Monad Devnet`);\n          return MONAD_DEVNET.id;\n        }\n        \n        return chainId;\n      }\n    } catch (requestError) {\n      console.warn('Failed to get chainId via request method:', requestError);\n    }\n    \n    // Fallback to using chainId property if it exists\n    if (provider.chainId) {\n      const chainId = typeof provider.chainId === 'string' \n        ? parseInt(provider.chainId, 16) \n        : Number(provider.chainId);\n      \n      return chainId;\n    }\n    \n    // Don't try to use provider.getNetwork() as it may not exist on all providers\n    // This was causing the TypeError: provider.getNetwork is not a function error\n    \n    console.warn('Could not determine chain ID, using Monad Devnet');\n    return MONAD_DEVNET.id;\n  } catch (error) {\n    console.error('Error getting current chain ID:', error);\n    // Return Monad Devnet as default\n    return MONAD_DEVNET.id;\n  }\n};\n\n/**\n * Get chain configuration by ID\n * @param chainId Chain ID\n * @returns Chain configuration\n */\nexport const getChainConfig = (chainId: number): Chain => {\n  const chain = SUPPORTED_CHAINS.find((c: Chain) => c.id === chainId);\n  if (!chain) {\n    throw new Error(`Chain ID ${chainId} is not supported`);\n  }\n  return chain;\n};\n\n/**\n * Extract metadata from transaction\n * @param chainId Chain ID\n * @param tribeId Tribe ID\n * @param publicClient Public client for blockchain interaction\n * @returns Metadata string\n */\nexport const extractMetadataFromTransaction = async (\n  chainId: number,\n  tribeId: number,\n  publicClient: PublicClient\n): Promise<string> => {\n  try {\n    const { tribeController } = getContracts(chainId);\n    \n    // Get tribe creation transaction\n    const events = await publicClient.getLogs({\n      address: tribeController.address,\n      event: {\n        type: 'event',\n        name: 'TribeCreated',\n        inputs: [\n          { type: 'uint256', name: 'tribeId', indexed: true },\n          { type: 'address', name: 'creator', indexed: true },\n          { type: 'string', name: 'name' },\n          { type: 'string', name: 'metadata' }\n        ]\n      },\n      args: {\n        tribeId: BigInt(tribeId)\n      },\n      fromBlock: 'earliest',\n      toBlock: 'latest'\n    });\n\n    if (events && events.length > 0) {\n      const event = events[0];\n      return event.args.metadata || '{}';\n    }\n\n    return '{}';\n  } catch (error) {\n    console.error('Error extracting metadata from transaction:', error);\n    return '{}';\n  }\n};\n\n/**\n * Wait for transaction confirmation\n * @param txHash Transaction hash\n * @param chainId Chain ID\n * @returns Transaction receipt\n */\nexport const waitForTransaction = async (\n  txHash: `0x${string}`,\n  chainId: number\n): Promise<TransactionReceipt> => {\n  const publicClient = getPublicClient(chainId);\n  return await publicClient.waitForTransactionReceipt({ hash: txHash });\n};\n\n/**\n * Extract event logs from transaction receipt\n * @param receipt Transaction receipt\n * @param eventSignature Event signature to filter by\n * @returns Found log or undefined\n */\nexport const extractEventFromLogs = (\n  receipt: TransactionReceipt,\n  eventSignature: string\n): Log | undefined => {\n  return receipt.logs.find(\n    (log: Log) => log.topics[0] === eventSignature\n  );\n};\n\n/**\n * Check if address is zero address\n * @param address Address to check\n * @returns Whether address is zero address\n */\nexport const isZeroAddress = (address: string): boolean => {\n  return address === ZeroAddress || address === '0x0000000000000000000000000000000000000000';\n};\n\n/**\n * Get contract instance\n * @param params Contract parameters\n * @returns Contract instance\n */\nexport function getContract(params: { address: string; abi: Abi }): {\n  address: string;\n  abi: Abi;\n  read: Record<string, ContractReadFunction>;\n  write: Record<string, ContractWriteFunction>;\n} {\n  try {\n    const publicClient = getPublicClient();\n    \n    // Create a contract instance with read capabilities\n    return {\n      address: params.address,\n      abi: params.abi,\n      // Set up read functions based on the ABI\n      read: buildContractReadFunctions(params.abi, params.address, publicClient),\n      // Set up write functions if needed\n      write: {}\n    };\n  } catch (error) {\n    console.error('Error creating contract instance:', error);\n    // Return a minimal contract instance as fallback\n    return {\n      address: params.address,\n      abi: params.abi,\n      read: {\n        balanceOf: async () => BigInt(0)\n      },\n      write: {}\n    };\n  }\n}\n\n/**\n * Build contract read functions based on ABI\n * @param abi Contract ABI\n * @param address Contract address\n * @param publicClient Public client\n * @returns Object with read functions\n */\nfunction buildContractReadFunctions(abi: Abi, address: string, publicClient: PublicClient): Record<string, ContractReadFunction> {\n  const readFunctions: Record<string, ContractReadFunction> = {};\n  \n  // Find all read functions in the ABI\n  abi.forEach(item => {\n    if (item.type === 'function' && \n        (item.stateMutability === 'view' || item.stateMutability === 'pure')) {\n      readFunctions[item.name] = async (...args: unknown[]) => {\n        try {\n          // Call the contract function\n          return await publicClient.readContract({\n            address: address as `0x${string}`,\n            abi: [item],\n            functionName: item.name,\n            args\n          });\n        } catch (error) {\n          console.error(`Error calling ${item.name}:`, error);\n          throw error;\n        }\n      };\n    }\n  });\n  \n  return readFunctions;\n}\n\n/**\n * Get wallet client\n */\nexport async function getWalletClient(): Promise<WalletClient> {\n  try {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No wallet provider available');\n    }\n    \n    // Real implementation should use the provider to get a wallet client\n    return {\n      address: provider.selectedAddress\n    };\n  } catch (error) {\n    console.error('Error getting wallet client:', error);\n    return {};\n  }\n}\n\n/**\n * Blockchain object for compatibility with existing code\n * This should use the ORIGINAL implementation that was working before\n */\nexport const blockchain = {\n  // Connect to the blockchain\n  connect: async () => {\n    try {\n      const provider = await getEthereumProvider();\n      if (!provider) {\n        throw new Error('No provider available');\n      }\n      \n      // Request accounts to ensure connection\n      await provider.request({ method: 'eth_requestAccounts' });\n      return true;\n    } catch (error) {\n      console.error('Error connecting to blockchain:', error);\n      throw error;\n    }\n  },\n  \n  // Get the connected wallet address\n  getAddress: async () => {\n    try {\n      const provider = await getEthereumProvider();\n      if (!provider || !provider.selectedAddress) {\n        throw new Error('No wallet connected');\n      }\n      return provider.selectedAddress;\n    } catch (error) {\n      console.error('Error getting wallet address:', error);\n      throw error;\n    }\n  },\n  \n  // Get the current chain ID\n  getCurrentChainId,\n  getChainId: getCurrentChainId, // Alias\n  \n  // Get the Ethereum provider\n  getProvider: async () => {\n    return getEthereumProvider();\n  },\n  \n  // Get a signer for transactions\n  getSigner: async () => {\n    const provider = await getEthereumProvider();\n    if (!provider) {\n      throw new Error('No provider available');\n    }\n    \n    // Return an ethers-compatible signer\n    return {\n      address: provider.selectedAddress,\n      signMessage: async (message: string) => {\n        return await provider.request({\n          method: 'personal_sign',\n          params: [message, provider.selectedAddress]\n        });\n      }\n    };\n  },\n  \n  // Create a post in a tribe\n  createTribePost: async (params: Record<string, unknown>) => {\n    try {\n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // Make the actual contract call\n      // This should integrate with the actual blockchain implementation\n      // For now, returning a placeholder hash until the actual implementation is integrated\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error creating tribe post:', error);\n      throw error;\n    }\n  },\n  \n  // Get a post from a tribe\n  getTribePost: async (tribeId: number, postId: string) => {\n    try {\n      console.log(`Getting post ${postId} from tribe ${tribeId}`);\n      \n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // Make the actual contract call to get a post\n      // This should integrate with the actual blockchain implementation\n      // Temporary placeholder response\n      return {\n        id: postId,\n        content: 'Sample post content',\n        title: 'Sample Post',\n        author: '0x0000000000000000000000000000000000000000',\n        timestamp: Math.floor(Date.now() / 1000),\n        likes: 0,\n        comments: [],\n        metadata: '{}'\n      };\n    } catch (error) {\n      console.error('Error getting tribe post:', error);\n      return null;\n    }\n  },\n  \n  // Vote on a poll\n  voteOnPoll: async (tribeId: number, postId: string, optionIndex: number) => {\n    try {\n      console.log(`Voting on poll ${postId} in tribe ${tribeId}, option ${optionIndex}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to vote on a poll\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error voting on poll:', error);\n      throw error;\n    }\n  },\n  \n  // RSVP to an event\n  rsvpToEvent: async (tribeId: number, postId: string, attending: boolean) => {\n    try {\n      console.log(`RSVP to event ${postId} in tribe ${tribeId}, attending: ${attending}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to RSVP to an event\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error RSVPing to event:', error);\n      throw error;\n    }\n  },\n  \n  // Like a post\n  likePost: async (tribeId: number, postId: string) => {\n    try {\n      console.log(`Liking post ${postId} in tribe ${tribeId}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to like a post\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error liking post:', error);\n      throw error;\n    }\n  },\n  \n  // Comment on a post\n  commentOnPost: async (tribeId: number, postId: string, comment: string) => {\n    try {\n      console.log(`Commenting on post ${postId} in tribe ${tribeId}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to comment on a post\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error commenting on post:', error);\n      throw error;\n    }\n  },\n  \n  // Update post metadata\n  updatePostMetadata: async (tribeId: number, postId: string, metadata: string) => {\n    try {\n      console.log(`Updating metadata for post ${postId} in tribe ${tribeId}`);\n      \n      // Get the necessary contracts and client\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to update post metadata\n      // For now, let's return a hash that matches the expected type\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error updating post metadata:', error);\n      throw error;\n    }\n  },\n  \n  // Profile-related methods\n  getProfileByTokenId: async (tokenId: number) => {\n    try {\n      console.log(`Getting profile for token ID ${tokenId}`);\n      \n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to get profile by token ID\n      // For now, let's return a structure compatible with what callers expect\n      \n      return {\n        tokenId: tokenId,\n        username: `user_${tokenId}`,\n        metadata: '{}',\n        owner: '0x0000000000000000000000000000000000000000',\n        profile: [`user_${tokenId}`, '{}'] // For backward compatibility\n      };\n    } catch (error) {\n      console.error('Error getting profile by token ID:', error);\n      return null;\n    }\n  },\n  \n  mintProfile: async ({ username, metadataURI }: { username: string; metadataURI: string }) => {\n    try {\n      console.log(`Minting profile for username ${username}`);\n      \n      // Get current chain ID and required contract interfaces\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to mint a profile\n      // For now, let's make this compatible with the expected signature from callers\n      // Return hash that matches the expected type from callers\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error minting profile:', error);\n      throw error;\n    }\n  },\n  \n  updateProfile: async ({ tokenId, metadata }: { tokenId: number; metadata: string }) => {\n    try {\n      console.log(`Updating profile for token ID ${tokenId}`);\n      \n      // Get current chain ID and required contract interfaces\n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to update a profile\n      // For now, let's make this compatible with the expected signature from callers\n      // Return hash that matches the expected type from callers\n      return `0x${Math.random().toString(16).substring(2).padStart(64, '0')}` as `0x${string}`;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  },\n  \n  usernameExists: async (username: string) => {\n    try {\n      console.log(`Checking if username ${username} exists`);\n      \n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // Make this a real implementation that checks if a username exists\n      // For now, let's just return a realistic value\n      return false;\n    } catch (error) {\n      console.error('Error checking if username exists:', error);\n      throw error;\n    }\n  },\n  \n  getProfileIdByUsername: async (username: string) => {\n    try {\n      console.log(`Getting profile ID for username ${username}`);\n      \n      // Original implementation to get a profile ID by username\n      // Add the actual implementation here\n      \n      return 0;\n    } catch (error) {\n      console.error('Error getting profile ID by username:', error);\n      throw error;\n    }\n  },\n  \n  getProfileByAddress: async (address: string) => {\n    try {\n      console.log(`Getting profile for address ${address}`);\n      \n      const chainId = await getCurrentChainId();\n      const contracts = getContracts(chainId);\n      const client = getPublicClient(chainId);\n      \n      // This should make the actual contract call to get profile by address\n      // For now, let's return a structure compatible with what callers expect\n      return {\n        tokenId: 1,\n        username: \"user\",\n        metadata: \"{}\",\n        owner: address,\n        // The profile property needs to match the structure expected by callers\n        profile: [\"user\", \"{}\"]\n      };\n    } catch (error) {\n      console.error('Error getting profile by address:', error);\n      return null;\n    }\n  }\n}; ","import { BrowserProvider } from 'ethers';\n\n// Singleton provider instance\nlet provider: BrowserProvider | null = null;\nlet isInitialized = false;\n\nexport async function initializeProvider(): Promise<BrowserProvider> {\n  if (!window.ethereum) {\n    throw new Error('MetaMask is not installed');\n  }\n  \n  if (!provider) {\n    provider = new BrowserProvider(window.ethereum);\n  }\n  \n  // Request accounts to trigger the MetaMask popup if needed\n  await provider.send('eth_requestAccounts', []);\n  isInitialized = true;\n  \n  return provider;\n}\n\nexport function getProvider(): BrowserProvider {\n  if (!isInitialized || !provider) {\n    throw new Error('Provider not initialized. Call initializeProvider first.');\n  }\n  return provider;\n}\n\nexport function resetProvider(): void {\n  provider = null;\n  isInitialized = false;\n}\n\n// Listen for network changes\nif (typeof window !== 'undefined' && window.ethereum) {\n  window.ethereum.on('chainChanged', () => {\n    resetProvider();\n  });\n  \n  window.ethereum.on('accountsChanged', () => {\n    resetProvider();\n  });\n} ","import { useState, useEffect, useRef } from 'react';\nimport { getEthereumProvider } from '../utils/ethereum';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { initializeProvider, getProvider } from '../utils/provider';\nimport { ProfileData, ProfileMetadata } from '../types/user';\nconst STORAGE_KEY = 'tribes_auth_state';\nconst AUTH_EXPIRATION = 24 * 60 * 60 * 1000; // 24 hours\n\n// Extend ProfileData with tokenId as bigint\nexport interface Profile extends Omit<ProfileData, 'tokenId'> {\n  tokenId: bigint;\n}\n\ninterface AuthState {\n  address: string;\n  chainId: number;\n  profile?: {\n    tokenId: string;\n    username: string;\n    metadata: {\n      uri: string;\n    };\n  };\n  timestamp: number;\n}\n\n// Validate stored auth state\nconst isValidAuthState = (state: AuthState): boolean => {\n  return (\n    !!state &&\n    typeof state.address === 'string' &&\n    state.address.startsWith('0x') &&\n    typeof state.chainId === 'number' &&\n    state.chainId > 0 &&\n    typeof state.timestamp === 'number' &&\n    Date.now() - state.timestamp <= AUTH_EXPIRATION\n  );\n};\n\nexport function useAuth() {\n  const [address, setAddress] = useState<string | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state)) {\n          return state.address;\n        }\n        localStorage.removeItem(STORAGE_KEY);\n      }\n    } catch (error) {\n      console.error('Error loading auth state:', error);\n      localStorage.removeItem(STORAGE_KEY);\n    }\n    return null;\n  });\n\n  const [chainId, setChainId] = useState<number | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state)) {\n          return state.chainId;\n        }\n      }\n    } catch (error) {\n      console.error('Error loading chain ID:', error);\n    }\n    return null;\n  });\n  \n  const [isConnected, setIsConnected] = useState<boolean>(() => !!address && !!chainId);\n  const [profile, setProfile] = useState<Profile | null>(() => {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        if (isValidAuthState(state) && state.profile) {\n          const metadata: ProfileMetadata = {\n            avatar: state.profile.metadata?.uri || '',\n            bio: '',\n            createdAt: Date.now()\n          };\n          \n          return {\n            tokenId: BigInt(state.profile.tokenId || '0'),\n            username: state.profile.username,\n            metadata,\n            nftUri: state.profile.metadata?.uri || '',\n            owner: state.address as `0x${string}`\n          };\n        }\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    }\n    return null;\n  });\n\n  const [isInitializing, setIsInitializing] = useState(false);\n  const initializationRef = useRef(false);\n  const providerInitializedRef = useRef(false);\n\n  // Handle chain changes\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      const handleChainChanged = (newChainId: string) => {\n        setChainId(parseInt(newChainId, 16));\n      };\n\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  // Handle account changes\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.ethereum) {\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else if (accounts[0] !== address) {\n          setAddress(accounts[0]);\n          fetchProfile(accounts[0]);\n        }\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, [address]);\n\n  // Consolidated initialization effect\n  useEffect(() => {\n    let mounted = true;\n\n    const initialize = async () => {\n      if (initializationRef.current || isInitializing) return;\n      \n      try {\n        setIsInitializing(true);\n        initializationRef.current = true;\n        \n        const provider = await getEthereumProvider();\n        if (!provider || !mounted) return;\n\n        try {\n          const chainIdHex = await provider.request({ method: 'eth_chainId' });\n          const chainIdNum = parseInt(chainIdHex as string, 16);\n          setChainId(chainIdNum);\n        } catch (error) {\n          console.error('Error getting chain ID:', error);\n          return;\n        }\n\n        if (provider.selectedAddress) {\n          if (typeof window !== 'undefined' && window.ethereum && !providerInitializedRef.current) {\n            await initializeProvider();\n            providerInitializedRef.current = true;\n          }\n\n          setAddress(provider.selectedAddress);\n          setIsConnected(true);\n\n          if (!profile && mounted) {\n            await fetchProfile(provider.selectedAddress);\n          }\n        }\n      } catch (error) {\n        console.error('Error in initialization:', error);\n      } finally {\n        if (mounted) {\n          setIsInitializing(false);\n        }\n      }\n    };\n\n    initialize();\n\n    return () => {\n      mounted = false;\n      initializationRef.current = false;\n    };\n  }, []);\n\n  // Single effect for auth state persistence\n  useEffect(() => {\n    if (!isInitializing && address && chainId) {\n      const state: Partial<AuthState> = {\n        address,\n        chainId,\n        timestamp: Date.now()\n      };\n\n      if (profile) {\n        state.profile = {\n          tokenId: profile.tokenId.toString(),\n          username: profile.username,\n          metadata: {\n            uri: profile.nftUri || ''\n          }\n        };\n      }\n\n      saveAuthState(state);\n    }\n  }, [address, chainId, profile, isInitializing]);\n\n  // Save auth state\n  const saveAuthState = (state: Partial<AuthState>) => {\n    try {\n      const currentState = localStorage.getItem(STORAGE_KEY);\n      const parsedState = currentState ? JSON.parse(currentState) as AuthState : null;\n      \n      const newState: AuthState = {\n        address: state.address || parsedState?.address || '',\n        chainId: state.chainId || parsedState?.chainId || 0,\n        profile: state.profile || parsedState?.profile,\n        timestamp: Date.now()\n      };\n      \n      if (newState.address) {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n        localStorage.setItem('tribes_auth', JSON.stringify({\n          isConnected: true,\n          address: newState.address,\n          chainId: newState.chainId\n        }));\n        \n        if (newState.profile) {\n          localStorage.setItem('tribes_profile', JSON.stringify(newState.profile));\n        }\n      }\n    } catch (err) {\n      console.error('Failed to save auth state:', err);\n    }\n  };\n\n  const connect = async () => {\n    try {\n      if (isInitializing) return;\n      setIsInitializing(true);\n      \n      if (typeof window !== 'undefined' && window.ethereum) {\n        await initializeProvider();\n      }\n      \n      const provider = await getEthereumProvider();\n      if (!provider) {\n        throw new Error('No provider found');\n      }\n\n      await provider.request({ method: 'eth_requestAccounts' });\n      const address = provider.selectedAddress;\n      if (!address) {\n        throw new Error('No address found');\n      }\n\n      setAddress(address);\n      setIsConnected(true);\n      await fetchProfile(address);\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    } finally {\n      setIsInitializing(false);\n    }\n  };\n\n  const disconnect = () => {\n    setAddress(null);\n    setIsConnected(false);\n    setProfile(null);\n    \n    localStorage.removeItem(STORAGE_KEY);\n    localStorage.removeItem('tribes_auth');\n    localStorage.removeItem('tribes_profile');\n    localStorage.removeItem('redirect_attempts');\n  };\n\n  const fetchProfile = async (userAddress: string) => {\n    try {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        await initializeProvider();\n      }\n      \n      const result = await blockchain.getProfileByAddress(userAddress);\n      \n      if (!result) {\n        return null;\n      }\n      \n      if (result.profile) {\n        const [username, metadataStr] = result.profile;\n        \n        let metadata: ProfileMetadata;\n        try {\n          metadata = JSON.parse(metadataStr);\n        } catch (e) {\n          metadata = { avatar: '', bio: '', createdAt: Date.now() };\n        }\n        \n        const profile: Profile = {\n          tokenId: BigInt(0),\n          username,\n          metadata,\n          nftUri: metadata.avatar || '',\n          owner: userAddress as `0x${string}`\n        };\n        \n        setProfile(profile);\n        return profile;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      return null;\n    }\n  };\n\n  return {\n    address,\n    isConnected,\n    profile,\n    connect,\n    disconnect,\n    fetchProfile,\n    chainId\n  };\n}","import { useAccount, useConfig } from 'wagmi';\nimport { SUPPORTED_CHAINS } from '../constants/networks';\n\nexport const useNetwork = () => {\n  const { chain } = useAccount();\n  const { chains } = useConfig();\n\n  const isSupported = (chainId?: number) => {\n    if (!chainId) return false;\n    return SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n  };\n\n  const isCorrectNetwork = isSupported(chain?.id);\n\n  const switchNetwork = async (targetChainId: number) => {\n    if (!window.ethereum) {\n      throw new Error('No ethereum provider found');\n    }\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: `0x${targetChainId.toString(16)}` }],\n      });\n    } catch (error: any) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (error.code === 4902) {\n        const targetChain = SUPPORTED_CHAINS.find(chain => chain.id === targetChainId);\n        if (!targetChain) {\n          throw new Error(`Chain ID ${targetChainId} is not supported`);\n        }\n\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: `0x${targetChainId.toString(16)}`,\n            chainName: targetChain.name,\n            nativeCurrency: targetChain.nativeCurrency,\n            rpcUrls: targetChain.rpcUrls.default.http,\n            blockExplorerUrls: [targetChain.blockExplorers?.default.url],\n          }],\n        });\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  return {\n    chainId: chain?.id,\n    isSupported,\n    isCorrectNetwork,\n    switchNetwork,\n  };\n}; ","import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Menu, Bell, ChevronDown, LogOut } from 'lucide-react';\nimport { useAuth } from '../hooks/useAuth';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { MONAD_DEVNET, FUSE_EMBER } from '../constants/networks';\n\ninterface NavigationProps {\n  onMenuClick: () => void;\n}\n\nexport function Navigation({ onMenuClick }: NavigationProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { disconnect } = useAuth();\n  const { chainId, switchNetwork } = useNetwork();\n  const [showDropdown, setShowDropdown] = React.useState(false);\n\n  // Don't show navigation on connect screen\n  if (['/connect'].includes(location.pathname)) {\n    return null;\n  }\n\n  const handleDisconnect = () => {\n    disconnect();\n    navigate('/connect');\n    setShowDropdown(false);\n  };\n\n  // Navigate to dashboard when logo is clicked\n  const navigateToDashboard = () => {\n    navigate('/dashboard');\n  };\n\n  const formatChainName = () => {\n    if (chainId === MONAD_DEVNET.id) {\n      return 'Monad Devnet';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'Flash Testnet';\n    }\n    return 'Unsupported Chain';\n  };\n\n  const getChainLogo = () => {\n    if (chainId === MONAD_DEVNET.id) {\n      return '/monad-white.svg';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return '/fuse-white.svg';\n    }\n    return '/monad-white.svg'; // Default logo\n  };\n\n  const getChainLogoAlt = () => {\n    if (chainId === MONAD_DEVNET.id) {\n      return 'Monad Logo';\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'Fuse Logo';\n    }\n    return 'Chain Logo';\n  };\n\n  // Get the primary color based on the current chain\n  const getChainColor = () => {\n    if (chainId === MONAD_DEVNET.id) {\n      return 'monad-purple'; // Monad's purple\n    }\n    if (chainId === FUSE_EMBER.id) {\n      return 'fuse-orange'; // Fuse's orange\n    }\n    return 'monad-purple'; // Default color\n  };\n\n  const primaryColor = getChainColor();\n\n  return (\n    <nav className=\"sticky top-0 z-50 shadow-sm\" style={{ backgroundColor: 'var(--chain-bg)' }}>\n      <div className=\"flex items-center justify-between p-4\">\n        <div className=\"flex items-center space-x-4\">\n          <button onClick={onMenuClick} className=\"md:hidden text-text-primary\">\n            <Menu className=\"w-6 h-6\" />\n          </button>\n          <div \n            className=\"flex items-center space-x-2 cursor-pointer\" \n            onClick={navigateToDashboard}\n            aria-label=\"Go to Dashboard\"\n          >\n            <img \n              src={getChainLogo()}\n              alt={getChainLogoAlt()}\n              className=\"w-8 h-8\"\n            />\n            <span className=\"text-lg font-bold font-['Inter'] text-text-primary\">Tribes</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-3\">\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowDropdown(!showDropdown)}\n              className=\"flex items-center space-x-2 px-3 py-1.5 rounded-full bg-black/20 hover:bg-theme-primary/5 text-text-primary\"\n            >\n              <div className=\"w-5 h-5 rounded-full bg-theme-primary flex items-center justify-center text-text-primary text-xs font-bold\">\n                {chainId === MONAD_DEVNET.id ? 'M' : 'F'}\n              </div>\n              <span>{formatChainName()}</span>\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n\n            {showDropdown && (\n              <div \n                className=\"absolute top-full mt-2 right-0 w-48 backdrop-blur-sm rounded-xl shadow-lg\" \n                style={{ backgroundColor: 'var(--chain-bg)', opacity: 0.9 }}\n              >\n                <button\n                  onClick={() => {\n                    switchNetwork(MONAD_DEVNET.id);\n                    setShowDropdown(false);\n                  }}\n                  className={`w-full flex items-center space-x-2 px-4 py-3 hover:bg-theme-primary/5 text-text-primary text-left ${chainId === MONAD_DEVNET.id ? 'bg-theme-primary/10' : ''}`}\n                >\n                  <div className=\"w-5 h-5 rounded-full bg-theme-primary flex items-center justify-center text-xs font-bold\">\n                    M\n                  </div>\n                  <span>Switch to Monad</span>\n                </button>\n                <button\n                  onClick={() => {\n                    switchNetwork(FUSE_EMBER.id);\n                    setShowDropdown(false);\n                  }}\n                  className={`w-full flex items-center space-x-2 px-4 py-3 hover:bg-theme-primary/5 text-text-primary text-left ${chainId === FUSE_EMBER.id ? 'bg-theme-primary/10' : ''}`}\n                >\n                  <div className=\"w-5 h-5 rounded-full bg-theme-primary flex items-center justify-center text-xs font-bold\">\n                    F\n                  </div>\n                  <span>Switch to Flash</span>\n                </button>\n                <button\n                  onClick={handleDisconnect}\n                  className=\"w-full flex items-center space-x-2 px-4 py-3 text-error-main hover:bg-black/20\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                  <span>Disconnect</span>\n                </button>\n              </div>\n            )}\n          </div>\n          <button className={`w-8 h-8 flex items-center justify-center text-text-primary hover:text-${primaryColor}`}>\n            <Bell className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n    </nav>\n  );\n}","/**\n * Types for post-related data structures\n */\n\nimport { PostInteractions } from './interaction';\n\nexport enum PostType {\n  TEXT = 0,\n  IMAGE = 1,\n  VIDEO = 2,\n  LINK = 3,\n  EVENT = 4,\n  POLL = 5\n}\n\nexport interface PostStats {\n  viewCount?: number;\n  shareCount?: number;\n  saveCount?: number;\n  commentCount?: number;\n  likeCount?: number;\n  views?: number;\n  engagement?: number;\n}\n\nexport interface PostMetadata {\n  type: PostType;\n  content: string;\n  title?: string;\n  description?: string;\n  media?: {\n    url: string;\n    type: string;\n    width?: number;\n    height?: number;\n  }[];\n  poll?: {\n    question: string;\n    options: string[];\n    endDate?: string;\n  };\n  event?: {\n    title: string;\n    location?: string;\n    startDate: string;\n    endDate?: string;\n  };\n  link?: {\n    url: string;\n    title?: string;\n    description?: string;\n    image?: string;\n  };\n  tags?: string[];\n  mentions?: string[];\n  createdAt: string;\n  [key: string]: any;\n}\n\nexport interface Post {\n  id: string;\n  content: string;\n  author: `0x${string}`;\n  tribeId: number;\n  createdAt: number;\n  type: PostType;\n  likes?: number;\n  comments?: number;\n  shares?: number;\n  stats?: PostStats;\n  metadata?: PostMetadata;\n}\n\nexport interface PostWithMetadata extends Post {\n  metadata: PostMetadata;\n}\n\nexport interface BatchPostData {\n  posts: Post[];\n  total: number;\n}\n\nexport interface CreatePostInput {\n  content: string;\n  tribeId: number;\n  type: PostType;\n  metadata?: {\n    title?: string;\n    description?: string;\n    image?: string;\n    link?: string;\n    eventDate?: string;\n    eventLocation?: string;\n    pollOptions?: string[];\n  };\n}\n\nexport interface CreateReplyInput {\n  parentPostId: number;\n  content: string;\n  type?: PostType;\n  isGated?: boolean;\n}\n\nexport interface CreateEncryptedPostInput {\n  tribeId: number;\n  content: string;\n  encryptionKeyHash: string;\n  accessSigner: string;\n}\n\nexport interface UpdatePostInput {\n  postId: number;\n  content: string;\n  title?: string;\n  type?: PostType;\n}","import { Post, PostType, PostMetadata } from '../types/post';\nimport { blockchain } from './blockchainUtils';\nimport { keccak256, encodeAbiParameters } from 'viem';\nimport { EventDetails } from '../types/event';\n\n// Interface for post creation parameters\nexport interface PostCreateParams {\n  title?: string;\n  content: string;\n  type: string;\n  tags?: string[];\n  eventDetails?: EventDetails;\n  pollDetails?: any;\n  projectDetails?: any;\n  resourceDetails?: any;\n  mediaContent?: any;\n  isPremium?: boolean;\n}\n\n// This function creates a post on the blockchain\nexport const createBlockchainPost = async (\n  params: PostCreateParams & { tribeId: string }\n): Promise<{ hash: `0x${string}`; postId: string }> => {\n  try {\n    // First, prepare the post metadata for blockchain storage\n    const metadata = JSON.stringify(preparePostMetadata(params));\n    \n    // Use blockchain utility to send the transaction\n    const tribeId = parseInt(params.tribeId);\n    \n    // Call the postMinter contract's createPost function\n    const hash = await blockchain.createTribePost({\n      tribeId,\n      metadata, // Now we pass metadata as a JSON string\n      postType: params.type, \n      content: params.content,\n      // No longer need options since we're using the postMinter contract\n    });\n    \n    // Generate a temporary post ID until we get the real one from event\n    const tempPostId = `post-${Date.now()}`;\n    \n    return { hash, postId: tempPostId };\n  } catch (error) {\n    console.error('Error creating blockchain post:', error);\n    throw error;\n  }\n};\n\n// Prepare metadata based on post type\nconst preparePostMetadata = (params: PostCreateParams): Record<string, any> => {\n  const baseMetadata = {\n    title: params.title || '',\n    content: params.content,\n    type: params.type,\n    tags: params.tags || [],\n    createdAt: new Date().toISOString(),\n  };\n  \n  switch (params.type) {\n    case 'EVENT':\n      return {\n        ...baseMetadata,\n        eventDetails: params.eventDetails,\n        // For backward compatibility\n        event: {\n          title: params.title || '',\n          startDate: params.eventDetails?.startDate,\n          endDate: params.eventDetails?.endDate,\n          location: params.eventDetails?.location\n        }\n      };\n      \n    case 'POLL':\n      return {\n        ...baseMetadata,\n        pollDetails: params.pollDetails\n      };\n      \n    case 'PROJECT':\n      return {\n        ...baseMetadata,\n        projectDetails: params.projectDetails\n      };\n      \n    case 'RESOURCE':\n      return {\n        ...baseMetadata,\n        resourceDetails: params.resourceDetails\n      };\n      \n    case 'RICH_MEDIA':\n      return {\n        ...baseMetadata,\n        mediaContent: params.mediaContent\n      };\n      \n    case 'COMMUNITY_UPDATE':\n      return {\n        ...baseMetadata,\n        isPremium: params.isPremium || false\n      };\n      \n    default:\n      return baseMetadata;\n  }\n};\n\n// Get specific options needed based on post type\nconst getPostTypeSpecificOptions = (params: PostCreateParams): Record<string, any> => {\n  switch (params.type) {\n    case 'POLL':\n      return {\n        options: params.pollDetails?.options?.map((opt: { text: string }) => opt.text) || [],\n        endDate: params.pollDetails?.endDate ? new Date(params.pollDetails.endDate).getTime() / 1000 : 0,\n        allowMultiple: params.pollDetails?.allowMultipleChoices || false\n      };\n      \n    case 'EVENT':\n      return {\n        startTime: params.eventDetails?.startDate ? new Date(params.eventDetails.startDate).getTime() / 1000 : 0,\n        endTime: params.eventDetails?.endDate ? new Date(params.eventDetails.endDate).getTime() / 1000 : 0,\n        maxAttendees: params.eventDetails?.maxAttendees || 0,\n        location: encodeEventLocation(params.eventDetails?.location)\n      };\n      \n    case 'PROJECT':\n      return {\n        status: encodeProjectStatus(params.projectDetails?.status),\n        budget: params.projectDetails?.budget || '0'\n      };\n      \n    default:\n      return {};\n  }\n};\n\n// Helper function to encode event location for blockchain\nconst encodeEventLocation = (location: any): string => {\n  if (!location) return '';\n  \n  const locationData = {\n    type: location.type || 'PHYSICAL',\n    physical: location.physical || '',\n    virtual: location.virtual || ''\n  };\n  \n  return JSON.stringify(locationData);\n};\n\n// Helper function to encode project status for blockchain\nconst encodeProjectStatus = (status?: 'PLANNING' | 'IN_PROGRESS' | 'COMPLETED'): number => {\n  switch (status) {\n    case 'PLANNING': return 0;\n    case 'IN_PROGRESS': return 1;\n    case 'COMPLETED': return 2;\n    default: return 0;\n  }\n};\n\n// Function to decode post data from blockchain\nexport const decodeBlockchainPost = (\n  blockchainData: any,\n  tribeId: string\n): Post => {\n  try {\n    // Parse metadata from blockchain\n    const parsedMetadata = typeof blockchainData.metadata === 'string' \n      ? JSON.parse(blockchainData.metadata) \n      : blockchainData.metadata;\n    \n    // Ensure metadata has all required properties\n    const metadata: PostMetadata = {\n      type: blockchainData.postType,\n      content: blockchainData.content,\n      createdAt: new Date(blockchainData.timestamp * 1000).toISOString(),\n      ...parsedMetadata\n    };\n    \n    return {\n      id: blockchainData.id || `post-${Date.now()}`,\n      author: blockchainData.author,\n      content: blockchainData.content,\n      type: blockchainData.postType,\n      createdAt: blockchainData.timestamp * 1000,\n      likes: blockchainData.likes || 0,\n      comments: blockchainData.comments || 0,\n      shares: blockchainData.shares || 0,\n      tribeId: parseInt(tribeId),\n      metadata: metadata,\n      stats: {\n        views: blockchainData.views || 0,\n        engagement: blockchainData.engagement || 0\n      }\n    };\n  } catch (error) {\n    console.error('Error decoding blockchain post:', error);\n    throw error;\n  }\n};\n\n// Get post by ID from blockchain\nexport const getBlockchainPost = async (\n  tribeId: number,\n  postId: string\n): Promise<Post | null> => {\n  try {\n    const blockchainData = await blockchain.getTribePost(tribeId, postId);\n    if (!blockchainData) return null;\n    \n    return decodeBlockchainPost(blockchainData, tribeId.toString());\n  } catch (error) {\n    console.error('Error getting blockchain post:', error);\n    return null;\n  }\n};\n\n// Vote on a poll post\nexport const voteOnPoll = async (\n  tribeId: number,\n  postId: string,\n  optionIndex: number\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.voteOnPoll(tribeId, postId, optionIndex);\n  } catch (error) {\n    console.error('Error voting on poll:', error);\n    throw error;\n  }\n};\n\n// RSVP to an event\nexport const rsvpToEvent = async (\n  tribeId: number,\n  postId: string,\n  attending: boolean\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.rsvpToEvent(tribeId, postId, attending);\n  } catch (error) {\n    console.error('Error RSVPing to event:', error);\n    throw error;\n  }\n};\n\n// Like a post\nexport const likePost = async (\n  tribeId: number,\n  postId: string\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.likePost(tribeId, postId);\n  } catch (error) {\n    console.error('Error liking post:', error);\n    throw error;\n  }\n};\n\n// Add comment to a post\nexport const commentOnPost = async (\n  tribeId: number,\n  postId: string,\n  comment: string\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.commentOnPost(tribeId, postId, comment);\n  } catch (error) {\n    console.error('Error commenting on post:', error);\n    throw error;\n  }\n};\n\n// Update post metadata (for editing posts)\nexport const updatePostMetadata = async (\n  tribeId: number,\n  postId: string,\n  metadata: Record<string, any>\n): Promise<`0x${string}`> => {\n  try {\n    return await blockchain.updatePostMetadata(tribeId, postId, JSON.stringify(metadata));\n  } catch (error) {\n    console.error('Error updating post metadata:', error);\n    throw error;\n  }\n}; ","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { Post, PostType, PostMetadata, PostStats } from '../../types/post';\nimport { RootState } from '../store';\nimport { \n  createBlockchainPost, \n  getBlockchainPost, \n  PostCreateParams \n} from '../../utils/postHelpers';\n\n// Define the BlockchainData interface\ninterface BlockchainData {\n  txHash: `0x${string}`;\n  confirmed: boolean;\n  blockNumber?: number;\n  timestamp?: number;\n}\n\n// Extend the PostCreateParams to include tribeId which is needed for our app\ninterface ExtendedPostCreateParams extends PostCreateParams {\n  tribeId: string;\n  description?: string;\n}\n\nexport interface PostsState {\n  loading: boolean;\n  creatingPost: boolean;\n  error: string | null;\n  posts: Post[];\n  draft: ExtendedPostCreateParams;\n  pendingPosts: string[]; // List of pending transaction hashes\n}\n\nconst initialState: PostsState = {\n  loading: false,\n  creatingPost: false,\n  error: null,\n  posts: [],\n  draft: {\n    type: 'TEXT', // Use string instead of enum\n    content: '',\n    tribeId: '',\n    title: '',\n    description: '',\n    tags: [],\n    mediaContent: [],\n  },\n  pendingPosts: [],\n};\n\n// Validate post data before submission\nconst validatePostData = (draft: ExtendedPostCreateParams): { valid: boolean; error?: string } => {\n  // Common validation for all post types\n  if (!draft.content?.trim()) {\n    return { valid: false, error: 'Content is required' };\n  }\n\n  // Type-specific validation\n  switch (draft.type) {\n    case 'EVENT':\n      if (draft.eventDetails && !draft.eventDetails.startDate) {\n        return { valid: false, error: 'Event start date is required' };\n      }\n      break;\n    case 'POLL':\n      if (!draft.pollDetails?.options?.length) {\n        return { valid: false, error: 'Poll options are required' };\n      }\n      break;\n  }\n\n  return { valid: true };\n};\n\n// Helper to create a post metadata object that satisfies PostMetadata requirements\nconst createMetadata = (postData: ExtendedPostCreateParams): PostMetadata => {\n  // Convert string type to enum\n  const postType = \n    typeof postData.type === 'string' \n      ? postData.type === 'TEXT' ? PostType.TEXT\n      : postData.type === 'IMAGE' ? PostType.IMAGE\n      : postData.type === 'VIDEO' ? PostType.VIDEO\n      : postData.type === 'LINK' ? PostType.LINK\n      : postData.type === 'EVENT' ? PostType.EVENT\n      : postData.type === 'POLL' ? PostType.POLL\n      : PostType.TEXT\n      : PostType.TEXT;\n\n  return {\n    type: postType,\n    content: postData.content,\n    title: postData.title || '',\n    description: postData.description || '',\n    tags: postData.tags || [],\n    media: postData.mediaContent?.map((m: any) => ({\n      url: m.url,\n      type: m.type,\n      width: m.width,\n      height: m.height,\n    })) || [],\n    // Handle event data\n    event: postData.type === 'EVENT' && postData.eventDetails ? {\n      title: postData.eventDetails.title || postData.title || '',\n      startDate: postData.eventDetails.startDate,\n      endDate: postData.eventDetails.endDate,\n      location: postData.eventDetails.location,\n    } : undefined,\n    // Handle poll data\n    poll: postData.type === 'POLL' && postData.pollDetails ? {\n      question: postData.title || 'Poll',\n      options: Array.isArray(postData.pollDetails.options) \n        ? typeof postData.pollDetails.options[0] === 'string'\n          ? postData.pollDetails.options \n          : postData.pollDetails.options.map((o: any) => o.text || o.toString())\n        : [],\n      endDate: postData.pollDetails.endDate,\n    } : undefined,\n    // Add required createdAt field\n    createdAt: new Date().toISOString(),\n  };\n};\n\nexport const createPost = createAsyncThunk(\n  'posts/create',\n  async (postData: ExtendedPostCreateParams, { rejectWithValue }) => {\n    try {\n      // Validate post data\n      const validation = validatePostData(postData);\n      if (!validation.valid) {\n        return rejectWithValue(validation.error || 'Invalid post data');\n      }\n\n      let txHash: `0x${string}` = '0x0000000000000000000000000000000000000000000000000000000000000000';\n      \n      try {\n        // Special handling for event posts\n        if (postData.type === 'EVENT' && postData.eventDetails) {\n          console.log('Creating event post with details:', postData.eventDetails);\n          \n          const blockchainResult = await createBlockchainPost(postData);\n          txHash = blockchainResult.hash;\n          console.log('Created event post:', blockchainResult);\n        } else {\n          // For other post types\n          const blockchainResult = await createBlockchainPost(postData);\n          txHash = blockchainResult.hash;\n        }\n      } catch (err) {\n        console.error('Error creating blockchain post:', err);\n        return rejectWithValue('Failed to create post on blockchain');\n      }\n\n      // Create a complete Post object\n      const newPost: Post = {\n        id: `temp-${Date.now()}`,\n        content: postData.content,\n        author: '0x0000000000000000000000000000000000000000', // This should be provided by a wallet context\n        tribeId: parseInt(postData.tribeId || '0'),\n        type: typeof postData.type === 'string' \n          ? postData.type === 'TEXT' ? PostType.TEXT\n          : postData.type === 'IMAGE' ? PostType.IMAGE\n          : postData.type === 'VIDEO' ? PostType.VIDEO\n          : postData.type === 'LINK' ? PostType.LINK\n          : postData.type === 'EVENT' ? PostType.EVENT\n          : postData.type === 'POLL' ? PostType.POLL\n          : PostType.TEXT\n          : PostType.TEXT,\n        createdAt: Date.now(),\n        metadata: createMetadata(postData),\n        stats: {\n          viewCount: 0,\n          shareCount: 0,\n          saveCount: 0,\n          commentCount: 0,\n          likeCount: 0,\n        }\n      };\n\n      return newPost;\n    } catch (error) {\n      console.error('Error in createPost thunk:', error);\n      return rejectWithValue('An unexpected error occurred while creating the post');\n    }\n  }\n);\n\nexport const fetchPostsByTribe = createAsyncThunk(\n  'posts/fetchByTribe',\n  async (tribeId: string, { rejectWithValue }) => {\n    try {\n      // Mock API call to fetch posts\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // In a real app, this would call an API to fetch posts\n      // For now, we'll generate some dummy data\n      const dummyPosts: Post[] = [];\n      for (let i = 0; i < 5; i++) {\n        const postTypeString = ['TEXT', 'EVENT', 'POLL', 'IMAGE', 'VIDEO'][i % 5];\n        const postType = \n          postTypeString === 'TEXT' ? PostType.TEXT\n          : postTypeString === 'IMAGE' ? PostType.IMAGE\n          : postTypeString === 'VIDEO' ? PostType.VIDEO\n          : postTypeString === 'LINK' ? PostType.LINK\n          : postTypeString === 'EVENT' ? PostType.EVENT\n          : postTypeString === 'POLL' ? PostType.POLL\n          : PostType.TEXT;\n        \n        const post: Post = {\n          id: `post-${i}-${Date.now()}`,\n          content: `This is post #${i} content with some text content.`,\n          author: '0x0000000000000000000000000000000000000000',\n          createdAt: Date.now() - (i * 86400000), // days ago\n          type: postType,\n          tribeId: parseInt(tribeId),\n          metadata: {\n            type: postType,\n            content: `This is post #${i} content with some text content.`,\n            title: `Post #${i}`,\n            description: `This is a ${postTypeString} post #${i}`,\n            tags: [],\n            createdAt: new Date(Date.now() - (i * 86400000)).toISOString(),\n            event: postTypeString === 'EVENT' ? {\n              title: `Event #${i}`,\n              startDate: new Date(Date.now() + 86400000).toISOString(),\n              endDate: new Date(Date.now() + 90000000).toISOString(),\n              location: 'Virtual',\n            } : undefined,\n            poll: postTypeString === 'POLL' ? {\n              question: `Poll Question #${i}`,\n              options: ['Option 1', 'Option 2'],\n              endDate: new Date(Date.now() + 86400000).toISOString(),\n            } : undefined,\n          },\n          stats: {\n            viewCount: Math.floor(Math.random() * 500),\n            shareCount: Math.floor(Math.random() * 10),\n            saveCount: Math.floor(Math.random() * 5),\n            commentCount: Math.floor(Math.random() * 20),\n            likeCount: Math.floor(Math.random() * 50),\n          }\n        };\n        \n        dummyPosts.push(post);\n      }\n      \n      return dummyPosts;\n    } catch (error) {\n      return rejectWithValue('Failed to fetch posts');\n    }\n  }\n);\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    setCreatingPost: (state, action: PayloadAction<boolean>) => {\n      state.creatingPost = action.payload;\n    },\n    // Re-add the setPostType action for backward compatibility\n    setPostType: (state, action: PayloadAction<PostType | string>) => {\n      state.draft.type = typeof action.payload === 'string' ? action.payload : PostType[action.payload];\n    },\n    updateDraft: (state, action: PayloadAction<Partial<ExtendedPostCreateParams>>) => {\n      state.draft = {\n        ...state.draft,\n        ...action.payload\n      };\n    },\n    resetDraft: (state) => {\n      state.draft = initialState.draft;\n    },\n    updatePostStatus: (state, action: PayloadAction<{ txHash: string; confirmed: boolean; postId?: string }>) => {\n      const { txHash, confirmed, postId } = action.payload;\n      // Find post by blockchain transaction hash\n      const post = state.posts.find(p => {\n        if (p.metadata) {\n          const blockchainData = p.metadata.blockchainData as BlockchainData | undefined;\n          return blockchainData?.txHash === txHash;\n        }\n        return false;\n      });\n      \n      if (post && post.metadata) {\n        // Update blockchain data if it exists\n        const blockchainData = post.metadata.blockchainData as BlockchainData | undefined;\n        if (blockchainData) {\n          blockchainData.confirmed = confirmed;\n        } else {\n          // Create blockchain data if it doesn't exist\n          post.metadata.blockchainData = {\n            txHash: txHash as `0x${string}`,\n            confirmed\n          };\n        }\n        \n        // Update post ID if provided\n        if (postId) {\n          post.id = postId;\n        }\n      }\n      \n      // Remove from pending posts if confirmed\n      if (confirmed) {\n        state.pendingPosts = state.pendingPosts.filter(hash => hash !== txHash);\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createPost.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createPost.fulfilled, (state, action) => {\n        state.loading = false;\n        state.posts.unshift(action.payload);\n        state.creatingPost = false;\n        state.draft = initialState.draft;\n      })\n      .addCase(createPost.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      })\n      .addCase(fetchPostsByTribe.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchPostsByTribe.fulfilled, (state, action) => {\n        state.loading = false;\n        state.posts = action.payload;\n      })\n      .addCase(fetchPostsByTribe.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      });\n  }\n});\n\nexport const { setCreatingPost, setPostType, updateDraft, resetDraft, updatePostStatus } = postsSlice.actions;\n\nexport const selectPostsState = (state: RootState) => state.posts;\nexport const selectPostDraft = (state: RootState) => state.posts.draft;\nexport const selectCreatingPost = (state: RootState) => state.posts.creatingPost;\nexport const selectPostsError = (state: RootState) => state.posts.error;\nexport const selectPendingPosts = (state: RootState) => state.posts.pendingPosts;\n\nexport default postsSlice.reducer; ","import { useState, useCallback, useEffect } from 'react'\nimport { WalletClient, createWalletClient, custom } from 'viem'\nimport { useAccount, useConnect, useDisconnect } from 'wagmi'\nimport { injected } from 'wagmi/connectors'\nimport { useNetwork } from './useNetwork'\n\nexport const useWallet = () => {\n  const { address, isConnected } = useAccount()\n  const { chainId } = useNetwork()\n  const { connectAsync } = useConnect()\n  const { disconnectAsync } = useDisconnect()\n  const [walletClient, setWalletClient] = useState<WalletClient | null>(null)\n\n  // Initialize wallet client when connected\n  useEffect(() => {\n    const initWalletClient = async () => {\n      if (isConnected && window.ethereum) {\n        try {\n          console.log('[useWallet] Initializing wallet client with ethereum provider');\n          \n          // Create a wallet client using viem\n          const client = createWalletClient({\n            transport: custom(window.ethereum)\n          });\n          \n          console.log('[useWallet] Wallet client created:', { \n            hasClient: !!client,\n            hasAccount: !!client.account,\n            address: address\n          });\n          \n          setWalletClient(client);\n        } catch (error) {\n          console.error('[useWallet] Failed to initialize wallet client:', error);\n        }\n      } else if (!isConnected) {\n        setWalletClient(null);\n      }\n    };\n    \n    initWalletClient();\n  }, [isConnected, address]);\n\n  const connectWallet = useCallback(async () => {\n    try {\n      if (!window.ethereum) {\n        throw new Error('No ethereum provider found')\n      }\n      await connectAsync({\n        connector: injected()\n      })\n    } catch (error) {\n      console.error('Failed to connect wallet:', error)\n    }\n  }, [connectAsync])\n\n  const disconnectWallet = useCallback(async () => {\n    try {\n      await disconnectAsync()\n      setWalletClient(null)\n    } catch (error) {\n      console.error('Failed to disconnect wallet:', error)\n    }\n  }, [disconnectAsync])\n\n  return {\n    address,\n    isConnected,\n    chainId,\n    walletClient,\n    connectWallet,\n    disconnectWallet,\n  }\n} ","/**\n * Utilities for handling metadata in various formats\n */\nimport { MetadataCache, MetadataCacheEntry } from '../types/tribe';\n\n/**\n * Parse stringified BigInt values in an object\n * @param value String or numeric value\n * @returns Parsed BigInt value\n */\nexport const parseStringifiedBigInt = (value: string | number): bigint => {\n  if (typeof value === 'number') {\n    return BigInt(value);\n  }\n  // Handle stringified BigInt format (e.g. \"123n\")\n  if (typeof value === 'string' && value.endsWith('n')) {\n    return BigInt(value.slice(0, -1));\n  }\n  return BigInt(value);\n};\n\n/**\n * Replace BigInt values with strings in an object for JSON serialization\n * @param key Object key\n * @param value Object value\n * @returns Value with BigInt converted to string\n */\nexport const replaceBigIntWithString = (key: string, value: any): any => {\n  if (typeof value === 'bigint') {\n    return value.toString();\n  }\n  return value;\n};\n\n/**\n * Parse JSON metadata safely\n * @param metadata JSON string metadata\n * @param defaultValue Default value if parsing fails\n * @returns Parsed metadata object\n */\nexport const parseMetadata = <T>(metadata: string, defaultValue: T): T => {\n  try {\n    if (!metadata || metadata === '{}') {\n      return defaultValue;\n    }\n    return JSON.parse(metadata) as T;\n  } catch (error) {\n    console.error('Error parsing metadata:', error);\n    return defaultValue;\n  }\n};\n\n/**\n * Stringify metadata object safely\n * @param metadata Metadata object\n * @returns JSON string\n */\nexport const stringifyMetadata = (metadata: any): string => {\n  try {\n    return JSON.stringify(metadata, replaceBigIntWithString);\n  } catch (error) {\n    console.error('Error stringifying metadata:', error);\n    return '{}';\n  }\n};\n\n/**\n * In-memory metadata cache\n */\nconst metadataCache: MetadataCache = {};\n\n/**\n * Cache timeout in milliseconds (5 minutes)\n */\nconst CACHE_TIMEOUT_MS = 5 * 60 * 1000;\n\n/**\n * Get metadata from cache\n * @param key Cache key\n * @returns Cached metadata or undefined if not found/expired\n */\nexport const getMetadataFromCache = (key: string): MetadataCacheEntry | undefined => {\n  const cachedData = metadataCache[key];\n  if (!cachedData) {\n    return undefined;\n  }\n\n  // Check if cache is expired\n  if (Date.now() - cachedData.timestamp > CACHE_TIMEOUT_MS) {\n    delete metadataCache[key];\n    return undefined;\n  }\n\n  return cachedData;\n};\n\n/**\n * Store metadata in cache\n * @param key Cache key\n * @param data Data to cache\n * @param metadata Original metadata string\n */\nexport const storeMetadataInCache = (\n  key: string,\n  data: any,\n  metadata?: string\n): void => {\n  metadataCache[key] = {\n    data,\n    metadata,\n    timestamp: Date.now()\n  };\n};\n\n/**\n * Clear metadata cache\n * @param key Optional specific key to clear, clears all if not provided\n */\nexport const clearMetadataCache = (key?: string): void => {\n  if (key) {\n    delete metadataCache[key];\n  } else {\n    Object.keys(metadataCache).forEach(k => delete metadataCache[k]);\n  }\n}; ","export enum ErrorType {\n  CONNECTION_ERROR = 'CONNECTION_ERROR',\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  CONTRACT_ERROR = 'CONTRACT_ERROR',\n  BLOCKCHAIN_ERROR = 'BLOCKCHAIN_ERROR',\n  ALREADY_EXISTS = 'ALREADY_EXISTS',\n  NOT_FOUND = 'NOT_FOUND',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  UNKNOWN = 'UNKNOWN'\n}\n\nexport interface ErrorDetails {\n  type: ErrorType;\n  message: string;\n  details?: any;\n} ","/**\n * Type mapping utilities\n * \n * These utilities help convert between different versions of the same types \n * to maintain compatibility during the transition to the new architecture.\n */\n\nimport { \n  Post, \n  PostType, \n  PostStats, \n  PostWithMetadata,\n  PostMetadata \n} from '../types/post';\nimport { Tribe, TribeData, NFTRequirement } from '../types/tribe';\nimport { User, ProfileData } from '../types/user';\nimport { PostInteractions } from '../types/interaction';\n\n/**\n * Convert blockchain post data to UI-ready post\n * @param postData Raw post data from blockchain\n * @returns Formatted post for UI display\n */\nexport function mapPostDataToUI(postData: any): Post {\n  // Format the post metadata into content\n  const content = postData.metadata?.content || '';\n  \n  // Calculate or provide default stats\n  const interactions = postData.interactions || {\n    likes: 0,\n    comments: 0,\n    shares: 0,\n    views: 0,\n    engagement: 0\n  };\n  \n  // Map stats from interactions\n  const stats: PostStats = {\n    likeCount: interactions.likes,\n    commentCount: interactions.comments,\n    shareCount: interactions.shares,\n    viewCount: interactions.views,\n    saveCount: 0\n  };\n  \n  // Create the metadata object if needed\n  const metadata: PostMetadata | undefined = postData.metadata ? {\n    type: postData.metadata.type || PostType.TEXT,\n    content: content,\n    title: postData.metadata.title,\n    createdAt: typeof postData.createdAt === 'string' ? \n      postData.createdAt : \n      new Date(postData.createdAt || Date.now()).toISOString()\n  } : undefined;\n  \n  // Ensure author has 0x prefix\n  const authorAddress = postData.creator || postData.author || '0x0000000000000000000000000000000000000000';\n  const formattedAuthor = authorAddress.startsWith('0x') ? \n    authorAddress as `0x${string}` : \n    `0x${authorAddress}` as `0x${string}`;\n  \n  // Return the formatted post that matches the Post interface\n  const mappedPost: Post = {\n    id: postData.id.toString(),\n    content,\n    author: formattedAuthor,\n    tribeId: Number(postData.tribeId),\n    createdAt: typeof postData.createdAt === 'string' \n      ? Math.floor(new Date(postData.createdAt).getTime() / 1000) \n      : (postData.createdAt || Math.floor(Date.now() / 1000)),\n    type: postData.metadata?.type || PostType.TEXT,\n    stats,\n    metadata\n  };\n  \n  return mappedPost;\n}\n\n// /**\n//  * Convert UI post to blockchain format\n//  * @param post UI post\n//  * @returns Post in blockchain format\n//  */\n// export function mapUIPostToBlockchain(post: Post): PostWithMetadata {\n//   // Create post metadata\n//   const metadata: PostMetadata = {\n//     type: post.type,\n//     content: post.content,\n//     title: post.title,\n//     createdAt: post.createdAt,\n//     media: post.mediaUrls?.map(url => ({\n//       url,\n//       type: url.toLowerCase().endsWith('.mp4') ? 'video' : 'image'\n//     }))\n//   };\n  \n//   // Create interactions\n//   const interactions: PostInteractions = {\n//     likes: post.stats?.likeCount || 0,\n//     comments: post.stats?.commentCount || 0,\n//     shares: post.stats?.shareCount || 0,\n//     views: post.stats?.viewCount || 0,\n//     engagement: 0\n//   };\n  \n//   // Return the blockchain format\n//   return {\n//     id: parseInt(post.id),\n//     creator: typeof post.author === 'string' ? post.author : post.author.id,\n//     tribeId: parseInt(post.tribeId),\n//     parentId: post.parentId ? parseInt(post.parentId) : null,\n//     metadata,\n//     isGated: post.isGated || false,\n//     collectibleContract: '0x0000000000000000000000000000000000000000',\n//     collectibleId: 0,\n//     createdAt: post.createdAt,\n//     interactions\n//   };\n// }\n\n/**\n * Convert blockchain tribe data to UI format\n * @param tribeData Tribe data from blockchain\n * @param chainId Chain ID\n * @returns UI-formatted tribe\n */\nexport function mapTribeDataToUI(tribeData: TribeData, chainId: number): Tribe {\n  console.log('Original tribeData before mapping:', JSON.stringify({\n    ...tribeData,\n    entryFee: tribeData.entryFee?.toString() || '0'\n  }));\n  \n  // Parse metadata if it's a string\n  let metadataObj: any = {};\n  if (typeof tribeData.metadata === 'string' && tribeData.metadata) {\n    try {\n      metadataObj = JSON.parse(tribeData.metadata);\n      console.log('Successfully parsed metadata string for tribe', tribeData.id, ':', metadataObj);\n    } catch (error) {\n      console.error(`Failed to parse tribe ${tribeData.id} metadata:`, error);\n    }\n  } else if (typeof tribeData.metadata === 'object' && tribeData.metadata !== null) {\n    metadataObj = tribeData.metadata;\n    console.log('Using metadata object directly for tribe', tribeData.id, ':', metadataObj);\n  }\n  \n  // Get basic properties with improved name handling\n  const contractName = tribeData.name || '';\n  const metadataName = metadataObj?.name || metadataObj?.displayName || '';\n  const tribeId = tribeData.id.toString();\n  \n  // Log all possible name sources for debugging\n  console.log(`Tribe ${tribeId} name sources:`, {\n    contractName,\n    metadataName,\n    rawMetadataString: typeof tribeData.metadata === 'string' ? \n      (tribeData.metadata.length > 100 ? `${tribeData.metadata.substring(0, 100)}...` : tribeData.metadata) : \n      'Not a string'\n  });\n  \n  // Determine the best name to use with detailed logging\n  let name: string;\n  \n  // Check if contract name is meaningful (not empty and not a generic \"Tribe X\" format)\n  const isGenericContractName = !contractName || \n    contractName === `Tribe ${tribeId}` || \n    contractName.trim() === '';\n  \n  // Check if metadata name is meaningful\n  const hasMetadataName = metadataName && metadataName.trim() !== '';\n  \n  if (!isGenericContractName) {\n    // Use contract name if it's meaningful\n    name = contractName.trim();\n    console.log(`Using contract name for tribe ${tribeId}: \"${name}\"`);\n  } else if (hasMetadataName) {\n    // Use metadata name if contract name is generic but metadata name exists\n    name = metadataName.trim();\n    console.log(`Using metadata name for tribe ${tribeId}: \"${name}\"`);\n  } else {\n    // Use a better default format if neither is available\n    name = `Tribe #${tribeId}`;\n    console.log(`Using default name for tribe ${tribeId}: \"${name}\"`);\n  }\n  \n  // Determine creation time - try to use value from metadata if available\n  let createdAt: number;\n  if (metadataObj?.createdAt) {\n    try {\n      // Try to parse the createdAt from metadata (could be string date or timestamp)\n      if (typeof metadataObj.createdAt === 'string') {\n        createdAt = Math.floor(new Date(metadataObj.createdAt).getTime() / 1000);\n      } else {\n        createdAt = Number(metadataObj.createdAt);\n      }\n    } catch (e) {\n      createdAt = tribeData.createdAt || Math.floor(Date.now() / 1000);\n    }\n  } else {\n    createdAt = tribeData.createdAt || Math.floor(Date.now() / 1000);\n  }\n  \n  // Get membership status\n  const isMember = tribeData.userMembershipStatus?.isMember || false;\n  const isAdmin = tribeData.userMembershipStatus?.isAdmin || false;\n  \n  // Process NFT requirements\n  const nftRequirements: NFTRequirement[] = tribeData.nftRequirements || [];\n  \n  // Convert entry fee to bigint\n  let entryFee: bigint;\n  try {\n    if (typeof tribeData.entryFee === 'bigint') {\n      entryFee = tribeData.entryFee;\n    } else if (typeof tribeData.entryFee === 'string') {\n      entryFee = BigInt(tribeData.entryFee);\n    } else if (typeof tribeData.entryFee === 'number') {\n      entryFee = BigInt(tribeData.entryFee);\n    } else {\n      entryFee = BigInt(0);\n    }\n  } catch (e) {\n    console.error('Error converting entryFee to bigint:', e);\n    entryFee = BigInt(0);\n  }\n\n  // Create the UI tribe object\n  return {\n    id: tribeId,\n    name,\n    metadata: typeof tribeData.metadata === 'string' ? tribeData.metadata : JSON.stringify(metadataObj),\n    owner: tribeData.owner,\n    admins: tribeData.admins || [],\n    memberCount: tribeData.memberCount,\n    createdAt,\n    joinType: tribeData.joinType,\n    entryFee,\n    nftRequirements\n  };\n}\n\n// /**\n//  * Convert profile data to user format\n//  * @param profile Profile data\n//  * @returns User data\n//  */\n// export function mapProfileToUser(profile: ProfileData): User {\n//   return {\n//     id: profile.id.toString(),\n//     username: profile.username,\n//     address: profile.walletAddress,\n//     avatar: profile.avatar || '',\n//     bio: profile.metadata?.bio || '',\n//     website: profile.metadata?.website,\n//     twitter: profile.metadata?.twitter,\n//     createdAt: profile.createdAt,\n//     isVerified: false,\n//     postCount: 0,\n//     followerCount: 0,\n//     followingCount: 0\n//   };\n// } ","/**\n * Implementation of the Tribe Service\n */\nimport { ITribeService } from './ITribeService';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { \n  Tribe, \n  TribeConfig, \n  TribeConfigResponse, \n  TribeData, \n  NFTRequirement,\n  TribeMetadata\n} from '../../types/tribe';\nimport { parseMetadata, getMetadataFromCache, storeMetadataInCache } from '../../utils/metadataUtils';\nimport { \n  getCurrentChainId, \n  extractMetadataFromTransaction, \n  getChainConfig,\n  waitForTransaction\n} from '../../utils/blockchainUtils';\nimport { ErrorType } from '../../types/error';\nimport { createWalletClient, custom, WalletClient } from 'viem';\nimport { getEthereumProvider } from '../../utils/ethereum';\nimport { mapTribeDataToUI } from '../../utils/typeMappers';\n\n/**\n * Service for interacting with tribes on the blockchain\n */\nexport class TribeService implements ITribeService {\n  private chainId: number;\n  private walletClient: WalletClient | undefined;\n  private publicClient: any;\n  private userAddress: `0x${string}` | undefined;\n\n  private static CACHE_DURATION = 5 * 60 * 1000; // 5 minutes cache duration\n  private static INVALID_TRIBE_IDS = new Set<number>(); // Track invalid tribe IDs\n\n  /**\n   * Create a new TribeService\n   * @param chainId Chain ID to use\n   */\n  constructor(chainId: number) {\n    this.chainId = chainId;\n    this.initializeClients();\n  }\n\n  /**\n   * Initialize blockchain clients\n   */\n  private async initializeClients(): Promise<void> {\n    try {\n      this.publicClient = getPublicClient(this.chainId);\n      \n      // Only initialize wallet client if we have a provider\n      const provider = await getEthereumProvider();\n      if (provider) {\n        const [account] = await provider.request({ method: 'eth_requestAccounts' });\n        if (account) {\n          this.userAddress = account as `0x${string}`;\n          this.walletClient = createWalletClient({\n            account,\n            chain: getChainConfig(this.chainId),\n            transport: custom(provider)\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to initialize clients:', error);\n    }\n  }\n\n  /**\n   * Handle errors consistently\n   * @param type Error type\n   * @param message Error message\n   * @param originalError Original error\n   * @returns Error object\n   */\n  private handleError(type: ErrorType, message: string, originalError?: any): Error {\n    console.error(`${type}: ${message}`, originalError);\n    const error = new Error(message);\n    (error as any).type = type;\n    (error as any).originalError = originalError;\n    return error;\n  }\n\n  /**\n   * Connect wallet to the service\n   * @param walletClient Wallet client\n   * @param address User address\n   */\n  public async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address as `0x${string}`;\n  }\n\n  /**\n   * Create a new tribe\n   * @param name Tribe name\n   * @param metadata Tribe metadata\n   * @param admins Admin addresses\n   * @param joinType Join type\n   * @param entryFee Entry fee\n   * @param nftRequirements NFT requirements\n   * @returns Created tribe ID\n   */\n  public async createTribe(\n    name: string,\n    metadata: string,\n    admins: string[] = [],\n    joinType: number = 0,\n    entryFee: bigint = 0n,\n    nftRequirements: NFTRequirement[] = []\n  ): Promise<number> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      // Ensure creator is in admins list\n      if (!admins.includes(this.userAddress as string)) {\n        admins = [...admins, this.userAddress as string];\n      }\n      \n      // Validate and clean inputs\n      const trimmedName = name.trim();\n      if (!trimmedName) {\n        throw this.handleError(ErrorType.VALIDATION_ERROR, 'Tribe name cannot be empty');\n      }\n      \n      // Parse metadata to ensure name is included\n      let metadataObj;\n      try {\n        metadataObj = JSON.parse(metadata);\n        // Ensure name is in metadata\n        if (!metadataObj.name || metadataObj.name.trim() === '') {\n          metadataObj.name = trimmedName;\n          metadata = JSON.stringify(metadataObj);\n        }\n      } catch (error) {\n        console.error(\"Couldn't parse metadata JSON:\", error);\n        // If metadata parsing fails, ensure we continue with valid empty metadata\n        metadata = JSON.stringify({ name: trimmedName });\n      }\n      \n      // Log the final data being sent to the contract\n      console.log('Creating tribe with:', {\n        name: trimmedName,\n        metadataPreview: typeof metadataObj === 'object' ? \n          { ...metadataObj, fullString: metadata.length > 100 ? `${metadata.substring(0, 100)}...` : metadata } : \n          { error: 'Invalid metadata', metadata },\n        admins,\n        joinType,\n        entryFee: entryFee.toString()\n      });\n\n      // Create tribe transaction\n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'createTribe',\n        args: [trimmedName, metadata, admins, BigInt(joinType), entryFee, nftRequirements],\n        account: this.userAddress,\n        chain\n      });\n\n      // Wait for transaction confirmation\n      const receipt = await waitForTransaction(hash, this.chainId);\n      \n      // Extract tribe ID from event\n      const tribeCreatedEvent = receipt.logs.find(\n        (log: any) => log.address.toLowerCase() === tribeController.address.toLowerCase()\n      );\n\n      if (!tribeCreatedEvent || !tribeCreatedEvent.topics[1]) {\n        throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe ID from transaction');\n      }\n\n      const tribeId = parseInt(tribeCreatedEvent.topics[1], 16);\n      return tribeId;\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to create tribe', error);\n    }\n  }\n\n  /**\n   * Get tribe configuration\n   * @param tribeId Tribe ID\n   * @returns Tribe configuration\n   */\n  public async getTribeConfig(tribeId: number): Promise<TribeConfig> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const publicClient = getPublicClient(this.chainId);\n      \n      let rawConfig: unknown;\n      let config: TribeConfigResponse = { success: true };\n      \n      try {\n        rawConfig = await publicClient.readContract({\n          address: tribeController.address,\n          abi: tribeController.abi,\n          functionName: 'getTribeConfigView',\n          args: [BigInt(tribeId)]\n        });\n        \n        // Handle different response formats\n        if (Array.isArray(rawConfig)) {\n          console.log(`Tribe ${tribeId} raw config (array):`, rawConfig);\n          config = {\n            success: true,\n            name: rawConfig[0] || `Tribe ${tribeId}`,\n            metadata: rawConfig[1] || '{}',\n            admins: rawConfig[2] || [],\n            joinType: Number(rawConfig[3] || 0),\n            entryFee: (rawConfig[4] || 0).toString(),\n            nftRequirements: rawConfig[5] || []\n          };\n        } else if (typeof rawConfig === 'object' && rawConfig !== null) {\n          // Ensure all required fields exist with fallbacks\n          const rc = rawConfig as any;\n          console.log(`Tribe ${tribeId} raw config (object):`, rc);\n          config = {\n            success: true,\n            name: rc.name || `Tribe ${tribeId}`,\n            metadata: rc.metadata || '{}',\n            admins: Array.isArray(rc.admins) ? rc.admins : [],\n            joinType: typeof rc.joinType === 'number' ? rc.joinType : 0,\n            entryFee: rc.entryFee?.toString() || '0',\n            nftRequirements: Array.isArray(rc.nftRequirements) ? rc.nftRequirements : []\n          };\n        } else {\n          throw new Error('Invalid config format');\n        }\n      } catch (error) {\n        console.error('Error getting tribe config from contract:', error);\n        config = {\n          success: false,\n          error: 'Failed to get tribe config'\n        };\n      }\n\n      // If config was successfully fetched from contract\n      if (config.success && config.metadata) {\n        // Parse metadata\n        let parsedMetadata;\n        try {\n          // Log the raw metadata string for debugging\n          console.log(`Tribe ${tribeId} raw metadata string:`, config.metadata);\n          \n          parsedMetadata = parseMetadata<TribeMetadata>(config.metadata, {\n            description: '',\n            createdAt: new Date().toISOString()\n          });\n          console.log(`Tribe ${tribeId} parsed metadata:`, parsedMetadata);\n        } catch (error) {\n          console.error(`Error parsing metadata for tribe ${tribeId}:`, error);\n          parsedMetadata = {\n            description: '',\n            createdAt: new Date().toISOString()\n          };\n        }\n\n        // Determine the best name to use\n        let name = config.name || `Tribe ${tribeId}`;\n        \n        // If we have a name in metadata and it's not empty, consider using it\n        if (parsedMetadata.name && parsedMetadata.name.trim() !== '') {\n          // If the contract name is generic (like \"Tribe 1\"), use the metadata name\n          if (!name || name === `Tribe ${tribeId}` || name.trim() === '') {\n            name = parsedMetadata.name.trim();\n            console.log(`Using metadata name for tribe ${tribeId}: \"${name}\"`);\n          } else {\n            console.log(`Keeping contract name for tribe ${tribeId}: \"${name}\" (metadata name was: \"${parsedMetadata.name}\")`);\n          }\n        }\n\n        return {\n          name,\n          description: parsedMetadata.description || '',\n          coverImage: parsedMetadata.coverImage,\n          avatar: parsedMetadata.avatar,\n          isPrivate: parsedMetadata.isPrivate || false,\n          entryFee: config.entryFee || '0',\n          nftRequirements: config.nftRequirements || [],\n          metadata: parsedMetadata,\n          admins: config.admins || [],\n          joinType: config.joinType || 0\n        };\n      }\n\n      // Fallback to extracting metadata from transaction\n      try {\n        const metadataStr = await extractMetadataFromTransaction(\n          this.chainId,\n          tribeId,\n          publicClient\n        );\n        \n        const parsedMetadata = parseMetadata<TribeMetadata>(metadataStr, {\n          description: '',\n          createdAt: new Date().toISOString()\n        });\n\n        return {\n          name: config.name || `Tribe ${tribeId}`,\n          description: parsedMetadata.description || '',\n          coverImage: parsedMetadata.coverImage,\n          avatar: parsedMetadata.avatar,\n          isPrivate: parsedMetadata.isPrivate || false,\n          entryFee: config.entryFee || '0',\n          nftRequirements: config.nftRequirements || [],\n          metadata: parsedMetadata,\n          admins: config.admins || [],\n          joinType: config.joinType || 0\n        };\n      } catch (error) {\n        console.error('Error extracting metadata from transaction:', error);\n      }\n\n      // Final fallback\n      return {\n        name: config.name || `Tribe ${tribeId}`,\n        description: '',\n        isPrivate: false,\n        entryFee: '0',\n        nftRequirements: [],\n        metadata: {\n          description: '',\n          createdAt: new Date().toISOString()\n        },\n        admins: config.admins || [],\n        joinType: config.joinType || 0\n      };\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe config', error);\n    }\n  }\n\n  /**\n   * Get tribe data\n   * @param tribeId Tribe ID\n   * @returns Tribe data\n   */\n  public async getTribeData(tribeId: number): Promise<TribeData> {\n    try {\n      // Check if tribe ID is known to be invalid\n      if (TribeService.INVALID_TRIBE_IDS.has(tribeId)) {\n        throw new Error('Invalid tribe ID');\n      }\n\n      // Check cache first\n      const cacheKey = `tribe_${this.chainId}_${tribeId}`;\n      const cachedData = getMetadataFromCache(cacheKey);\n      \n      if (cachedData) {\n        const age = Date.now() - cachedData.timestamp;\n        if (age < TribeService.CACHE_DURATION) {\n          return cachedData.data as TribeData;\n        }\n      }\n      \n      const { tribeController } = getContracts(this.chainId);\n      \n      // First try getTribeDetails as it provides the most complete information\n      try {\n        const details = await this.publicClient.readContract({\n          address: tribeController.address,\n          abi: tribeController.abi,\n          functionName: 'getTribeDetails',\n          args: [BigInt(tribeId)]\n        });\n\n        // Parse metadata\n        let metadataObj: TribeMetadata = {\n          description: '',\n          createdAt: new Date().toISOString(),\n          isPrivate: false,\n          avatar: '',\n          coverImage: '',\n          topics: []\n        };\n        \n        try {\n          const parsed = JSON.parse(details.metadata || '{}');\n          metadataObj = {\n            ...metadataObj,\n            ...parsed\n          };\n        } catch (error) {\n          console.error(`Error parsing metadata for tribe ${tribeId}:`, error);\n        }\n\n        const tribeData: TribeData = {\n          id: tribeId.toString(),\n          name: details.name || `Tribe #${tribeId}`,\n          metadata: details.metadata || '{}',\n          owner: details.admin,\n          admins: [],\n          memberCount: Number(details.memberCount),\n          createdAt: Math.floor(Date.now() / 1000),\n          joinType: Number(details.joinType),\n          entryFee: details.entryFee,\n          nftRequirements: [],\n          isPrivate: Boolean(metadataObj.isPrivate),\n          isActive: details.isActive,\n          canMerge: details.canMerge,\n          members: []\n        };\n\n        // Get NFT requirements and other data in parallel\n        const [configView, admins, userStatus] = await Promise.all([\n          this.getNFTRequirements(tribeId),\n          this.getTribeAdmins(tribeId),\n          this.userAddress ? this.getMemberStatus(tribeId, this.userAddress) : Promise.resolve(null)\n        ]);\n\n        // Update tribe data with fetched information\n        tribeData.nftRequirements = configView?.nftRequirements || [];\n        tribeData.admins = admins;\n        tribeData.members = admins.map(address => ({\n          id: address,\n          username: address,\n          avatar: `https://api.dicebear.com/7.x/shapes/svg?seed=${address}`,\n          role: 'admin'\n        }));\n\n        if (userStatus !== null) {\n          tribeData.userMembershipStatus = {\n            isMember: userStatus === 1,\n            isAdmin: userStatus === 2,\n            isPending: userStatus === 3,\n            status: userStatus\n          };\n        }\n\n        // Cache the result\n        storeMetadataInCache(cacheKey, {\n          data: tribeData,\n          timestamp: Date.now()\n        });\n        \n        return tribeData;\n      } catch (error: any) {\n        // If the error is due to invalid tribe ID, cache this information\n        if (error?.message?.includes('Invalid tribe ID')) {\n          TribeService.INVALID_TRIBE_IDS.add(tribeId);\n        }\n        throw error;\n      }\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribe data', error);\n    }\n  }\n\n  /**\n   * Get NFT requirements for a tribe\n   */\n  private async getNFTRequirements(tribeId: number): Promise<{ nftRequirements: NFTRequirement[] } | null> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const configView = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribeConfigView',\n        args: [BigInt(tribeId)]\n      });\n      return configView as { nftRequirements: NFTRequirement[] };\n    } catch (error) {\n      console.error(`Error fetching NFT requirements for tribe ${tribeId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get admins for a tribe\n   */\n  private async getTribeAdmins(tribeId: number): Promise<`0x${string}`[]> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const admins = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribeWhitelist',\n        args: [BigInt(tribeId)]\n      }) as `0x${string}`[];\n      return admins;\n    } catch (error) {\n      console.error(`Error fetching admins for tribe ${tribeId}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Join a tribe\n   * @param tribeId Tribe ID\n   */\n  public async joinTribe(tribeId: number): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'joinTribe',\n        args: [BigInt(tribeId)],\n        account: this.userAddress,\n        chain\n      });\n\n      await waitForTransaction(hash, this.chainId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to join tribe', error);\n    }\n  }\n\n  /**\n   * Request to join a tribe\n   * @param tribeId Tribe ID\n   * @param entryFee Entry fee\n   */\n  public async requestToJoinTribe(tribeId: number, entryFee: bigint): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw this.handleError(ErrorType.CONNECTION_ERROR, 'Wallet not connected');\n    }\n\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      const chain = getChainConfig(this.chainId);\n      \n      const hash = await this.walletClient.writeContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'requestToJoinTribe',\n        args: [BigInt(tribeId)],\n        value: entryFee,\n        account: this.userAddress,\n        chain\n      });\n\n      await waitForTransaction(hash, this.chainId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to request to join tribe', error);\n    }\n  }\n\n  /**\n   * Get member status in tribe\n   * @param tribeId Tribe ID\n   * @param memberAddress Member address\n   * @returns Member status\n   */\n  public async getMemberStatus(tribeId: number, memberAddress: string): Promise<number> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const status = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getMemberStatus',\n        args: [BigInt(tribeId), memberAddress as `0x${string}`]\n      });\n\n      return Number(status);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get member status', error);\n    }\n  }\n\n  /**\n   * Get the total number of tribes\n   * @returns Tribes count\n   */\n  public async getTribesCount(): Promise<number> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const nextId = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'nextTribeId',\n        args: []\n      }) as bigint;\n      \n      console.log(`Got tribes count from nextTribeId: ${nextId}`);\n      return Number(nextId);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get tribes count', error);\n    }\n  }\n\n  /**\n   * Get user tribes\n   * @param userAddress User address\n   * @returns Array of tribe IDs\n   */\n  public async getUserTribes(userAddress: string): Promise<number[]> {\n    try {\n      const { tribeController } = getContracts(this.chainId);\n      \n      const tribes = await this.publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getUserTribes',\n        args: [userAddress as `0x${string}`]\n      }) as bigint[];\n\n      return tribes.map(Number);\n    } catch (error) {\n      throw this.handleError(ErrorType.BLOCKCHAIN_ERROR, 'Failed to get user tribes', error);\n    }\n  }\n\n  /**\n   * Map tribe data to UI format\n   * @param tribeData Tribe data\n   * @param chainId Chain ID\n   * @returns UI-formatted tribe\n   */\n  public mapTribeDataToUIFormat(tribeData: TribeData, chainId: number): Tribe {\n    // Use the shared utility function from typeMappers\n    return mapTribeDataToUI(tribeData, chainId);\n  }\n} ","import { WalletClient, Address } from 'viem';\nimport { IProfileService } from './IProfileService';\nimport { ProfileData, ProfileMetadata } from '../../types/user';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { getCurrentChain } from '../../constants/contracts';\n\nexport class ProfileService implements IProfileService {\n  private chainId: number;\n  private walletClient: WalletClient | null = null;\n  private userAddress: string | null = null;\n\n  constructor(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address;\n  }\n\n  /**\n   * Check if the wallet is connected\n   * @returns Whether the wallet is connected\n   */\n  isWalletConnected(): boolean {\n    return !!this.walletClient && !!this.userAddress;\n  }\n\n  async getProfileById(profileId: number): Promise<ProfileData> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    const result = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [BigInt(profileId)]\n    }) as [string, string, Address];\n\n    const [username, metadataStr] = result;\n    const metadata = this.parseMetadata(metadataStr);\n\n    return {\n      tokenId: profileId.toString(),\n      username,\n      metadata,\n      nftUri: metadata.avatar,\n      owner: this.userAddress || ''\n    };\n  }\n\n  async getProfileByUsername(username: string): Promise<ProfileData> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    const profileId = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'getProfileIdByUsername',\n      args: [username]\n    }) as bigint;\n\n    return this.getProfileById(Number(profileId));\n  }\n\n  async getProfileByAddress(address: string): Promise<ProfileData | null> {\n    console.log(`[ProfileService] Getting profile for address: ${address}`);\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { profileNFTMinter } = getContracts(this.chainId);\n\n      // First check if the address has a profile NFT\n      const balance = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'balanceOf',\n        args: [address as Address]\n      }) as bigint;\n\n      console.log(`[ProfileService] Profile NFT balance for ${address}: ${balance}`);\n\n      if (!balance || balance === 0n) {\n        console.log(`[ProfileService] No profile found for address ${address}`);\n        return null;\n      }\n\n      // Find the token ID by checking ownership\n      let userTokenId: bigint | null = null;\n      for (let i = 0; i < 10; i++) {\n        try {\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [BigInt(i)]\n          }) as Address;\n\n          if (owner.toLowerCase() === address.toLowerCase()) {\n            userTokenId = BigInt(i);\n            break;\n          }\n        } catch {\n          continue;\n        }\n      }\n\n      if (userTokenId === null) {\n        console.log(`[ProfileService] Could not find token ID for address ${address}`);\n        return null;\n      }\n\n      // Get profile data using token ID\n      const result = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'getProfileByTokenId',\n        args: [userTokenId]\n      }) as [string, string, Address];\n\n      const [username, metadataStr] = result;\n      const metadata = this.parseMetadata(metadataStr);\n\n      console.log(`[ProfileService] Found profile for ${address}: ${username}`);\n\n      return {\n        tokenId: userTokenId.toString(),\n        username,\n        metadata,\n        nftUri: metadata.avatar,\n        owner: address\n      };\n    } catch (error) {\n      console.error(`[ProfileService] Error getting profile for ${address}:`, error);\n      return null;\n    }\n  }\n\n  async createProfile(username: string, metadata: ProfileMetadata): Promise<number> {\n    if (!this.walletClient) {\n      throw new Error('Wallet not connected: walletClient is missing');\n    }\n    \n    if (!this.userAddress) {\n      throw new Error('Wallet not connected: userAddress is missing');\n    }\n\n    const { profileNFTMinter } = getContracts(this.chainId);\n    const metadataStr = JSON.stringify(metadata);\n    const chain = getCurrentChain(this.chainId);\n\n    try {\n      const hash = await this.walletClient.writeContract({\n        chain,\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'createProfile',\n        args: [username, metadataStr],\n        account: this.userAddress as `0x${string}`\n      });\n\n      console.log(`Profile creation transaction submitted: ${hash}`);\n\n      // Wait for transaction receipt\n      const publicClient = getPublicClient(this.chainId);\n      const receipt = await publicClient.waitForTransactionReceipt({ hash });\n\n      // Find ProfileCreated event\n      const event = receipt.logs.find(log => \n        log.address.toLowerCase() === profileNFTMinter.address.toLowerCase()\n      );\n\n      if (!event || !event.topics || event.topics.length < 4) {\n        throw new Error('Failed to find profile creation event');\n      }\n\n      // Extract token ID from event\n      const tokenId = parseInt(event.topics[3] || '0', 16);\n      return tokenId;\n    } catch (error) {\n      console.error(`[ProfileService] Error creating profile:`, error);\n      throw error;\n    }\n  }\n\n  async updateProfileMetadata(profileId: number, metadata: ProfileMetadata): Promise<void> {\n    if (!this.walletClient || !this.userAddress) {\n      throw new Error('Wallet not connected');\n    }\n\n    const { profileNFTMinter } = getContracts(this.chainId);\n    const metadataStr = JSON.stringify(metadata);\n    const chain = getCurrentChain(this.chainId);\n\n    const hash = await this.walletClient.writeContract({\n      chain,\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'updateProfileMetadata',\n      args: [BigInt(profileId), metadataStr],\n      account: this.userAddress as Address\n    });\n\n    const publicClient = getPublicClient(this.chainId);\n    await publicClient.waitForTransactionReceipt({ hash });\n  }\n\n  async checkUsernameAvailability(username: string): Promise<boolean> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    return !(await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'usernameExists',\n      args: [username]\n    }));\n  }\n\n  async findUsernameByAddress(address: string): Promise<string | null> {\n    const profile = await this.checkProfileOwnership(address);\n    return profile ? profile.username : null;\n  }\n\n  async skipProfileCreation(address: string): Promise<boolean> {\n    try {\n      localStorage.setItem('profile_creation_skipped', JSON.stringify({\n        address,\n        timestamp: Date.now()\n      }));\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async hasSkippedProfileCreation(address: string): Promise<boolean> {\n    try {\n      const skipped = localStorage.getItem('profile_creation_skipped');\n      if (!skipped) return false;\n\n      const { address: skippedAddress } = JSON.parse(skipped);\n      return skippedAddress.toLowerCase() === address.toLowerCase();\n    } catch {\n      return false;\n    }\n  }\n\n  async checkProfileOwnership(address: string): Promise<ProfileData | null> {\n    return this.getProfileByAddress(address);\n  }\n\n  private parseMetadata(metadataStr: string): ProfileMetadata {\n    try {\n      const parsed = JSON.parse(metadataStr);\n      return {\n        avatar: parsed.avatar || '',\n        bio: parsed.bio || '',\n        createdAt: parsed.createdAt || Date.now()\n      };\n    } catch {\n      return {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n  }\n} ","import { IIndexerService } from './IIndexerService';\nimport { Post, PostType } from '../../types/post';\nimport { Tribe } from '../../types/tribe';\nimport { ProfileData } from '../../types/user';\nimport { getPublicClient, getContracts } from '../../config/contracts';\nimport { Address, getAddress } from 'viem';\n\ntype CacheUpdateCallback = (type: 'profile' | 'posts' | 'tribes', data: any) => void;\n\ninterface CacheData {\n  posts: {\n    byId: Record<string, Post>;\n    byUser: Record<Address, string[]>;\n    byTribe: Record<number, string[]>;\n    lastUpdate: number;\n  };\n  tribes: {\n    byId: Record<string, Tribe>;\n    byUser: Record<Address, string[]>;\n    lastUpdate: number;\n  };\n  profiles: {\n    byAddress: Record<Address, ProfileData>;\n    lastUpdate: number;\n  };\n}\n\nexport class IndexerService implements IIndexerService {\n  private chainId: number;\n  private cache: CacheData;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private lastConnectedAddress: Address | null = null;\n  private cacheUpdateCallbacks: CacheUpdateCallback[] = [];\n\n  constructor(chainId: number) {\n    console.log(`[IndexerService] Initializing with chainId: ${chainId}`);\n    this.chainId = chainId;\n    this.cache = {\n      posts: {\n        byId: {},\n        byUser: {},\n        byTribe: {},\n        lastUpdate: 0\n      },\n      tribes: {\n        byId: {},\n        byUser: {},\n        lastUpdate: 0\n      },\n      profiles: {\n        byAddress: {},\n        lastUpdate: 0\n      }\n    };\n  }\n\n  // Helper to safely check if the error has a specific message\n  private hasErrorMessage(error: unknown, partialMessage: string): boolean {\n    return error instanceof Error && \n           typeof error.message === 'string' && \n           error.message.includes(partialMessage);\n  }\n\n  // Simplified method to log errors consistently\n  private logError(context: string, error: unknown): void {\n    if (error instanceof Error) {\n      console.error(`[IndexerService] ${context}:`, error.message);\n    } else {\n      console.error(`[IndexerService] ${context}:`, error);\n    }\n  }\n\n  // Add callback registration for cache updates\n  public onCacheUpdate(callback: CacheUpdateCallback): () => void {\n    this.cacheUpdateCallbacks.push(callback);\n    return () => {\n      this.cacheUpdateCallbacks = this.cacheUpdateCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  private notifyCacheUpdate(type: 'profile' | 'posts' | 'tribes', data: any): void {\n    this.cacheUpdateCallbacks.forEach(callback => callback(type, data));\n  }\n\n  // Helper to normalize addresses\n  private normalizeAddress(address: string): Address {\n    try {\n      return getAddress(address.toLowerCase());\n    } catch (e) {\n      throw new Error(`Invalid address format: ${address}`);\n    }\n  }\n\n  // Posts\n  async getPostsSince(timestamp: number): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    return Object.values(this.cache.posts.byId).filter(post => \n      Number(post.createdAt) >= timestamp\n    );\n  }\n\n  async getPostsByUser(address: string): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    const postIds = this.cache.posts.byUser[this.normalizeAddress(address)] || [];\n    return postIds.map(id => this.cache.posts.byId[id]).filter(Boolean);\n  }\n\n  async getPostsByTribe(tribeId: number): Promise<Post[]> {\n    await this.ensureCacheValid('posts');\n    const postIds = this.cache.posts.byTribe[tribeId] || [];\n    return postIds.map(id => this.cache.posts.byId[id]).filter(Boolean);\n  }\n\n  // Tribes\n  async getTribesSince(timestamp: number): Promise<Tribe[]> {\n    await this.ensureCacheValid('tribes');\n    return Object.values(this.cache.tribes.byId).filter(tribe => \n      Number(tribe.createdAt) >= timestamp\n    );\n  }\n\n  async getTribesByUser(address: string): Promise<Tribe[]> {\n    await this.ensureCacheValid('tribes');\n    const tribeIds = this.cache.tribes.byUser[this.normalizeAddress(address)] || [];\n    return tribeIds.map(id => this.cache.tribes.byId[id]).filter(Boolean);\n  }\n\n  // Profiles\n  async getProfilesByAddresses(addresses: string[]): Promise<ProfileData[]> {\n    await this.ensureCacheValid('profiles');\n    return addresses\n      .map(addr => this.cache.profiles.byAddress[this.normalizeAddress(addr)])\n      .filter(Boolean);\n  }\n\n  async updateUserMetadata(address: string, metadata: string): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    // Get the token ID for the address\n    const balance = await publicClient.readContract({\n      address: profileNFTMinter.address,\n      abi: profileNFTMinter.abi,\n      functionName: 'balanceOf',\n      args: [this.normalizeAddress(address)]\n    }) as bigint;\n\n    if (!balance || balance === 0n) {\n      throw new Error('No profile found for address');\n    }\n\n    // Find the token ID owned by this address\n    for (let tokenId = 0n; tokenId < 100n; tokenId++) {\n      try {\n        const owner = await publicClient.readContract({\n          address: profileNFTMinter.address,\n          abi: profileNFTMinter.abi,\n          functionName: 'ownerOf',\n          args: [tokenId]\n        }) as Address;\n\n        if (owner.toLowerCase() === this.normalizeAddress(address).toLowerCase()) {\n          const result = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'getProfileByTokenId',\n            args: [tokenId]\n          }) as [string, string, Address];\n\n          const [username, , profileOwner] = result;\n          const parsedMetadata = JSON.parse(metadata);\n\n          // Update cache\n          this.cache.profiles.byAddress[this.normalizeAddress(address)] = {\n            tokenId: tokenId.toString(),\n            username,\n            metadata: {\n              avatar: parsedMetadata.avatar || '',\n              bio: parsedMetadata.bio || '',\n              createdAt: parsedMetadata.createdAt || Date.now()\n            },\n            nftUri: parsedMetadata.avatar || '',\n            owner: profileOwner\n          };\n          break;\n        }\n      } catch {\n        continue;\n      }\n    }\n  }\n\n  // Cache management\n  clearCache(): void {\n    this.cache = {\n      posts: {\n        byId: {},\n        byUser: {},\n        byTribe: {},\n        lastUpdate: 0\n      },\n      tribes: {\n        byId: {},\n        byUser: {},\n        lastUpdate: 0\n      },\n      profiles: {\n        byAddress: {},\n        lastUpdate: 0\n      }\n    };\n  }\n\n  async refreshCache(): Promise<void> {\n    await Promise.all([\n      this.updatePostsCache(),\n      this.updateTribesCache(),\n      this.updateProfilesCache()\n    ]);\n  }\n\n  private async ensureCacheValid(type: keyof CacheData): Promise<void> {\n    const now = Date.now();\n    if (now - this.cache[type].lastUpdate > this.CACHE_TTL) {\n      switch (type) {\n        case 'posts':\n          await this.updatePostsCache();\n          break;\n        case 'tribes':\n          await this.updateTribesCache();\n          break;\n        case 'profiles':\n          await this.updateProfilesCache();\n          break;\n      }\n    }\n  }\n\n  private async updatePostsCache(): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { postMinter } = getContracts(this.chainId);\n\n    try {\n      // Get total posts count\n      const nextPostId = await publicClient.readContract({\n        address: postMinter.address,\n        abi: postMinter.abi,\n        functionName: 'nextPostId',\n        args: []\n      }) as bigint;\n\n      if (nextPostId === undefined) {\n        throw new Error('Failed to get post count from contract');\n      }\n\n      // Fetch posts in batches\n      const batchSize = 50n;\n      const totalPosts = nextPostId;\n      const batches = Math.ceil(Number(totalPosts) / Number(batchSize));\n\n      for (let i = 0; i < batches; i++) {\n        const start = BigInt(i) * batchSize;\n        const end = (start + batchSize) > totalPosts ? totalPosts : (start + batchSize);\n\n        for (let postId = start; postId < end; postId++) {\n          try {\n            const postData = await publicClient.readContract({\n              address: postMinter.address,\n              abi: postMinter.abi,\n              functionName: 'getPost',\n              args: [postId]\n            }) as [bigint, Address, bigint, string, boolean, Address, bigint, boolean, Address];\n\n            const [id, creator, tribeId, metadata, isGated, collectibleContract, collectibleId, isEncrypted, accessSigner] = postData;\n\n            // Parse metadata\n            let parsedMetadata;\n            try {\n              parsedMetadata = JSON.parse(metadata);\n            } catch (err) {\n              console.error(`Error parsing metadata for post ${postId}:`, err);\n              continue;\n            }\n\n            const post: Post = {\n              id: postId.toString(),\n              content: parsedMetadata.content || '',\n              author: creator,\n              tribeId: Number(tribeId),\n              createdAt: parsedMetadata.createdAt || Date.now(),\n              type: parsedMetadata.type || 'text'\n            };\n\n            // Update cache\n            this.cache.posts.byId[post.id] = post;\n\n            // Update user index\n            const userPosts = this.cache.posts.byUser[creator] || [];\n            if (!userPosts.includes(post.id)) {\n              userPosts.push(post.id);\n              this.cache.posts.byUser[creator] = userPosts;\n            }\n\n            // Update tribe index\n            const tribePosts = this.cache.posts.byTribe[post.tribeId] || [];\n            if (!tribePosts.includes(post.id)) {\n              tribePosts.push(post.id);\n              this.cache.posts.byTribe[post.tribeId] = tribePosts;\n            }\n          } catch (err) {\n            console.error(`Error fetching post ${postId}:`, err);\n          }\n        }\n      }\n\n      this.cache.posts.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('Error updating posts cache:', err);\n    }\n  }\n\n  private async updateTribesCache(): Promise<void> {\n    const publicClient = getPublicClient(this.chainId);\n    const { tribeController } = getContracts(this.chainId);\n\n    try {\n      // Get total tribes count\n      const nextTribeId = await publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'nextTribeId',\n        args: []\n      }) as bigint;\n\n      if (nextTribeId === undefined) {\n        throw new Error('Failed to get tribe count from contract');\n      }\n\n      // Fetch tribes\n      for (let tribeId = 1n; tribeId < nextTribeId; tribeId++) {\n        try {\n          // Get tribe config view for basic info\n          const configView = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getTribeConfigView',\n            args: [tribeId]\n          }) as { joinType: number; entryFee: bigint; nftRequirements: any[]; canMerge: boolean };\n\n          // Get tribe admin\n          const admin = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getTribeAdmin',\n            args: [tribeId]\n          }) as Address;\n\n          // Get member count\n          const memberCount = await publicClient.readContract({\n            address: tribeController.address,\n            abi: tribeController.abi,\n            functionName: 'getMemberCount',\n            args: [tribeId]\n          }) as bigint;\n          \n          // Try to get tribe name and metadata\n          let tribeName = `Tribe ${tribeId}`;\n          let tribeMetadata = '';\n          \n          try {\n            // Get full tribe config which includes name and metadata\n            const rawConfig = await publicClient.readContract({\n              address: tribeController.address,\n              abi: tribeController.abi,\n              functionName: 'getTribeConfigView',\n              args: [BigInt(tribeId)]\n            });\n            \n            // Handle different response formats\n            if (Array.isArray(rawConfig)) {\n              tribeName = rawConfig[0] || `Tribe ${tribeId}`;\n              tribeMetadata = rawConfig[1] || '{}';\n            } else if (typeof rawConfig === 'object' && rawConfig !== null) {\n              const rc = rawConfig as any;\n              tribeName = rc.name || `Tribe ${tribeId}`;\n              tribeMetadata = rc.metadata || '{}';\n            }\n          } catch (error) {\n            console.warn(`Failed to get name for tribe ${tribeId}, using default name:`, error);\n          }\n\n          const tribe: Tribe = {\n            id: tribeId.toString(),\n            name: tribeName,\n            metadata: tribeMetadata,\n            owner: admin,\n            admins: [admin],\n            memberCount: Number(memberCount),\n            createdAt: Date.now(),\n            joinType: configView.joinType,\n            entryFee: configView.entryFee,\n            nftRequirements: configView.nftRequirements || []\n          };\n\n          // Update cache\n          this.cache.tribes.byId[tribe.id] = tribe;\n\n          // Update user index\n          const userTribes = this.cache.tribes.byUser[admin] || [];\n          if (!userTribes.includes(tribe.id)) {\n            userTribes.push(tribe.id);\n            this.cache.tribes.byUser[admin] = userTribes;\n          }\n        } catch (err) {\n          console.error(`Error fetching tribe ${tribeId}:`, err);\n        }\n      }\n\n      this.cache.tribes.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('Error updating tribes cache:', err);\n    }\n  }\n\n  private async updateProfilesCache(): Promise<void> {\n    console.log(`[IndexerService] Starting profile cache update`);\n    const publicClient = getPublicClient(this.chainId);\n    const { profileNFTMinter } = getContracts(this.chainId);\n\n    // Validate contract address\n    if (!profileNFTMinter?.address) {\n      console.error('[IndexerService] Profile NFT contract address not found');\n      return;\n    }\n\n    try {\n      // First verify the contract exists and is accessible\n      try {\n        const code = await publicClient.getBytecode({ address: profileNFTMinter.address });\n        if (!code || code === '0x') {\n          console.error('[IndexerService] Profile NFT contract not found at address:', profileNFTMinter.address);\n          return;\n        }\n      } catch (error) {\n        console.error('[IndexerService] Error verifying Profile NFT contract:', error);\n        return;\n      }\n\n      // Process profiles in small batches with delays\n      let consecutiveErrors = 0;\n      const MAX_CONSECUTIVE_ERRORS = 5;\n      const BATCH_SIZE = 5n;\n      let tokenId = 0n;\n      let profilesFound = 0;\n\n      while (consecutiveErrors < MAX_CONSECUTIVE_ERRORS) {\n        try {\n          // Try to get the owner of the token\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [tokenId]\n          }) as Address;\n\n          // If we got here, the token exists. Get its profile data\n          const result = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'getProfileByTokenId',\n            args: [tokenId]\n          }) as [string, string, Address];\n\n          const [username, metadataStr] = result;\n          const normalizedOwner = this.normalizeAddress(owner);\n          console.log(`[IndexerService] Found profile for tokenId ${tokenId}: ${username} (${normalizedOwner})`);\n\n          let metadata;\n          try {\n            metadata = JSON.parse(metadataStr);\n          } catch (e: any) {\n            console.log(`[IndexerService] Failed to parse metadata for ${username}: ${e.message}`);\n            metadata = {\n              avatar: '',\n              bio: '',\n              createdAt: Date.now()\n            };\n          }\n\n          // Update cache with normalized address\n          const profile: ProfileData = {\n            tokenId: tokenId.toString(),\n            username,\n            metadata: {\n              avatar: metadata.avatar || '',\n              bio: metadata.bio || '',\n              createdAt: metadata.createdAt || Date.now()\n            },\n            nftUri: metadata.avatar || '',\n            owner: normalizedOwner\n          };\n\n          this.cache.profiles.byAddress[normalizedOwner] = profile;\n          // Notify with hasProfile true since we found an actual profile\n          this.notifyCacheUpdate('profile', { \n            address: normalizedOwner, \n            profile,\n            hasProfile: true\n          });\n\n          profilesFound++;\n          consecutiveErrors = 0; // Reset error counter on success\n        } catch (error: unknown) {\n          // Check if this is a nonexistent token error\n          if (error instanceof Error && \n              error.message.includes('ERC721NonexistentToken')) {\n            // This is expected for non-minted tokens\n            console.log(`[IndexerService] Token ${tokenId} not minted yet, trying next token...`);\n            \n            // If we've found some profiles and hit a gap, we might be at the end\n            if (profilesFound > 0 && consecutiveErrors > 2) {\n              console.log(`[IndexerService] Found ${profilesFound} profiles and hit several gaps, assuming end of minted tokens`);\n              break;\n            }\n            \n            consecutiveErrors++;\n          } else {\n            console.error(`[IndexerService] Error fetching profile for tokenId ${tokenId}:`, error);\n            consecutiveErrors++;\n          }\n        }\n\n        tokenId += 1n;\n\n        // Add a delay between batches to avoid rate limiting\n        if (tokenId % BATCH_SIZE === 0n) {\n          await new Promise(resolve => setTimeout(resolve, 100)); // Reduced delay\n        }\n      }\n\n      console.log(`[IndexerService] Profile cache update complete. Found ${profilesFound} profiles.`);\n      this.cache.profiles.lastUpdate = Date.now();\n    } catch (err) {\n      console.error('[IndexerService] Error updating profiles cache:', err);\n    }\n  }\n\n  // User lookup methods\n  public getUsernameByAddress(address: string): string | null {\n    const userPosts = this.cache.posts.byUser[this.normalizeAddress(address)] || [];\n    if (userPosts.length > 0) {\n      const post = this.cache.posts.byId[userPosts[0]];\n      return post?.author || null;\n    }\n    return null;\n  }\n\n  public getAddressByUsername(username: string): string | null {\n    // Search through posts to find matching author\n    for (const post of Object.values(this.cache.posts.byId)) {\n      if (post.author.toLowerCase() === username.toLowerCase()) {\n        return post.author;\n      }\n    }\n    return null;\n  }\n\n  // Profile methods\n  public getUserMetadata(address: string): ProfileData | null {\n    return this.cache.profiles.byAddress[this.normalizeAddress(address)] || null;\n  }\n\n  // Force refresh methods\n  public async forceRefreshContent(contentType: 'post' | 'tribe' | 'profile', id: string): Promise<void> {\n    switch (contentType) {\n      case 'post':\n        await this.refreshPost(id);\n        break;\n      case 'tribe':\n        await this.refreshTribe(id);\n        break;\n      case 'profile':\n        await this.refreshProfile(id);\n        break;\n    }\n  }\n\n  private async refreshPost(postId: string): Promise<void> {\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { contentManager } = getContracts(this.chainId);\n\n      const postData = await publicClient.readContract({\n        address: contentManager.address,\n        abi: contentManager.abi,\n        functionName: 'getPost',\n        args: [BigInt(postId)]\n      }) as [string, Address, bigint, bigint, number];\n\n      const [content, author, tribeId, timestamp, postType] = postData;\n\n      const post: Post = {\n        id: postId,\n        content,\n        author,\n        tribeId: Number(tribeId),\n        createdAt: Number(timestamp) * 1000,\n        type: postType as PostType\n      };\n\n      // Update cache\n      this.cache.posts.byId[post.id] = post;\n      \n      // Update user index\n      const userPosts = this.cache.posts.byUser[this.normalizeAddress(author)] || [];\n      if (!userPosts.includes(post.id)) {\n        userPosts.push(post.id);\n        this.cache.posts.byUser[this.normalizeAddress(author)] = userPosts;\n      }\n\n      // Update tribe index\n      const tribePosts = this.cache.posts.byTribe[post.tribeId] || [];\n      if (!tribePosts.includes(post.id)) {\n        tribePosts.push(post.id);\n        this.cache.posts.byTribe[post.tribeId] = tribePosts;\n      }\n    } catch (error) {\n      console.error(`Error refreshing post ${postId}:`, error);\n    }\n  }\n\n  private async refreshTribe(tribeId: string): Promise<void> {\n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { tribeController } = getContracts(this.chainId);\n\n      const tribeData = await publicClient.readContract({\n        address: tribeController.address,\n        abi: tribeController.abi,\n        functionName: 'getTribe',\n        args: [BigInt(tribeId)]\n      }) as [string, string, Address, Address[], bigint, bigint, number, bigint, any[]];\n\n      const [name, metadata, owner, admins, memberCount, timestamp, joinType, entryFee, nftRequirements] = tribeData;\n\n      const tribe: Tribe = {\n        id: tribeId,\n        name,\n        metadata,\n        owner,\n        admins,\n        memberCount: Number(memberCount),\n        createdAt: Number(timestamp) * 1000,\n        joinType,\n        entryFee,\n        nftRequirements\n      };\n\n      // Update cache\n      this.cache.tribes.byId[tribe.id] = tribe;\n      \n      // Update user index\n      const userTribes = this.cache.tribes.byUser[this.normalizeAddress(owner)] || [];\n      if (!userTribes.includes(tribe.id)) {\n        userTribes.push(tribe.id);\n        this.cache.tribes.byUser[this.normalizeAddress(owner)] = userTribes;\n      }\n    } catch (error) {\n      console.error(`Error refreshing tribe ${tribeId}:`, error);\n    }\n  }\n\n  public async refreshProfile(address: string): Promise<void> {\n    const normalizedAddress = this.normalizeAddress(address);\n    \n    try {\n      const publicClient = getPublicClient(this.chainId);\n      const { profileNFTMinter } = getContracts(this.chainId);\n\n      if (!profileNFTMinter?.address) {\n        throw new Error('Profile NFT contract address not found');\n      }\n\n      // Check for profile NFT\n      const hasProfile = await publicClient.readContract({\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'balanceOf',\n        args: [normalizedAddress]\n      }) as bigint;\n\n      if (!hasProfile || hasProfile === 0n) {\n        const emptyProfile: ProfileData = {\n          tokenId: '0',\n          username: `User-${normalizedAddress.substring(2, 6)}`,\n          metadata: {\n            avatar: '',\n            bio: '',\n            createdAt: Date.now()\n          },\n          nftUri: '',\n          owner: normalizedAddress\n        };\n        \n        this.cache.profiles.byAddress[normalizedAddress] = emptyProfile;\n        this.notifyCacheUpdate('profile', { address: normalizedAddress, profile: emptyProfile, hasProfile: false });\n        return;\n      }\n\n      // Find the profile token\n      let found = false;\n      for (let id = 0n; id < 100n && !found; id++) {\n        try {\n          const owner = await publicClient.readContract({\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'ownerOf',\n            args: [id]\n          }) as Address;\n\n          const ownerNormalized = this.normalizeAddress(owner);\n          if (ownerNormalized === normalizedAddress) {\n            const [username, metadataStr] = await publicClient.readContract({\n              address: profileNFTMinter.address,\n              abi: profileNFTMinter.abi,\n              functionName: 'getProfileByTokenId',\n              args: [id]\n            }) as [string, string, Address];\n\n            const metadata = this.parseMetadata(metadataStr);\n            const profile: ProfileData = {\n              tokenId: id.toString(),\n              username,\n              metadata: {\n                avatar: metadata.avatar || '',\n                bio: metadata.bio || '',\n                createdAt: metadata.createdAt || Date.now()\n              },\n              nftUri: metadata.avatar || '',\n              owner: normalizedAddress\n            };\n\n            this.cache.profiles.byAddress[normalizedAddress] = profile;\n            this.notifyCacheUpdate('profile', { address: normalizedAddress, profile, hasProfile: true });\n            found = true;\n          }\n        } catch (error) {\n          if (error instanceof Error && error.message.includes('ERC721NonexistentToken')) {\n            continue;\n          }\n          throw error;\n        }\n      }\n\n      // If we didn't find a profile but the user has a balance, something went wrong\n      if (!found && hasProfile > 0n) {\n        throw new Error(`Profile NFT found for ${normalizedAddress} but unable to locate token ID`);\n      }\n\n    } catch (error) {\n      this.logError(`Error refreshing profile for ${normalizedAddress}`, error);\n      throw error;\n    }\n  }\n  \n  // Helper to safely parse JSON metadata\n  private parseMetadata(metadataStr: string): any {\n    try {\n      return JSON.parse(metadataStr);\n    } catch (e: any) {\n      console.error(`[IndexerService] Failed to parse metadata: ${metadataStr.substring(0, 50)}...`, e);\n      return {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n  }\n\n  // Add a method to explicitly set connected user address\n  public setConnectedUser(address: string): void {\n    try {\n      const normalizedAddress = this.normalizeAddress(address);\n      \n      if (this.lastConnectedAddress !== normalizedAddress) {\n        this.lastConnectedAddress = normalizedAddress;\n        \n        // Initialize user data structures if needed\n        if (!this.cache.posts.byUser[normalizedAddress]) {\n          this.cache.posts.byUser[normalizedAddress] = [];\n        }\n        \n        // Check for existing profile and verify NFT ownership immediately\n        const profile = this.cache.profiles.byAddress[normalizedAddress];\n        const publicClient = getPublicClient(this.chainId);\n        const { profileNFTMinter } = getContracts(this.chainId);\n\n        // Always verify NFT ownership, even if we have a cached profile\n        publicClient.readContract({\n          address: profileNFTMinter.address,\n          abi: profileNFTMinter.abi,\n          functionName: 'balanceOf',\n          args: [normalizedAddress]\n        }).then((value: unknown) => {\n          const balance = value as bigint;\n          const hasProfile = balance > 0n;\n          \n          if (hasProfile) {\n            if (profile) {\n              // We have a cached profile and confirmed NFT ownership\n              this.notifyCacheUpdate('profile', { \n                address: normalizedAddress, \n                profile,\n                hasProfile: true\n              });\n            } else {\n              // We need to fetch the profile\n              this.refreshProfile(normalizedAddress);\n            }\n          } else {\n            // No NFT found, use empty profile\n            const emptyProfile: ProfileData = {\n              tokenId: '0',\n              username: `User-${normalizedAddress.substring(2, 6)}`,\n              metadata: {\n                avatar: '',\n                bio: '',\n                createdAt: Date.now()\n              },\n              nftUri: '',\n              owner: normalizedAddress\n            };\n            this.cache.profiles.byAddress[normalizedAddress] = emptyProfile;\n            this.notifyCacheUpdate('profile', { \n              address: normalizedAddress, \n              profile: emptyProfile,\n              hasProfile: false\n            });\n          }\n        }).catch((error) => {\n          this.logError(`Error checking profile balance in setConnectedUser`, error);\n          if (profile) {\n            // Use cached profile but mark as unverified\n            this.notifyCacheUpdate('profile', { \n              address: normalizedAddress, \n              profile,\n              hasProfile: false\n            });\n          }\n        });\n      }\n    } catch (error) {\n      this.logError(`Error in setConnectedUser`, error);\n      throw error;\n    }\n  }\n\n  // Add method to update chain ID\n  public updateChainId(chainId: number): void {\n    if (this.chainId !== chainId) {\n      console.log(`[IndexerService] Updating chain ID from ${this.chainId} to ${chainId}`);\n      this.chainId = chainId;\n      // Clear cache when chain ID changes\n      this.cache = {\n        posts: {\n          byId: {},\n          byUser: {},\n          byTribe: {},\n          lastUpdate: 0\n        },\n        tribes: {\n          byId: {},\n          byUser: {},\n          lastUpdate: 0\n        },\n        profiles: {\n          byAddress: {},\n          lastUpdate: 0\n        }\n      };\n    }\n  }\n} ","/**\n * Tribes SDK - Main entry point for the application\n * \n * This class serves as a facade for all tribe-related services and provides\n * a unified interface for the application to interact with the backend.\n */\nimport { TribeService } from './tribe/TribeService';\nimport { IPostService } from './post/IPostService';\nimport { IProfileService } from './profile/IProfileService';\nimport { ProfileService } from './profile/ProfileService';\nimport { IndexerService } from './indexer/IndexerService';\nimport { getCurrentChainId } from '../utils/blockchainUtils';\nimport { Tribe, TribeData, NFTRequirement } from '../types/tribe';\nimport { Post } from '../types/post';\nimport { ProfileData, ProfileMetadata } from '../types/user';\nimport { InteractionType } from '../types/interaction';\nimport { WalletClient } from 'viem';\n\n/**\n * Main SDK class that provides access to all services\n */\nexport class TribesSDK {\n  private tribeService: TribeService;\n  private postService: IPostService | null = null;\n  private profileService: IProfileService | null = null;\n  private indexerService: IndexerService;\n  private chainId: number;\n  private isInitialized = false;\n\n  /**\n   * Create a new TribesSDK instance\n   * @param chainId Optional chain ID, will be detected from wallet if not provided\n   */\n  constructor(chainId?: number) {\n    this.chainId = chainId || 0;\n    this.tribeService = new TribeService(this.chainId);\n    this.indexerService = new IndexerService(this.chainId);\n  }\n\n  /**\n   * Initialize the SDK\n   * @param chainId Optional chain ID override\n   */\n  async initialize(chainId?: number): Promise<void> {\n    try {\n      // If chain ID is provided, use it, otherwise detect from wallet\n      if (chainId) {\n        console.log(`[TribesSDK] Initializing with provided chainId: ${chainId}`);\n        this.chainId = chainId;\n      } else if (!this.chainId) {\n        try {\n          this.chainId = await getCurrentChainId();\n          console.log(`[TribesSDK] Auto-detected chainId: ${this.chainId}`);\n        } catch (error) {\n          console.warn(`[TribesSDK] Failed to auto-detect chainId, using default: ${this.chainId || 20143}`);\n          this.chainId = this.chainId || 20143; // Use Monad Devnet as fallback\n        }\n      }\n\n      // Initialize services\n      console.log(`[TribesSDK] Initializing services with chainId: ${this.chainId}`);\n      this.tribeService = new TribeService(this.chainId);\n      this.profileService = new ProfileService(this.chainId);\n      this.indexerService = new IndexerService(this.chainId);\n\n      // Initialize cache in a fire-and-forget manner to avoid blocking initialization\n      console.log(`[TribesSDK] Starting cache initialization (non-blocking)`);\n      this.initializeCache().catch(err => {\n        console.warn('[TribesSDK] Background cache initialization failed:', err);\n      });\n\n      // Mark as initialized immediately so the app can continue\n      this.isInitialized = true;\n      console.log(`[TribesSDK] Core initialization complete`);\n    } catch (error) {\n      console.error(`[TribesSDK] Initialization failed:`, error);\n      // Still mark as initialized to prevent repeated failures\n      this.isInitialized = true;\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize cache in the background\n   * @private\n   */\n  private async initializeCache(): Promise<void> {\n    try {\n      await this.indexerService.refreshCache();\n      console.log(`[TribesSDK] Cache successfully initialized`);\n    } catch (error) {\n      console.warn(`[TribesSDK] Cache initialization failed, will retry later:`, error);\n      // Schedule a retry after a few seconds\n      setTimeout(() => {\n        console.log(`[TribesSDK] Retrying cache initialization`);\n        this.indexerService.refreshCache().catch(e => \n          console.error(`[TribesSDK] Cache retry failed:`, e)\n        );\n      }, 5000);\n    }\n  }\n\n  /**\n   * Connect to a wallet\n   * @param walletClient Wallet client from wagmi or viem\n   * @param address Connected wallet address\n   */\n  public async connect(walletClient: any, address: string): Promise<void> {\n    console.log('[TribesSDK] Connecting to wallet', { \n      walletClientType: typeof walletClient, \n      hasWalletClient: !!walletClient,\n      address \n    });\n    \n    try {\n      // Connect all services to the wallet\n      if (this.tribeService) {\n        await this.tribeService.connect(walletClient, address);\n      }\n      \n      if (this.profileService) {\n        await this.profileService.connect(walletClient, address);\n      }\n      \n      // Register this user with the indexer service\n      this.indexerService.setConnectedUser(address);\n      \n      console.log('[TribesSDK] Successfully connected to wallet');\n    } catch (error) {\n      console.error('[TribesSDK] Failed to connect to wallet:', error);\n      throw error;\n    }\n  }\n\n  // Profile-related methods\n  public async getProfileById(profileId: number): Promise<ProfileData> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileById(profileId);\n  }\n\n  public async getProfileByUsername(username: string): Promise<ProfileData> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileByUsername(username);\n  }\n\n  public async getProfileByAddress(address: string): Promise<ProfileData | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.getProfileByAddress(address);\n  }\n\n  public async createProfile(username: string, metadata: ProfileMetadata): Promise<number> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    \n    // Pre-check wallet connection\n    if (!this.isWalletConnected()) {\n      throw new Error('Wallet connection check failed. Please reconnect your wallet and try again.');\n    }\n    \n    return this.profileService.createProfile(username, metadata);\n  }\n\n  public async updateProfileMetadata(profileId: number, metadata: ProfileMetadata): Promise<void> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.updateProfileMetadata(profileId, metadata);\n  }\n\n  public async checkUsernameAvailability(username: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.checkUsernameAvailability(username);\n  }\n\n  public async checkProfileOwnership(address: string): Promise<ProfileData | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.checkProfileOwnership(address);\n  }\n\n  public async findUsernameByAddress(address: string): Promise<string | null> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.findUsernameByAddress(address);\n  }\n\n  public async skipProfileCreation(address: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.skipProfileCreation(address);\n  }\n\n  public async hasSkippedProfileCreation(address: string): Promise<boolean> {\n    if (!this.profileService) {\n      throw new Error('Profile service not initialized');\n    }\n    return this.profileService.hasSkippedProfileCreation(address);\n  }\n\n  // Tribe-related methods\n  /**\n   * Create a new tribe\n   * @param name Tribe name\n   * @param metadata Tribe metadata\n   * @param admins Admin addresses\n   * @param joinType Join type\n   * @param entryFee Entry fee\n   * @param nftRequirements NFT requirements\n   * @returns Created tribe ID\n   */\n  public async createTribe(\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ): Promise<number> {\n    const tribeId = await this.tribeService.createTribe(\n      name,\n      metadata,\n      admins,\n      joinType,\n      entryFee,\n      nftRequirements\n    );\n\n    // Refresh cache after creating a new tribe\n    await this.indexerService.refreshCache();\n\n    return tribeId;\n  }\n\n  /**\n   * Get tribe data\n   * @param tribeId Tribe ID\n   * @returns Tribe data\n   */\n  public async getTribeData(tribeId: number): Promise<TribeData> {\n    return this.tribeService.getTribeData(tribeId);\n  }\n\n  /**\n   * Get tribe in UI format\n   * @param tribeId Tribe ID\n   * @returns Tribe in UI format\n   */\n  public async getTribe(tribeId: number): Promise<Tribe> {\n    try {\n      console.log(`[TribesSDK] Getting tribe data for ID: ${tribeId}`);\n      const tribeData = await this.tribeService.getTribeData(tribeId);\n      console.log(`[TribesSDK] Successfully fetched tribe data for ID: ${tribeId}`, tribeData);\n      \n      // Map the data to UI format\n      const uiTribe = this.tribeService.mapTribeDataToUIFormat(tribeData, this.chainId);\n      console.log(`[TribesSDK] Mapped tribe data to UI format:`, uiTribe);\n      \n      return uiTribe;\n    } catch (error) {\n      console.error(`[TribesSDK] Error getting tribe ${tribeId}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Join a tribe\n   * @param tribeId Tribe ID\n   */\n  public async joinTribe(tribeId: number): Promise<void> {\n    await this.tribeService.joinTribe(tribeId);\n    // Refresh cache after joining a tribe\n    await this.indexerService.refreshCache();\n  }\n\n  /**\n   * Request to join a tribe\n   * @param tribeId Tribe ID\n   * @param entryFee Entry fee\n   */\n  public async requestToJoinTribe(tribeId: number, entryFee: bigint): Promise<void> {\n    await this.tribeService.requestToJoinTribe(tribeId, entryFee);\n    // Refresh cache after requesting to join a tribe\n    await this.indexerService.refreshCache();\n  }\n\n  /**\n   * Get member status in tribe\n   * @param tribeId Tribe ID\n   * @param memberAddress Member address\n   * @returns Member status\n   */\n  public async getMemberStatus(tribeId: number, memberAddress: string): Promise<number> {\n    return this.tribeService.getMemberStatus(tribeId, memberAddress);\n  }\n\n  /**\n   * Get tribes count\n   * @returns Tribes count\n   */\n  public async getTribesCount(): Promise<number> {\n    return this.tribeService.getTribesCount();\n  }\n\n  /**\n   * Get user tribes\n   * @param userAddress User address\n   * @returns Array of tribe IDs\n   */\n  public async getUserTribes(userAddress: string): Promise<number[]> {\n    const tribes = await this.indexerService.getTribesByUser(userAddress);\n    return tribes.map(tribe => Number(tribe.id));\n  }\n\n  /**\n   * Get all tribes with better error handling and fallbacks\n   */\n  public async getAllTribes(): Promise<Tribe[]> {\n    try {\n      console.log(`[TribesSDK] Getting all tribes from indexer`);\n      const tribes = await this.indexerService.getTribesSince(0);\n      console.log(`[TribesSDK] Found ${tribes.length} tribes from indexer`);\n      \n      // Ensure all tribe objects have the required properties\n      return tribes.map(tribe => {\n        // Make sure ID is a string\n        const id = tribe.id.toString();\n        \n        // Create a complete Tribe object with all required properties\n        const completeTribe: Tribe = {\n          ...tribe,\n          id,\n          // Ensure these required properties exist\n          metadata: tribe.metadata || '{}',\n          owner: tribe.owner || '0x0000000000000000000000000000000000000000',\n          nftRequirements: tribe.nftRequirements || []\n        };\n        \n        console.log(`[TribesSDK] Processed tribe ${id} from indexer:`, completeTribe);\n        return completeTribe;\n      });\n    } catch (error) {\n      console.error(`[TribesSDK] Error getting all tribes from indexer:`, error);\n      \n      // Fallback: Try using tribe service directly if indexer fails\n      try {\n        console.log(`[TribesSDK] Falling back to tribeService for getting tribes`);\n        const count = await this.tribeService.getTribesCount();\n        console.log(`[TribesSDK] Found ${count} tribes via fallback`);\n        \n        // Get first 20 tribes as a reasonable limit for fallback\n        const limit = Math.min(count, 20);\n        const tribes = [];\n        \n        for (let i = 1; i <= limit; i++) {\n          try {\n            const tribeData = await this.tribeService.getTribeData(i);\n            const tribe = this.tribeService.mapTribeDataToUIFormat(tribeData, this.chainId);\n            console.log(`[TribesSDK] Successfully mapped tribe ${i} via fallback:`, tribe);\n            tribes.push(tribe);\n          } catch (tribeError) {\n            console.warn(`[TribesSDK] Failed to get tribe ${i}:`, tribeError);\n          }\n        }\n        \n        console.log(`[TribesSDK] Fallback returned ${tribes.length} tribes`);\n        return tribes;\n      } catch (fallbackError) {\n        console.error(`[TribesSDK] Fallback also failed:`, fallbackError);\n        return []; // Return empty array as last resort\n      }\n    }\n  }\n\n  // Post-related methods\n  public async getPostsSince(timestamp: number): Promise<Post[]> {\n    return this.indexerService.getPostsSince(timestamp);\n  }\n\n  public async getPostsByUser(address: string): Promise<Post[]> {\n    return this.indexerService.getPostsByUser(address);\n  }\n\n  public async getPostsByTribe(tribeId: number): Promise<Post[]> {\n    return this.indexerService.getPostsByTribe(tribeId);\n  }\n\n  /**\n   * Check if the wallet is connected to the SDK\n   * @returns Whether the wallet is connected\n   */\n  public isWalletConnected(): boolean {\n    const profileServiceExists = !!this.profileService;\n    \n    // Check only the profile service since TribeService might not have isWalletConnected\n    let profileServiceConnected = false;\n    \n    if (profileServiceExists && this.profileService) {\n      try {\n        profileServiceConnected = this.profileService.isWalletConnected();\n      } catch (error) {\n        console.error('[TribesSDK] Error checking profile service wallet connection:', error);\n      }\n    }\n    \n    const isConnected = profileServiceExists && profileServiceConnected;\n    \n    console.log('[TribesSDK] Wallet connection status:', {\n      profileServiceExists,\n      profileServiceConnected,\n      overallStatus: isConnected\n    });\n    \n    return isConnected;\n  }\n\n  // Factory method to create SDK instance\n  public static async create(chainId?: number): Promise<TribesSDK> {\n    const sdk = new TribesSDK(chainId);\n    await sdk.initialize();\n    return sdk;\n  }\n} ","import { useState, useCallback, useEffect } from 'react';\nimport { Address } from 'viem';\nimport { useWallet } from './useWallet';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { NFTRequirement } from '../types/tribe';\n\nexport interface TribesManagementHookResult {\n  // State\n  isLoading: boolean;\n  error: string | null;\n\n  // Actions\n  createTribe: (\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ) => Promise<number>;\n  joinTribe: (tribeId: number) => Promise<void>;\n  requestToJoinTribe: (tribeId: number, entryFee: bigint) => Promise<void>;\n  getTribesCount: () => Promise<number>;\n}\n\n/**\n * Hook for managing tribes (create, join, etc.)\n */\nexport function useTribesManagement(): TribesManagementHookResult {\n  const [sdk, setSdk] = useState<TribesSDK | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { address, chainId, isConnected, walletClient } = useWallet();\n\n  // Initialize SDK\n  useEffect(() => {\n    const initSdk = async () => {\n      try {\n        setIsLoading(true);\n        const tribesSDK = await TribesSDK.create(chainId);\n        setSdk(tribesSDK);\n        setIsLoading(false);\n      } catch (err) {\n        setError((err as Error).message);\n        setIsLoading(false);\n      }\n    };\n\n    initSdk();\n  }, [chainId]);\n\n  // Connect to wallet when available\n  useEffect(() => {\n    const connectSdk = async () => {\n      if (sdk && isConnected && walletClient && address) {\n        try {\n          await sdk.connect(walletClient, address);\n        } catch (err) {\n          setError((err as Error).message);\n        }\n      }\n    };\n\n    connectSdk();\n  }, [sdk, isConnected, walletClient, address]);\n\n  const createTribe = useCallback(async (\n    name: string,\n    metadata: string,\n    admins?: string[],\n    joinType?: number,\n    entryFee?: bigint,\n    nftRequirements?: NFTRequirement[]\n  ): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const tribeId = await sdk.createTribe(\n        name,\n        metadata,\n        admins,\n        joinType,\n        entryFee,\n        nftRequirements\n      );\n      return tribeId;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create tribe';\n      setError(errorMessage);\n      console.error('Error creating tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const joinTribe = useCallback(async (tribeId: number): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await sdk.joinTribe(tribeId);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to join tribe';\n      setError(errorMessage);\n      console.error('Error joining tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const requestToJoinTribe = useCallback(async (tribeId: number, entryFee: bigint): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await sdk.requestToJoinTribe(tribeId, entryFee);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to request to join tribe';\n      setError(errorMessage);\n      console.error('Error requesting to join tribe:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const getTribesCount = useCallback(async (): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getTribesCount();\n    } catch (err) {\n      console.error('Error getting tribes count:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  return {\n    isLoading,\n    error,\n    createTribe,\n    joinTribe,\n    requestToJoinTribe,\n    getTribesCount,\n  };\n} ","import { useState, useCallback, useEffect } from 'react';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { useChainId } from 'wagmi';\nimport { ErrorType } from '../types';\nimport { getPublicClient, getContracts } from '../config/contracts';\n\ninterface ProfileData {\n  tokenId: string;\n  username: string;\n  metadata: string;\n  nftUri: string;\n  owner: string;\n}\n\ninterface TribesProfileHookResult {\n  // Profile data\n  profile: ProfileData | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  getProfileById: (profileId: number) => Promise<void>;\n  getProfileByUsername: (username: string) => Promise<void>;\n  createProfile: (username: string, metadata: string) => Promise<number>;\n  updateProfileMetadata: (profileId: number, metadata: string) => Promise<void>;\n  checkUsernameAvailability: (username: string) => Promise<boolean>;\n  \n  // Validation\n  validateUsername: (username: string) => boolean;\n}\n\n/**\n * Hook for managing profiles in the Tribes ecosystem\n */\nexport function useTribesProfile(): TribesProfileHookResult {\n  const chainId = useChainId();\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  /**\n   * Get profile by ID\n   */\n  const getProfileById = useCallback(async (profileId: number) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const result = await blockchain.getProfileByTokenId(profileId);\n      if (!result) {\n        throw new Error('Profile not found');\n      }\n      \n      // Destructure the result object properly\n      const { username, metadata, owner } = result;\n      \n      // Parse metadata to get nftUri\n      let parsedMetadata;\n      try {\n        parsedMetadata = JSON.parse(metadata);\n      } catch {\n        parsedMetadata = { avatar: '' };\n      }\n      \n      setProfile({\n        tokenId: profileId.toString(),\n        username,\n        metadata,\n        nftUri: parsedMetadata.avatar || '',\n        owner\n      });\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Get profile by username\n   */\n  const getProfileByUsername = useCallback(async (username: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // This should make an API call to get profile by username\n      // For now, we'll simulate it with a mock\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      const mockProfile = {\n        tokenId: Math.floor(Math.random() * 1000).toString(),\n        username,\n        metadata: JSON.stringify({ avatar: '' }),\n        nftUri: '',\n        owner: '0x0000000000000000000000000000000000000000'\n      };\n      \n      setProfile(mockProfile);\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to get profile by username';\n      setError(errorMessage);\n      console.error('Error getting profile by username:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Create a new profile\n   */\n  const createProfile = useCallback(async (username: string, metadata: string): Promise<number> => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // In a real implementation, this would call the blockchain to create a profile\n      // For now, just simulate a delay and return a mock profile ID\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const mockProfileId = Math.floor(Math.random() * 1000);\n      \n      return mockProfileId;\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to create profile';\n      setError(errorMessage);\n      console.error('Error creating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  /**\n   * Update profile metadata\n   */\n  const updateProfileMetadata = useCallback(async (profileId: number, metadata: string) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Use the correct type for tokenId (number, not string)\n      await blockchain.updateProfile({\n        tokenId: profileId, // Pass as number\n        metadata\n      });\n      \n      // Update local state if this is the current profile\n      if (profile && profile.tokenId === profileId.toString()) {\n        setProfile({\n          ...profile,\n          metadata\n        });\n      }\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err; // Re-throw to allow caller to handle\n    } finally {\n      setIsLoading(false);\n    }\n  }, [profile]);\n\n  /**\n   * Check if username is available\n   */\n  const checkUsernameAvailability = useCallback(async (username: string): Promise<boolean> => {\n    try {\n      // In a real implementation, this would check if the username is already taken\n      // For now, just simulate a delay and return true most of the time\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Mock: usernames that start with \"user_\" are considered taken\n      return !username.startsWith('user_');\n    } catch (err: any) {\n      console.error('Error checking username availability:', err);\n      return false; // Safer to return false (username taken) on error\n    }\n  }, []);\n\n  /**\n   * Validate username format\n   */\n  const validateUsername = useCallback((username: string): boolean => {\n    // Simple validation: 3-20 chars, alphanumeric or underscore\n    const usernameRegex = /^[a-z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }, []);\n\n  return {\n    profile,\n    isLoading,\n    error,\n    getProfileById,\n    getProfileByUsername,\n    createProfile,\n    updateProfileMetadata,\n    checkUsernameAvailability,\n    validateUsername\n  };\n} ","import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n} ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '../../../utils/cn';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-lg font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-accent disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'h-9 w-9',\n        'icon-sm': 'h-5 w-5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  isLoading?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, isLoading, leftIcon, rightIcon, children, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        disabled={isLoading || props.disabled}\n        {...props}\n      >\n        {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n        {!isLoading && leftIcon && <span className=\"mr-2\">{leftIcon}</span>}\n        {children}\n        {!isLoading && rightIcon && <span className=\"ml-2\">{rightIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants }; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst badgeVariants = cva(\n  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: 'border-transparent bg-primary text-primary-foreground',\n        secondary: 'border-transparent bg-secondary text-secondary-foreground',\n        outline: 'text-foreground',\n        success: 'border-transparent bg-[#B0E681]/20 text-[#B0E681]',\n        warning: 'border-transparent bg-yellow-500/20 text-yellow-500',\n        error: 'border-transparent bg-red-500/20 text-red-500',\n        info: 'border-transparent bg-blue-500/20 text-blue-500',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst cardVariants = cva(\n  'relative rounded-xl transition-all duration-200',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        enhanced: [\n          'bg-[rgba(15,23,42,0.15)]',\n          'backdrop-blur-[16px]',\n          'border',\n          'border-[rgba(255,255,255,0.05)]',\n          'shadow-[0_4px_24px_0_rgba(0,0,0,0.05)]',\n          'hover:translate-y-[-2px]',\n          'hover:bg-[rgba(15,23,42,0.2)]',\n          'hover:shadow-[0_8px_32px_0_rgba(0,0,0,0.1)]',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface CardProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof cardVariants> {}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, variant, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(cardVariants({ variant, className }))}\n        {...props}\n      />\n    );\n  }\n);\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn('font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}; ","import React from 'react';\nimport { X } from 'lucide-react';\nimport { cn } from '../../../utils/cn';\n\ninterface DialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function Dialog({ isOpen, onClose, children, className }: DialogProps) {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-background/80 backdrop-blur-sm z-50\"\n        onClick={onClose}\n      />\n\n      {/* Dialog */}\n      <div className=\"fixed inset-0 flex items-center justify-center z-50\">\n        <div\n          className={cn(\n            'relative bg-card border border-border rounded-xl shadow-lg max-h-[85vh] w-full max-w-lg overflow-auto animate-in fade-in-0 zoom-in-95',\n            className\n          )}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Close button */}\n          <button\n            onClick={onClose}\n            className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\n          >\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </button>\n\n          {children}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport const DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n);\n\nexport const DialogContent = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn('p-6', className)} {...props} />\n);\n\nexport const DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 p-6 pt-0', className)}\n    {...props}\n  />\n);\n\nexport const DialogTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h2\n    ref={ref}\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = 'DialogTitle';\n\nexport const DialogDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = 'DialogDescription'; ","import React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '../../../utils/cn';\n\nconst inputVariants = cva(\n  'flex rounded-lg border bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'border-input',\n        ghost: 'border-none bg-transparent shadow-none focus-visible:ring-0 focus-visible:ring-offset-0',\n        enhanced: [\n          'bg-white/5',\n          'border-white/10',\n          'focus:border-accent',\n          'transition-colors',\n        ],\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nexport interface InputProps\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'size'>,\n    VariantProps<typeof inputVariants> {\n  error?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, variant, error, leftIcon, rightIcon, type, ...props }, ref) => {\n    return (\n      <div className=\"relative\">\n        {leftIcon && (\n          <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n            {leftIcon}\n          </div>\n        )}\n        <input\n          type={type}\n          className={cn(\n            inputVariants({ variant }),\n            error && 'border-destructive focus-visible:ring-destructive',\n            leftIcon && 'pl-10',\n            rightIcon && 'pr-10',\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n        {rightIcon && (\n          <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n            {rightIcon}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input, inputVariants }; ","/**\n * Types for tribe-related data structures\n */\n\nimport { PostInteractions } from './interaction';\n\nexport enum TribeJoinType {\n  Open = 0,\n  Approval = 1,\n  Closed = 2\n}\n\nexport enum MemberStatus {\n  NotMember = 0,\n  Member = 1,\n  Admin = 2,\n  Pending = 3,\n  Rejected = 4\n}\n\nexport interface TribeMetadata {\n  description: string;\n  coverImage?: string;\n  avatar?: string;\n  createdAt: string;\n  topics?: string[];\n  website?: string;\n  social?: {\n    twitter?: string;\n    discord?: string;\n    telegram?: string;\n    [key: string]: string | undefined;\n  };\n  [key: string]: any;\n}\n\nexport interface TribeConfig {\n  name: string;\n  description: string;\n  coverImage?: string;\n  avatar?: string;\n  isPrivate: boolean;\n  entryFee: string;\n  nftRequirements: NFTRequirement[];\n  metadata: TribeMetadata;\n  admins: string[];\n  joinType: number;\n}\n\nexport interface NFTRequirement {\n  contractAddress: `0x${string}`;\n  tokenId: bigint;\n  minBalance: bigint;\n}\n\nexport interface TribeConfigResponse {\n  success: boolean;\n  name?: string;\n  metadata?: any;\n  admins?: string[];\n  joinType?: number;\n  entryFee?: string;\n  nftRequirements?: NFTRequirement[];\n  data?: TribeConfig;\n  error?: string;\n}\n\nexport interface TribeMember {\n  id: string;\n  username: string;\n  avatar: string;\n  role?: 'admin' | 'member';\n}\n\nexport interface Topic {\n  id: string;\n  name: string;\n  postCount?: number;\n}\n\nexport interface TribeData {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: bigint;\n  nftRequirements: NFTRequirement[];\n  isPrivate?: boolean;\n  isActive?: boolean;\n  canMerge?: boolean;\n  userMembershipStatus?: MembershipData;\n  members?: TribeMember[];\n}\n\nexport interface Tribe {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: bigint;\n  nftRequirements: NFTRequirement[];\n}\n\nexport interface MembershipData {\n  isMember: boolean;\n  isAdmin: boolean;\n  isPending: boolean;\n  status: MemberStatus;\n}\n\nexport interface DefaultImageConfig {\n  avatar: string;\n  cover: string;\n}\n\nexport interface DefaultImages {\n  [chainId: string]: DefaultImageConfig;\n}\n\nexport interface MetadataCacheEntry {\n  data: any;\n  metadata?: string;\n  timestamp: number;\n}\n\nexport interface MetadataCache {\n  [key: string]: MetadataCacheEntry;\n}","import React, { useState, useEffect, useRef, KeyboardEvent } from 'react';\nimport { useTribesManagement } from '../../hooks/useTribesManagement';\nimport { useTribesProfile } from '../../hooks/useTribesProfile';\nimport { useChainId } from 'wagmi';\nimport { SUPPORTED_CHAINS } from '../../constants/networks';\nimport { useTribesData } from '../../hooks/useTribesData';\nimport { AlignLeft, ImageIcon, Users, Lock, Globe } from 'lucide-react';\nimport { Card, CardContent } from '../common/ui';\nimport { TribeMetadata, TribeJoinType } from '../../types/tribe';\n\n// Mock addTribe method - in a real app, this would come from useTribesData hook\nconst addTribe = (tribeId: number, data: any) => {\n  console.log(`Adding tribe ${tribeId} to local cache`, data);\n};\n\n// Extend the Window interface to include our tribes global\ndeclare global {\n  interface Window {\n    tribes?: {\n      users?: Record<string, {\n        username?: string;\n        address?: string;\n        metadata?: string;\n        [key: string]: any;\n      }>;\n      [key: string]: any;\n    };\n  }\n}\n\ninterface TribeCreationFormProps {\n  onSuccess?: (tribeId: number) => void;\n  onCancel?: () => void;\n}\n\ninterface AdminUser {\n  username: string;\n  address: string;\n  isResolved: boolean;\n  isValid: boolean;\n  isLoading: boolean;\n  statusMessage?: string;\n}\n\n// Interface for profile lookup result\ninterface ProfileLookupResult {\n  isValid: boolean;\n  address?: string;\n  statusMessage?: string;\n}\n\nexport const TribeCreationForm: React.FC<TribeCreationFormProps> = ({\n  onSuccess,\n  onCancel\n}) => {\n  // Form state\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [coverImage, setCoverImage] = useState('');\n  const [adminInput, setAdminInput] = useState(''); // For username input\n  const [adminUsers, setAdminUsers] = useState<AdminUser[]>([]); // For tracking usernames with addresses\n  const [joinType, setJoinType] = useState<TribeJoinType>(TribeJoinType.Open); // Default join type\n  const [entryFee, setEntryFee] = useState('0');\n  const [chainError, setChainError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const adminInputRef = useRef<HTMLInputElement>(null);\n  \n  // Get current chain ID from wallet\n  const chainId = useChainId();\n  \n  // Tribe management hook\n  const {\n    isLoading,\n    error,\n    createTribe\n  } = useTribesManagement();\n\n  // Profile management hook for username lookup\n  const {\n    profile,\n    checkUsernameAvailability,\n    validateUsername\n  } = useTribesProfile();\n  \n  // Add tribes data hook\n  // const { addTribe } = useTribesData();\n  \n  // Check if on a supported chain\n  useEffect(() => {\n    // Also check the chainId from window.ethereum as a backup\n    if (window.ethereum && window.ethereum.chainId) {\n      const detectedChainId = parseInt(window.ethereum.chainId as string, 16);\n    }\n    \n    if (chainId) {\n      // We have a chainId, check if it's supported\n      const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === chainId);\n      if (!isSupported) {\n        const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n        setChainError(`Network not supported. Please switch to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n      } else {\n        setChainError(null);\n      }\n    } else {\n      // No chainId from wagmi, check if we can get it from window.ethereum\n      if (window.ethereum && window.ethereum.chainId) {\n        const detectedChainId = parseInt(window.ethereum.chainId as string, 16);\n        const isSupported = SUPPORTED_CHAINS.some(chain => chain.id === detectedChainId);\n        if (!isSupported) {\n          const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n          setChainError(`Network not supported. Please switch to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n        } else {\n          setChainError(null);\n        }\n      } else {\n        // Cannot determine chain, show generic error\n        const supportedChainIds = SUPPORTED_CHAINS.map(chain => chain.id).join(', ');\n        setChainError(`Cannot detect network. Please connect to one of the supported networks (Chain IDs: ${supportedChainIds})`);\n      }\n    }\n  }, [chainId]);\n  \n  // Create metadata object\n  const getTribeMetadata = (): string => {\n    // Build a complete metadata object for consistent display\n    const metadata: TribeMetadata = {\n      description: description,\n      avatar: avatar || '/monad-white.svg', // Default avatar if not provided\n      coverImage: coverImage || '/monad-banner.png', // Default cover if not provided\n      createdAt: new Date().toISOString(),\n      topics: [],\n      social: {\n        twitter: '',\n        discord: '',\n        telegram: ''\n      }\n    };\n    \n    // Convert to string for contract storage\n    return JSON.stringify(metadata);\n  };\n  \n  // Get admin addresses from resolved usernames\n  const getAdminAddresses = (): string[] => {\n    return adminUsers\n      .filter(admin => admin.isResolved && admin.isValid)\n      .map(admin => admin.address);\n  };\n\n  // Fetch profile by username\n  const fetchProfileByUsername = async (username: string): Promise<ProfileLookupResult> => {\n    try {\n      // First validate username format\n      if (!validateUsername(username)) {\n        return {\n          isValid: false,\n          statusMessage: 'Invalid format (3-20 chars, a-z, 0-9, _)'\n        };\n      }\n      \n      // Check if username exists (if available = false, then it exists)\n      const isAvailable = await checkUsernameAvailability(username);\n      \n      if (isAvailable) {\n        return {\n          isValid: false,\n          statusMessage: 'Username not found'\n        };\n      }\n      \n      // TODO: Implement full profile lookup from the chain or an API\n      // Mock implementation for now\n      return {\n        isValid: true,\n        address: `0x${username.padEnd(40, '0').substring(0, 40)}`\n      };\n    } catch (err) {\n      console.error('Error in fetchProfileByUsername:', err);\n      return {\n        isValid: false,\n        statusMessage: 'Error looking up profile'\n      };\n    }\n  };\n\n  // Add admin username\n  const addAdminUsername = async (username: string) => {\n    // Don't add empty usernames\n    if (!username.trim()) return;\n    \n    // Validate username format (3-20 chars, only letters, numbers, underscores)\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    if (!usernameRegex.test(username)) {\n      setAdminUsers(prev => [...prev, {\n        username,\n        address: '',\n        isResolved: true,\n        isValid: false,\n        isLoading: false,\n        statusMessage: 'Invalid format (3-20 chars, a-z, 0-9, _)'\n      }]);\n      setAdminInput('');\n      return;\n    }\n    \n    // Don't add duplicate usernames\n    if (adminUsers.some(admin => admin.username.toLowerCase() === username.toLowerCase())) {\n      setAdminInput('');\n      return;\n    }\n    \n    // Add the username with pending status\n    setAdminUsers(prev => [...prev, {\n      username,\n      address: '',\n      isResolved: false,\n      isValid: false,\n      isLoading: true,\n      statusMessage: 'Resolving...'\n    }]);\n    \n    // Clear input\n    setAdminInput('');\n    \n    try {\n      // Try to fetch the profile\n      const profileResult = await fetchProfileByUsername(username);\n      \n      if (profileResult.isValid) {\n        // Update admin with valid address (ensure address is a string)\n        setAdminUsers(prev => \n          prev.map(admin => \n            admin.username === username \n              ? { \n                  ...admin, \n                  address: profileResult.address || '', \n                  isResolved: true, \n                  isValid: true, \n                  isLoading: false,\n                  statusMessage: undefined\n                }\n              : admin\n          )\n        );\n      } else {\n        // Update admin with invalid status\n        setAdminUsers(prev => \n          prev.map(admin => \n            admin.username === username \n              ? { \n                  ...admin, \n                  isResolved: true, \n                  isValid: false, \n                  isLoading: false,\n                  statusMessage: profileResult.statusMessage\n                }\n              : admin\n          )\n        );\n      }\n    } catch (err) {\n      console.error('Error resolving username:', err);\n      \n      // Update admin with error status\n      setAdminUsers(prev => \n        prev.map(admin => \n          admin.username === username \n            ? { \n                ...admin, \n                isResolved: true, \n                isValid: false, \n                isLoading: false,\n                statusMessage: 'Failed to resolve'\n              }\n            : admin\n        )\n      );\n    }\n  };\n  \n  // Handle form submission to create the tribe\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!name.trim()) {\n      alert('Please enter a tribe name');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      \n      // Call the createTribe function from the hook\n      const tribeId = await createTribe(\n        name.trim(),\n        getTribeMetadata(),\n        getAdminAddresses(),\n        joinType,\n        BigInt(entryFee),\n        []\n      );\n      \n      // Add to local cache\n      addTribe(tribeId, {\n        id: tribeId.toString(),\n        name: name.trim(),\n        description,\n        joinType,\n        entryFee,\n        avatar,\n        coverImage\n      });\n      \n      if (onSuccess) {\n        onSuccess(tribeId);\n      }\n    } catch (err: any) {\n      console.error('Error creating tribe:', err);\n      alert(err.message || 'Failed to create tribe');\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleAdminInputKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (adminInput.trim()) {\n        addAdminUsername(adminInput.trim());\n      }\n    }\n  };\n  \n  const removeAdminUsername = (username: string) => {\n    setAdminUsers(prev => prev.filter(admin => admin.username !== username));\n  };\n  \n  const focusAdminInput = () => {\n    adminInputRef.current?.focus();\n  };\n  \n  return (\n    <Card className=\"w-full max-w-3xl\">\n      <CardContent className=\"p-6\">\n        <h2 className=\"text-2xl font-bold mb-6\">Create New Tribe</h2>\n        \n        {chainError && (\n          <div className=\"bg-red-50 p-4 rounded-md mb-6 text-red-600\">\n            {chainError}\n          </div>\n        )}\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Tribe Name */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              Tribe Name\n            </label>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Enter tribe name\"\n              required\n            />\n          </div>\n          \n          {/* Tribe Description */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <AlignLeft className=\"w-4 h-4\" />\n                <span>Description</span>\n              </div>\n            </label>\n            <textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[100px]\"\n              placeholder=\"What is this tribe about?\"\n            />\n          </div>\n          \n          {/* Tribe Images */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                <div className=\"flex items-center gap-1\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  <span>Avatar Image URL</span>\n                </div>\n              </label>\n              <input\n                type=\"text\"\n                value={avatar}\n                onChange={(e) => setAvatar(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"https://example.com/avatar.png\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                <div className=\"flex items-center gap-1\">\n                  <ImageIcon className=\"w-4 h-4\" />\n                  <span>Cover Image URL</span>\n                </div>\n              </label>\n              <input\n                type=\"text\"\n                value={coverImage}\n                onChange={(e) => setCoverImage(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"https://example.com/cover.png\"\n              />\n            </div>\n          </div>\n          \n          {/* Tribe Join Type */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"w-4 h-4\" />\n                <span>Join Type</span>\n              </div>\n            </label>\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Open)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Open \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span>Open (Anyone can join)</span>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Approval)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Approval \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Lock className=\"w-4 h-4\" />\n                <span>Approval Required</span>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setJoinType(TribeJoinType.Closed)}\n                className={`px-4 py-2 rounded-md flex items-center gap-2 ${\n                  joinType === TribeJoinType.Closed \n                    ? 'bg-blue-100 text-blue-700 border border-blue-300' \n                    : 'bg-gray-100 text-gray-700 border border-gray-200'\n                }`}\n              >\n                <Lock className=\"w-4 h-4\" />\n                <span>Invite Only</span>\n              </button>\n            </div>\n            \n            {joinType === TribeJoinType.Approval && (\n              <div className=\"mt-4\">\n                <label className=\"block text-sm font-medium mb-1\">\n                  Entry Fee (optional)\n                </label>\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"text\"\n                    value={entryFee}\n                    onChange={(e) => setEntryFee(e.target.value)}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    placeholder=\"0\"\n                  />\n                  <span className=\"ml-2\">wei</span>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Members will need to pay this fee to join your tribe\n                </p>\n              </div>\n            )}\n          </div>\n          \n          {/* Admins */}\n          <div>\n            <label className=\"block text-sm font-medium mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"w-4 h-4\" />\n                <span>Admins</span>\n              </div>\n            </label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              {adminUsers.map((admin, index) => (\n                <div \n                  key={index}\n                  className={`px-3 py-1 rounded-full flex items-center text-sm ${\n                    admin.isLoading\n                      ? 'bg-gray-200 text-gray-700'\n                      : admin.isValid\n                        ? 'bg-green-100 text-green-800'\n                        : 'bg-red-100 text-red-800'\n                  }`}\n                >\n                  <span>{admin.username}</span>\n                  {admin.isLoading ? (\n                    <div className=\"ml-2 w-3 h-3 rounded-full border-2 border-gray-500 border-t-transparent animate-spin\"></div>\n                  ) : admin.statusMessage ? (\n                    <span className=\"ml-2 text-xs\">{admin.statusMessage}</span>\n                  ) : null}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeAdminUsername(admin.username)}\n                    className=\"ml-2 text-gray-500 hover:text-gray-700\"\n                  >\n                    ×\n                  </button>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"flex\">\n              <input\n                ref={adminInputRef}\n                type=\"text\"\n                value={adminInput}\n                onChange={(e) => setAdminInput(e.target.value)}\n                onKeyDown={handleAdminInputKeyDown}\n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Enter username to add admin\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => {\n                  if (adminInput.trim()) {\n                    addAdminUsername(adminInput.trim());\n                  }\n                }}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700\"\n              >\n                Add\n              </button>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Enter usernames to add admins. Your account will automatically be an admin.\n            </p>\n          </div>\n          \n          {/* Form Buttons */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            {onCancel && (\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50\"\n                disabled={isLoading || loading}\n              >\n                Cancel\n              </button>\n            )}\n            \n            <button\n              type=\"submit\"\n              className={`px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 ${\n                (isLoading || loading) ? 'opacity-50 cursor-not-allowed' : ''\n              }`}\n              disabled={isLoading || loading || !!chainError}\n            >\n              {(isLoading || loading) ? 'Creating...' : 'Create Tribe'}\n            </button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport { PostType } from '../../types/post';\nimport { Upload, Plus, Trash, MapPin, Video } from 'lucide-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateDraft, selectPostDraft } from '../../store/slices/postsSlice';\nimport clsx from 'clsx';\nimport { format } from 'date-fns';\nimport { EventDetails } from '../../types/event';\n\n// Define all necessary interfaces\ninterface PollOption {\n  id: string;\n  text: string;\n  votes?: number;\n}\n\ninterface EventLocation {\n  type: 'PHYSICAL' | 'VIRTUAL' | 'HYBRID';\n  physical?: string;\n  virtual?: string;\n}\n\ninterface MediaContent {\n  type: 'image' | 'video' | 'audio';\n  url: string;\n  name: string;\n  size: number;\n}\n\ninterface Milestone {\n  title: string;\n  dueDate: string;\n  completed?: boolean;\n}\n\ninterface Attachment {\n  name: string;\n  size: number;\n  type: string;\n  url: string;\n}\n\ninterface PostCreateParams {\n  title?: string;\n  content: string;\n  type: string;\n  tribeId?: string;\n  description?: string;\n  tags?: string[];\n  eventDetails?: {\n    title?: string;\n    organizer?: string;\n    startDate: string;\n    endDate: string;\n    location: EventLocation | string;\n    maxTickets: number;\n    price: number;\n  };\n  pollDetails?: {\n    options: PollOption[];\n    endDate: string;\n    allowMultipleChoices: boolean;\n    requireVerification: boolean;\n  };\n  projectDetails?: {\n    status: 'PLANNING' | 'IN_PROGRESS' | 'COMPLETED';\n    budget?: string;\n    team?: string[];\n    milestones?: Milestone[];\n  };\n  resourceDetails?: {\n    type: 'DOCUMENT' | 'LINK' | 'CODE' | 'OTHER';\n    category?: string;\n    version?: string;\n    attachments?: Attachment[];\n  };\n  mediaContent?: MediaContent[];\n}\n\n// Use the same mapping as PostTypeMapper for consistency\nconst POST_TYPE_MAPPING = {\n  [PostType.TEXT]: 'text',\n  [PostType.IMAGE]: 'image',\n  [PostType.VIDEO]: 'video',\n  [PostType.LINK]: 'link',\n  [PostType.EVENT]: 'event',\n  [PostType.POLL]: 'poll',\n  PROJECT: 'project',\n  RESOURCE: 'resource',\n  RICH_MEDIA: 'rich_media'\n} as const;\n\ntype PostTypeString = typeof POST_TYPE_MAPPING[keyof typeof POST_TYPE_MAPPING];\n\ninterface PostTypeFieldsProps {\n  type: PostTypeString;\n}\n\n// Style constants\nconst inputClass = \"mt-1 block w-full rounded-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\";\nconst buttonClass = \"flex items-center justify-center px-3 py-2 border border-gray-700 rounded-md text-sm font-medium\";\nconst selectedBtnClass = \"bg-blue-600/25 text-blue-400 border-blue-500/50\";\nconst actionBtnClass = \"p-2 rounded-full bg-gray-800 hover:bg-gray-700 transition-colors\";\n\n// Extended media type to handle audio\ntype ExtendedMediaType = 'image' | 'video' | 'audio';\n\nconst PostTypeFields: React.FC<PostTypeFieldsProps> = ({ type }) => {\n  const dispatch = useDispatch();\n  const postDraft = useSelector(selectPostDraft);\n\n  const handleUpdateDraft = (data: Partial<PostCreateParams>) => {\n    // Create a compatible object for the Redux dispatch\n    // If eventDetails exists, ensure it's compatible with what Redux expects\n    const compatibleData: any = { ...data };\n    \n    if (compatibleData.eventDetails) {\n      // Make sure title and organizer are not undefined\n      compatibleData.eventDetails = {\n        ...compatibleData.eventDetails,\n        title: compatibleData.eventDetails.title || postDraft.title || '',\n        organizer: compatibleData.eventDetails.organizer || ''\n      };\n    }\n    \n    dispatch(updateDraft(compatibleData));\n  };\n\n  const renderEventFields = () => {\n    const [locationType, setLocationType] = useState<EventLocation['type']>('PHYSICAL');\n\n    const defaultLocation: EventLocation = {\n      type: locationType,\n      physical: locationType !== 'VIRTUAL' ? '' : undefined,\n      virtual: locationType !== 'PHYSICAL' ? '' : undefined\n    };\n\n    const getLocationObject = (): EventLocation => {\n      if (!postDraft.eventDetails?.location) return defaultLocation;\n      \n      if (typeof postDraft.eventDetails.location === 'string') {\n        return {\n          type: locationType,\n          physical: locationType !== 'VIRTUAL' ? postDraft.eventDetails.location : undefined,\n          virtual: locationType !== 'PHYSICAL' ? postDraft.eventDetails.location : undefined\n        };\n      }\n      \n      return postDraft.eventDetails.location as EventLocation;\n    };\n\n    const handleLocationTypeChange = (type: EventLocation['type']) => {\n      setLocationType(type);\n      const currentLocation = getLocationObject();\n      \n      const newLocation: EventLocation = {\n        type,\n        physical: type !== 'VIRTUAL' ? currentLocation.physical || '' : undefined,\n        virtual: type !== 'PHYSICAL' ? currentLocation.virtual || '' : undefined\n      };\n      \n      handleUpdateDraft({\n        eventDetails: {\n          title: postDraft.eventDetails?.title || postDraft.title || '',\n          organizer: postDraft.eventDetails?.organizer || '',\n          startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n          endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n          location: newLocation,\n          maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n          price: Number(postDraft.eventDetails?.price || 0)\n        }\n      });\n    };\n\n    const fixPhysicalLocation = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const currentLocation = getLocationObject();\n      \n      const newLocation: EventLocation = {\n        ...currentLocation,\n        physical: e.target.value\n      };\n      \n      handleUpdateDraft({\n        eventDetails: {\n          title: postDraft.eventDetails?.title || postDraft.title || '',\n          organizer: postDraft.eventDetails?.organizer || '',\n          startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n          endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n          location: newLocation,\n          maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n          price: Number(postDraft.eventDetails?.price || 0)\n        }\n      });\n    };\n\n    const fixVirtualLocation = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const currentLocation = getLocationObject();\n      \n      const newLocation: EventLocation = {\n        ...currentLocation,\n        virtual: e.target.value\n      };\n      \n      handleUpdateDraft({\n        eventDetails: {\n          title: postDraft.eventDetails?.title || postDraft.title || '',\n          organizer: postDraft.eventDetails?.organizer || '',\n          startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n          endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n          location: newLocation,\n          maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n          price: Number(postDraft.eventDetails?.price || 0)\n        }\n      });\n    };\n\n    const fixMaxTickets = (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleUpdateDraft({\n        eventDetails: {\n          title: postDraft.eventDetails?.title || postDraft.title || '',\n          organizer: postDraft.eventDetails?.organizer || '',\n          startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n          endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n          location: getLocationObject(),\n          maxTickets: parseInt(e.target.value) || 0,\n          price: Number(postDraft.eventDetails?.price || 0)\n        }\n      });\n    };\n\n    const fixPrice = (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleUpdateDraft({\n        eventDetails: {\n          title: postDraft.eventDetails?.title || postDraft.title || '',\n          organizer: postDraft.eventDetails?.organizer || '',\n          startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n          endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n          location: getLocationObject(),\n          maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n          price: parseFloat(e.target.value) || 0\n        }\n      });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Event Start Date & Time</label>\n          <input\n            type=\"datetime-local\"\n            value={postDraft.eventDetails?.startDate ? \n              format(new Date(postDraft.eventDetails.startDate), \"yyyy-MM-dd'T'HH:mm\") :\n              format(new Date(), \"yyyy-MM-dd'T'HH:mm\")\n            }\n            onChange={(e) => {\n              const eventDetails = {\n                title: postDraft.eventDetails?.title || postDraft.title || '',\n                organizer: postDraft.eventDetails?.organizer || '',\n                startDate: new Date(e.target.value).toISOString(),\n                endDate: postDraft.eventDetails?.endDate || new Date().toISOString(),\n                location: getLocationObject(),\n                maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n                price: Number(postDraft.eventDetails?.price || 0)\n              };\n              handleUpdateDraft({ eventDetails });\n            }}\n            className=\"mt-1 block w-full rounded-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Event End Date & Time</label>\n          <input\n            type=\"datetime-local\"\n            value={postDraft.eventDetails?.endDate ? \n              format(new Date(postDraft.eventDetails.endDate), \"yyyy-MM-dd'T'HH:mm\") :\n              format(new Date(Date.now() + 3600000), \"yyyy-MM-dd'T'HH:mm\")\n            }\n            onChange={(e) => {\n              const eventDetails = {\n                title: postDraft.eventDetails?.title || postDraft.title || '',\n                organizer: postDraft.eventDetails?.organizer || '',\n                startDate: postDraft.eventDetails?.startDate || new Date().toISOString(),\n                endDate: new Date(e.target.value).toISOString(),\n                location: getLocationObject(),\n                maxTickets: Number(postDraft.eventDetails?.maxTickets || 0),\n                price: Number(postDraft.eventDetails?.price || 0)\n              };\n              handleUpdateDraft({ eventDetails });\n            }}\n            className=\"mt-1 block w-full rounded-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">Location Type</label>\n          <div className=\"flex space-x-2\">\n            <button\n              type=\"button\"\n              onClick={() => handleLocationTypeChange('PHYSICAL')}\n              className={clsx(\n                buttonClass,\n                locationType === 'PHYSICAL' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n              )}\n            >\n              Physical\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => handleLocationTypeChange('VIRTUAL')}\n              className={clsx(\n                buttonClass,\n                locationType === 'VIRTUAL' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n              )}\n            >\n              Virtual\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => handleLocationTypeChange('HYBRID')}\n              className={clsx(\n                buttonClass,\n                locationType === 'HYBRID' ? selectedBtnClass : 'text-gray-400 hover:bg-gray-700/30'\n              )}\n            >\n              Hybrid\n            </button>\n          </div>\n        </div>\n\n        {(locationType === 'PHYSICAL' || locationType === 'HYBRID') && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300\">Physical Location</label>\n            <input\n              type=\"text\"\n              value={getLocationObject().physical || ''}\n              onChange={fixPhysicalLocation}\n              placeholder=\"Enter physical address\"\n              className={inputClass}\n            />\n          </div>\n        )}\n\n        {(locationType === 'VIRTUAL' || locationType === 'HYBRID') && (\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300\">Virtual Meeting Link</label>\n            <input\n              type=\"text\"\n              value={getLocationObject().virtual || ''}\n              onChange={fixVirtualLocation}\n              placeholder=\"Enter meeting link\"\n              className={inputClass}\n            />\n          </div>\n        )}\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Maximum Attendees</label>\n          <input\n            type=\"number\"\n            value={Number(postDraft.eventDetails?.maxTickets || 0)}\n            onChange={fixMaxTickets}\n            placeholder=\"0 for unlimited\"\n            min=\"0\"\n            className={inputClass}\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Ticket Price (ETH)</label>\n          <input\n            type=\"number\"\n            value={Number(postDraft.eventDetails?.price || 0)}\n            onChange={fixPrice}\n            placeholder=\"0 for free\"\n            min=\"0\"\n            step=\"0.01\"\n            className={inputClass}\n          />\n          <p className=\"mt-1 text-xs text-gray-500\">Leave as 0 for free events</p>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPollFields = () => {\n    const [newOption, setNewOption] = useState('');\n    const currentOptions = postDraft.pollDetails?.options || [];\n    \n    const handleAddOption = () => {\n      if (!newOption.trim()) return;\n      \n      const newPollOption: PollOption = {\n        id: Date.now().toString(),\n        text: newOption.trim(),\n        votes: 0\n      };\n      \n      handleUpdateDraft({\n        pollDetails: {\n          options: [...currentOptions, newPollOption],\n          endDate: postDraft.pollDetails?.endDate || new Date().toISOString(),\n          allowMultipleChoices: postDraft.pollDetails?.allowMultipleChoices ?? false,\n          requireVerification: postDraft.pollDetails?.requireVerification ?? false\n        }\n      });\n      setNewOption('');\n    };\n\n    const handleRemoveOption = (index: number) => {\n      const newOptions = currentOptions.filter(filterByIndex(index));\n      handleUpdateDraft({\n        pollDetails: {\n          options: newOptions,\n          endDate: postDraft.pollDetails?.endDate || new Date().toISOString(),\n          allowMultipleChoices: postDraft.pollDetails?.allowMultipleChoices ?? false,\n          requireVerification: postDraft.pollDetails?.requireVerification ?? false\n        }\n      });\n    };\n\n    const fixPollEndDate = (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleUpdateDraft({\n        pollDetails: {\n          options: postDraft.pollDetails?.options || [],\n          ...postDraft.pollDetails,\n          endDate: e.target.value\n        }\n      });\n    };\n\n    const fixPollMultipleChoices = (e: React.ChangeEvent<HTMLInputElement>) => {\n      handleUpdateDraft({\n        pollDetails: {\n          options: postDraft.pollDetails?.options || [],\n          ...postDraft.pollDetails,\n          allowMultipleChoices: e.target.checked\n        }\n      });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Poll Options</label>\n          <div className=\"space-y-2 mt-2\">\n            {currentOptions.map((option: PollOption, index: number) => (\n              <div key={option.id} className=\"flex items-center space-x-2\">\n                <input\n                  type=\"text\"\n                  value={option.text}\n                  onChange={(e) => {\n                    const newOptions = [...currentOptions];\n                    newOptions[index] = {\n                      ...option,\n                      text: e.target.value\n                    };\n                    handleUpdateDraft({\n                      pollDetails: {\n                        options: newOptions,\n                        endDate: postDraft.pollDetails?.endDate || new Date().toISOString(),\n                        allowMultipleChoices: postDraft.pollDetails?.allowMultipleChoices ?? false,\n                        requireVerification: postDraft.pollDetails?.requireVerification ?? false\n                      }\n                    });\n                  }}\n                  className={inputClass}\n                  placeholder={`Option ${index + 1}`}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => handleRemoveOption(index)}\n                  className={clsx(actionBtnClass, \"text-red-500\")}\n                >\n                  <Trash className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"flex mt-2\">\n            <input\n              type=\"text\"\n              value={newOption}\n              onChange={(e) => setNewOption(e.target.value)}\n              className=\"flex-1 rounded-l-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"Add new option\"\n            />\n            <button\n              type=\"button\"\n              onClick={handleAddOption}\n              disabled={currentOptions.length >= 10 || !newOption.trim()}\n              className={clsx(\n                \"px-3 py-2 bg-blue-600 text-white rounded-r-md disabled:opacity-50\",\n                currentOptions.length < 10 && newOption.trim() && \"hover:bg-blue-700\"\n              )}\n            >\n              <Plus className=\"w-4 h-4\" />\n            </button>\n          </div>\n          {currentOptions.length >= 10 && (\n            <p className=\"text-xs text-red-400 mt-1\">Maximum 10 options allowed</p>\n          )}\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">End Date</label>\n          <input\n            type=\"datetime-local\"\n            value={postDraft.pollDetails?.endDate || ''}\n            onChange={fixPollEndDate}\n            className={inputClass}\n            required\n          />\n        </div>\n        \n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"allowMultipleChoices\"\n            checked={postDraft.pollDetails?.allowMultipleChoices || false}\n            onChange={fixPollMultipleChoices}\n            className=\"h-4 w-4 bg-gray-800 border-gray-700 text-blue-600 focus:ring-blue-500 rounded\"\n          />\n          <label htmlFor=\"allowMultipleChoices\" className=\"ml-2 block text-sm text-gray-300\">\n            Allow users to select multiple options\n          </label>\n        </div>\n      </div>\n    );\n  };\n\n  const renderProjectFields = () => {\n    const handleRemoveMilestone = (index: number) => {\n      const newMilestones = (postDraft.projectDetails?.milestones || []).filter(filterByIndex(index));\n      handleUpdateDraft({\n        projectDetails: {\n          ...postDraft.projectDetails,\n          milestones: newMilestones\n        }\n      });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Project Status</label>\n          <select\n            value={postDraft.projectDetails?.status || 'PLANNING'}\n            onChange={(e) => handleUpdateDraft({\n              projectDetails: {\n                ...postDraft.projectDetails,\n                status: e.target.value as 'PLANNING' | 'IN_PROGRESS' | 'COMPLETED'\n              }\n            })}\n            className={inputClass}\n          >\n            <option value=\"PLANNING\">Planning</option>\n            <option value=\"IN_PROGRESS\">In Progress</option>\n            <option value=\"COMPLETED\">Completed</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Budget (Optional)</label>\n          <div className=\"mt-1 relative rounded-md shadow-sm\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <span className=\"text-gray-400 sm:text-sm\">ETH</span>\n            </div>\n            <input\n              type=\"text\"\n              value={postDraft.projectDetails?.budget || ''}\n              onChange={(e) => handleUpdateDraft({\n                projectDetails: {\n                  ...postDraft.projectDetails,\n                  budget: e.target.value\n                }\n              })}\n              className=\"pl-14 block w-full rounded-md bg-gray-800 border-gray-700 text-white shadow-sm focus:border-blue-500 focus:ring-blue-500\"\n              placeholder=\"0.00\"\n            />\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Team Members (Optional)</label>\n          <input\n            type=\"text\"\n            value={postDraft.projectDetails?.team?.join(', ') || ''}\n            onChange={(e) => handleUpdateDraft({\n              projectDetails: {\n                ...postDraft.projectDetails,\n                team: e.target.value.split(',').map(item => item.trim()).filter(Boolean)\n              }\n            })}\n            className={inputClass}\n            placeholder=\"Enter comma-separated addresses\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">Milestones</label>\n          <div className=\"space-y-4\">\n            {(postDraft.projectDetails?.milestones || []).map((milestone: Milestone, index: number) => (\n              <div key={index} className=\"p-3 border border-gray-700 bg-gray-800/50 rounded-md\">\n                <div className=\"flex justify-between mb-2\">\n                  <h4 className=\"text-sm font-medium text-gray-300\">Milestone {index + 1}</h4>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveMilestone(index)}\n                    className={clsx(actionBtnClass, \"text-red-500\")}\n                  >\n                    <Trash className=\"w-4 h-4\" />\n                  </button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div>\n                    <label className=\"block text-xs text-gray-400\">Title</label>\n                    <input\n                      type=\"text\"\n                      value={milestone.title}\n                      onChange={(e) => {\n                        const newMilestones = [...(postDraft.projectDetails?.milestones || [])];\n                        newMilestones[index] = {\n                          ...milestone,\n                          title: e.target.value\n                        };\n                        handleUpdateDraft({\n                          projectDetails: {\n                            ...postDraft.projectDetails,\n                            milestones: newMilestones\n                          }\n                        });\n                      }}\n                      className={inputClass}\n                      placeholder=\"Milestone title\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <label className=\"block text-xs text-gray-400\">Due Date</label>\n                      <input\n                        type=\"date\"\n                        value={milestone.dueDate || ''}\n                        onChange={(e) => {\n                          const newMilestones = [...(postDraft.projectDetails?.milestones || [])];\n                          newMilestones[index] = {\n                            ...milestone,\n                            dueDate: e.target.value\n                          };\n                          handleUpdateDraft({\n                            projectDetails: {\n                              ...postDraft.projectDetails,\n                              milestones: newMilestones\n                            }\n                          });\n                        }}\n                        className={inputClass}\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-xs text-gray-400\">Status</label>\n                      <div className=\"mt-1 flex items-center\">\n                        <input\n                          type=\"checkbox\"\n                          id={`milestone-${index}-completed`}\n                          checked={milestone.completed || false}\n                          onChange={(e) => {\n                            const newMilestones = [...(postDraft.projectDetails?.milestones || [])];\n                            newMilestones[index] = {\n                              ...milestone,\n                              completed: e.target.checked\n                            };\n                            handleUpdateDraft({\n                              projectDetails: {\n                                ...postDraft.projectDetails,\n                                milestones: newMilestones\n                              }\n                            });\n                          }}\n                          className=\"h-4 w-4 bg-gray-800 border-gray-700 text-blue-600 focus:ring-blue-500 rounded\"\n                        />\n                        <label htmlFor={`milestone-${index}-completed`} className=\"ml-2 block text-sm text-gray-300\">\n                          Completed\n                        </label>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            <button\n              type=\"button\"\n              onClick={() => handleUpdateDraft({\n                projectDetails: {\n                  ...postDraft.projectDetails,\n                  milestones: [\n                    ...(postDraft.projectDetails?.milestones || []),\n                    { title: '', dueDate: '' }\n                  ]\n                }\n              })}\n              className=\"w-full py-2 border-2 border-dashed border-gray-700 rounded-md flex items-center justify-center text-gray-400 hover:text-gray-300 hover:border-gray-600 bg-gray-800/30\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              <span>Add Milestone</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderResourceFields = () => {\n    const handleRemoveAttachment = (index: number) => {\n      const newAttachments = (postDraft.resourceDetails?.attachments || []).filter(filterByIndex(index));\n      handleUpdateDraft({\n        resourceDetails: {\n          ...postDraft.resourceDetails,\n          attachments: newAttachments\n        }\n      });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Resource Type</label>\n          <select\n            value={postDraft.resourceDetails?.type || 'DOCUMENT'}\n            onChange={(e) => handleUpdateDraft({\n              resourceDetails: {\n                ...postDraft.resourceDetails,\n                type: e.target.value as 'DOCUMENT' | 'LINK' | 'CODE' | 'OTHER'\n              }\n            })}\n            className={inputClass}\n          >\n            <option value=\"DOCUMENT\">Document</option>\n            <option value=\"LINK\">Link</option>\n            <option value=\"CODE\">Code</option>\n            <option value=\"OTHER\">Other</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Category (Optional)</label>\n          <input\n            type=\"text\"\n            value={postDraft.resourceDetails?.category || ''}\n            onChange={(e) => handleUpdateDraft({\n              resourceDetails: {\n                ...postDraft.resourceDetails,\n                category: e.target.value\n              }\n            })}\n            className={inputClass}\n            placeholder=\"E.g. Tutorial, Reference, Guide\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300\">Version (Optional)</label>\n          <input\n            type=\"text\"\n            value={postDraft.resourceDetails?.version || ''}\n            onChange={(e) => handleUpdateDraft({\n              resourceDetails: {\n                ...postDraft.resourceDetails,\n                version: e.target.value\n              }\n            })}\n            className={inputClass}\n            placeholder=\"E.g. v1.0.0\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">Attachments</label>\n          \n          {(postDraft.resourceDetails?.attachments || []).length > 0 && (\n            <div className=\"mb-3 space-y-2\">\n              {(postDraft.resourceDetails?.attachments || []).map((attachment: Attachment, index: number) => (\n                <div key={index} className=\"flex items-center justify-between p-2 bg-gray-800 rounded-md\">\n                  <div className=\"flex items-center\">\n                    <div className=\"ml-3\">\n                      <p className=\"text-sm font-medium text-white\">{attachment.name}</p>\n                      <p className=\"text-xs text-gray-400\">{Math.round(attachment.size / 1024)} KB</p>\n                    </div>\n                  </div>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveAttachment(index)}\n                    className={clsx(actionBtnClass, \"text-red-500\")}\n                  >\n                    <Trash className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-dashed border-gray-700 rounded-md bg-gray-800/50\">\n            <div className=\"space-y-1 text-center\">\n              <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <div className=\"flex text-sm text-gray-400 justify-center\">\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"relative cursor-pointer rounded-md font-medium text-blue-400 hover:text-blue-300 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500 focus-within:ring-offset-gray-800\"\n                >\n                  <span>Upload a file</span>\n                  <input\n                    id=\"file-upload\"\n                    name=\"file-upload\"\n                    type=\"file\"\n                    className=\"sr-only\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) {\n                        // TODO: Implement file upload to IPFS or other storage\n                        handleUpdateDraft({\n                          resourceDetails: {\n                            ...postDraft.resourceDetails,\n                            attachments: [\n                              ...(postDraft.resourceDetails?.attachments || []),\n                              {\n                                name: file.name,\n                                size: file.size,\n                                type: file.type,\n                                url: URL.createObjectURL(file)\n                              }\n                            ]\n                          }\n                        });\n                      }\n                    }}\n                  />\n                </label>\n              </div>\n              <p className=\"text-xs text-gray-500\">PDF, DOC, or any other file up to 10MB</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderMediaFields = () => {\n    const handleRemoveMedia = (index: number) => {\n      const newMedia = postDraft.mediaContent?.filter(filterByIndex(index));\n      handleUpdateDraft({ mediaContent: newMedia });\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-300 mb-2\">Media Files</label>\n          \n          {postDraft.mediaContent && postDraft.mediaContent.length > 0 && (\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              {postDraft.mediaContent.map((media: MediaContent, index: number) => (\n                <div key={index} className=\"relative rounded-lg overflow-hidden\">\n                  {media.type === 'image' && (\n                    <img src={media.url} alt={media.name} className=\"w-full h-32 object-cover rounded-lg\" />\n                  )}\n                  {media.type === 'video' && (\n                    <video src={media.url} className=\"w-full h-32 object-cover rounded-lg\" />\n                  )}\n                  {(media.type as ExtendedMediaType) === 'audio' && (\n                    <div className=\"w-full h-32 bg-gray-800 flex items-center justify-center rounded-lg\">\n                      <audio src={media.url} controls className=\"w-full max-w-[180px]\" />\n                    </div>\n                  )}\n                  <div className=\"absolute inset-0 bg-black bg-opacity-60 opacity-0 hover:opacity-100 transition-opacity flex items-center justify-center\">\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveMedia(index)}\n                      className=\"p-2 bg-red-600 text-white rounded-full hover:bg-red-700\"\n                    >\n                      <Trash className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white text-xs p-1 truncate\">\n                    {media.name}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          <div className=\"mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-dashed border-gray-700 rounded-md bg-gray-800/50\">\n            <div className=\"space-y-1 text-center\">\n              <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <div className=\"flex text-sm text-gray-400 justify-center\">\n                <label\n                  htmlFor=\"media-upload\"\n                  className=\"relative cursor-pointer rounded-md font-medium text-blue-400 hover:text-blue-300 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500 focus-within:ring-offset-gray-800\"\n                >\n                  <span>Upload media</span>\n                  <input\n                    id=\"media-upload\"\n                    name=\"media-upload\"\n                    type=\"file\"\n                    accept=\"image/*,video/*,audio/*\"\n                    multiple\n                    className=\"sr-only\"\n                    onChange={(e) => {\n                      const files = Array.from(e.target.files || []);\n                      if (files.length === 0) return;\n                      \n                      // TODO: Implement proper file upload to IPFS or other storage\n                      const mediaFiles = files.map(file => {\n                        let mediaType: 'image' | 'video' = 'image';\n                        if (file.type.startsWith('image/')) {\n                          mediaType = 'image';\n                        } else if (file.type.startsWith('video/')) {\n                          mediaType = 'video';\n                        }\n                        \n                        return {\n                          type: mediaType,\n                          url: URL.createObjectURL(file),\n                          name: file.name,\n                          size: file.size\n                        } as MediaContent;\n                      });\n                      \n                      handleUpdateDraft({\n                        mediaContent: [\n                          ...(postDraft.mediaContent || []),\n                          ...mediaFiles\n                        ]\n                      });\n                    }}\n                  />\n                </label>\n              </div>\n              <p className=\"text-xs text-gray-500\">Images, videos, or audio files up to 50MB</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const handleMediaUpload = (file: File) => {\n    if (!file) return;\n\n    const fileType = file.type.startsWith('image/') ? 'image' as const : \n                    file.type.startsWith('video/') ? 'video' as const : null;\n                    \n    if (!fileType) {\n      console.error('Unsupported file type');\n      return;\n    }\n\n    const newMedia: MediaContent = {\n      type: fileType,\n      url: URL.createObjectURL(file),\n      name: file.name,\n      size: file.size\n    };\n\n    const currentMedia = postDraft.mediaContent || [];\n    handleUpdateDraft({\n      mediaContent: [...currentMedia, newMedia]\n    });\n  };\n\n  // Add this helper function for filtering arrays\n  const filterByIndex = (index: number) => (_: unknown, i: number) => i !== index;\n\n  // Update the switch statement to use the correct types\n  switch (type) {\n    case POST_TYPE_MAPPING[PostType.EVENT]:\n      return renderEventFields();\n    case POST_TYPE_MAPPING[PostType.POLL]:\n      return renderPollFields();\n    case 'project':\n      return renderProjectFields();\n    case 'resource':\n      return renderResourceFields();\n    case 'rich_media':\n      return renderMediaFields();\n    default:\n      return null;\n  }\n};\n\nexport default PostTypeFields; ","import React, { useState, useRef, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Dialog, Transition } from '@headlessui/react';\nimport { X, AlignLeft, ImageIcon, CalendarDays, BarChartHorizontal, Briefcase, BookOpen } from 'lucide-react';\nimport { PostType } from '../../types/post';\nimport { \n  createPost, \n  setCreatingPost, \n  setPostType, \n  updateDraft,\n  resetDraft,\n  selectPostDraft,\n  selectCreatingPost,\n  selectPostsError\n} from '../../store/slices/postsSlice';\nimport { AppDispatch } from '../../store/store';\nimport clsx from 'clsx';\nimport PostTypeFields from '../posts/PostTypeFields';\n\n// Define post type mappings that match the expected strings in PostTypeFields\nconst POST_TYPE_MAPPING = {\n  [PostType.TEXT]: 'text',\n  [PostType.IMAGE]: 'image',\n  [PostType.VIDEO]: 'video',\n  [PostType.LINK]: 'link',\n  [PostType.EVENT]: 'event',\n  [PostType.POLL]: 'poll',\n} as const;\n\n// Type for the string values used by PostTypeFields\ntype PostTypeString = typeof POST_TYPE_MAPPING[keyof typeof POST_TYPE_MAPPING];\n\n// Type definitions for the component props\nexport interface PostCreatorProps {\n  // Display mode\n  mode?: 'modal' | 'inline' | 'dialog';\n  \n  // Modal/Dialog specific props\n  isOpen?: boolean;\n  onClose?: () => void;\n  onCancel?: () => void;\n  \n  // Common props\n  tribeId: string | number;\n  onSuccess?: (postId: string) => void;\n  onError?: (error: Error) => void;\n  \n  // Optional customization\n  className?: string;\n  availableTypes?: PostType[];\n  defaultType?: PostType;\n}\n\n// Define the location type structure\ninterface EventLocation {\n  type: 'PHYSICAL' | 'VIRTUAL' | 'HYBRID';\n  physical?: string;\n  virtual?: string;\n}\n\n// Post type options with their UI representation\nexport const postTypeOptions = [\n  { type: PostType.TEXT, icon: AlignLeft, label: 'Text', color: '#3b82f6', description: 'Share your thoughts with the community' },\n  { type: PostType.IMAGE, icon: ImageIcon, label: 'Media', color: '#ec4899', description: 'Share images, videos, or audio' },\n  { type: PostType.EVENT, icon: CalendarDays, label: 'Event', color: '#f59e0b', description: 'Organize meetups or virtual events' },\n  { type: PostType.POLL, icon: BarChartHorizontal, label: 'Poll', color: '#8b5cf6', description: 'Get community feedback through voting' },\n  { type: PostType.LINK, icon: Briefcase, label: 'Link', color: '#6366f1', description: 'Share links or resources' },\n  { type: PostType.VIDEO, icon: BookOpen, label: 'Video', color: '#ef4444', description: 'Share videos with the community' }\n];\n\n/**\n * A unified post creation component that can render in different modes:\n * - modal: a modal dialog\n * - inline: directly in the page flow\n * - dialog: a custom dialog UI\n */\nexport const PostCreator: React.FC<PostCreatorProps> = ({\n  mode = 'modal',\n  isOpen = false,\n  onClose,\n  onCancel,\n  tribeId,\n  onSuccess,\n  onError,\n  className = '',\n  availableTypes = Object.values(PostType).filter(t => typeof t === 'number'),\n  defaultType = PostType.TEXT\n}) => {\n  // Redux hooks\n  const dispatch = useDispatch<AppDispatch>();\n  const postDraft = useSelector(selectPostDraft);\n  const isReduxOpen = useSelector(selectCreatingPost);\n  const error = useSelector(selectPostsError);\n  \n  // Local state\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  // Create refs for focus management\n  const titleInputRef = useRef<HTMLInputElement>(null);\n  const closeButtonRef = useRef<HTMLButtonElement>(null);\n  const submitButtonRef = useRef<HTMLButtonElement>(null);\n\n  // Determine effective open state\n  const effectiveIsOpen = mode === 'modal' ? (isOpen || isReduxOpen) : isOpen;\n\n  // Handle closing the creator\n  const handleClose = () => {\n    if (mode === 'modal') {\n      dispatch(setCreatingPost(false));\n    } else {\n      onClose?.();\n      onCancel?.();\n    }\n    dispatch(resetDraft());\n    setValidationError(null);\n    setIsSubmitting(false);\n  };\n\n  // Handle selecting a post type\n  const handleSelectType = (type: PostType) => {\n    dispatch(setPostType(type));\n    \n    // Initialize specific fields based on type\n    switch (type) {\n      case PostType.TEXT:\n        // Initialize text post with basic metadata\n        dispatch(updateDraft({\n          type: String(PostType.TEXT) as any,\n          content: postDraft.content || '',\n          title: postDraft.title || ''\n        }));\n        break;\n      case PostType.EVENT:\n        if (!postDraft.eventDetails) {\n          // Create event fields with appropriate types\n          dispatch(updateDraft({\n            eventDetails: {\n              title: postDraft.title || '', // Use the current title or empty string\n              organizer: '', // Required field for EventDetails\n              startDate: new Date().toISOString(),\n              endDate: new Date(Date.now() + 3600000).toISOString(),\n              location: {\n                type: 'PHYSICAL',\n                physical: ''\n              } as any, // Type assertion to avoid complex type issues\n              maxTickets: 0 as any, // Use type assertion to avoid type errors\n              price: 0 as any  // Use type assertion to avoid type errors\n            }\n          }));\n        }\n        break;\n      case PostType.POLL:\n        if (!postDraft.pollDetails) {\n          dispatch(updateDraft({\n            pollDetails: {\n              options: [\n                { id: Date.now().toString(), text: '', votes: 0 },\n                { id: (Date.now() + 1).toString(), text: '', votes: 0 }\n              ],\n              endDate: new Date(Date.now() + 86400000).toISOString(),\n              allowMultipleChoices: false,\n              requireVerification: false\n            }\n          }));\n        }\n        break;\n      case PostType.LINK:\n        if (!postDraft.resourceDetails) {\n          dispatch(updateDraft({\n            resourceDetails: {\n              type: 'LINK',\n              attachments: []\n            }\n          }));\n        }\n        break;\n      case PostType.IMAGE:\n      case PostType.VIDEO:\n        if (!postDraft.mediaContent || postDraft.mediaContent.length === 0) {\n          dispatch(updateDraft({\n            mediaContent: []\n          }));\n        }\n        break;\n    }\n    \n    // Focus the title input after selecting a post type\n    setTimeout(() => {\n      titleInputRef.current?.focus();\n    }, 0);\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setValidationError(null);\n    \n    if (!postDraft.content?.trim()) {\n      setValidationError('Please enter content for your post');\n      return;\n    }\n    \n    try {\n      setIsSubmitting(true);\n      \n      // Prepare post data\n      const postData: any = {\n        ...postDraft,\n        // Ensure type is properly set for TEXT posts\n        type: postDraft.type === undefined ? PostType.TEXT : postDraft.type,\n        tribeId: String(tribeId),\n      };\n      \n      // For text posts, ensure we have the right metadata structure\n      if (Number(postData.type) === PostType.TEXT) {\n        postData.content = postDraft.content || '';\n        postData.createdAt = new Date().toISOString();\n      }\n      \n      console.log('Submitting post:', postData);\n      \n      // Submit post\n      const result = await dispatch(createPost(postData)).unwrap();\n      \n      if (result) {\n        // Reset form\n        dispatch(resetDraft());\n        \n        // Close modal if in modal mode\n        if (mode === 'modal') {\n          dispatch(setCreatingPost(false));\n        }\n        \n        // Call success callback\n        if (onSuccess) {\n          onSuccess(result.id);\n        }\n      }\n    } catch (error: any) {\n      setValidationError(error.message || 'Failed to create post');\n      if (onError) {\n        onError(error);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  // Get the type string for PostTypeFields\n  const postTypeString = useMemo(() => {\n    // If it's a number type from the enum\n    if (typeof postDraft.type === 'number') {\n      return POST_TYPE_MAPPING[postDraft.type as keyof typeof POST_TYPE_MAPPING] || 'text';\n    }\n    \n    // If it's already a string\n    if (typeof postDraft.type === 'string') {\n      const normalizedType = postDraft.type.toLowerCase();\n      if (Object.values(POST_TYPE_MAPPING).some(val => val === normalizedType)) {\n        return normalizedType as PostTypeString;\n      }\n    }\n    \n    // Default fallback\n    return 'text' as PostTypeString;\n  }, [postDraft.type]);\n\n  // Content to render inside any container\n  const renderContent = () => (\n    <div className=\"space-y-4\">\n      {/* Post Type Selection */}\n      <div className=\"flex flex-wrap gap-2\" role=\"radiogroup\" aria-label=\"Post type\">\n        {postTypeOptions\n          .filter(option => typeof option.type === 'number' && availableTypes.includes(option.type))\n          .map(({ type, icon: Icon, label, color }) => {\n            // Check if this type is currently selected\n            const isSelected = Number(postDraft.type) === type;\n            \n            return (\n              <button\n                key={type}\n                type=\"button\"\n                role=\"radio\"\n                aria-checked={isSelected}\n                onClick={() => handleSelectType(type)}\n                className={clsx(\n                  \"px-3 py-2 rounded-lg flex items-center gap-2 transition-colors\",\n                  isSelected\n                    ? \"bg-opacity-20 ring-2 text-white\" \n                    : \"bg-black/10 text-gray-300 hover:bg-black/20\"\n                )}\n                style={{ \n                  backgroundColor: isSelected ? `${color}20` : undefined,\n                  borderColor: isSelected ? color : undefined,\n                  boxShadow: isSelected ? `0 0 0 1px ${color}` : undefined\n                }}\n                tabIndex={0}\n              >\n                <Icon size={16} style={{ color: isSelected ? color : undefined }} />\n                <span>{label}</span>\n              </button>\n            );\n          })}\n      </div>\n\n      {/* Errors */}\n      {(validationError || error) && (\n        <div className=\"p-3 bg-red-500/20 border border-red-500/50 rounded-lg text-red-200\" role=\"alert\">\n          {validationError || error}\n        </div>\n      )}\n\n      {/* Title Field */}\n      <div>\n        <input\n          ref={titleInputRef}\n          type=\"text\"\n          placeholder=\"Post title\"\n          value={postDraft.title || ''}\n          onChange={(e) => dispatch(updateDraft({ title: e.target.value }))}\n          className=\"w-full px-4 py-3 rounded-lg bg-black/20 text-white border border-white/10 focus:ring-2 focus:ring-accent focus:border-transparent\"\n          disabled={isSubmitting}\n          tabIndex={0}\n        />\n      </div>\n\n      {/* Content Field */}\n      <div>\n        <textarea\n          placeholder=\"What's on your mind?\"\n          value={postDraft.content || ''}\n          onChange={(e) => dispatch(updateDraft({ content: e.target.value }))}\n          className=\"w-full px-4 py-3 rounded-lg bg-black/20 text-white border border-white/10 focus:ring-2 focus:ring-accent focus:border-transparent min-h-[120px] resize-none\"\n          disabled={isSubmitting}\n          tabIndex={0}\n        />\n      </div>\n\n      {/* Dynamic Type-specific Fields */}\n      <div className=\"pt-2 border-t border-gray-700/30\">\n        <PostTypeFields type={postTypeString} />\n      </div>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end pt-2 border-t border-gray-700/30\">\n        <button\n          ref={submitButtonRef}\n          type=\"submit\"\n          disabled={isSubmitting}\n          className={clsx(\n            \"px-4 py-2 rounded-lg font-medium\",\n            isSubmitting\n              ? \"bg-accent/50 cursor-not-allowed\"\n              : \"bg-accent hover:bg-accent/90 text-black\"\n          )}\n          tabIndex={0}\n        >\n          {isSubmitting ? \"Creating...\" : \"Create Post\"}\n        </button>\n      </div>\n    </div>\n  );\n\n  // Render based on the selected mode\n  if (mode === 'inline') {\n    return (\n      <form onSubmit={handleSubmit} className={className}>\n        {renderContent()}\n      </form>\n    );\n  } else if (mode === 'dialog') {\n    return (\n      <div className={`bg-card rounded-xl shadow-xl p-6 ${className}`}>\n        <form onSubmit={handleSubmit}>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold\">Create Post</h2>\n            {onClose && (\n              <button \n                type=\"button\" \n                onClick={handleClose}\n                className=\"text-gray-400 hover:text-white\"\n                tabIndex={0}\n              >\n                <X size={20} />\n              </button>\n            )}\n          </div>\n          {renderContent()}\n        </form>\n      </div>\n    );\n  } else {\n    // Modal mode (default)\n    return (\n      <Transition appear show={effectiveIsOpen} as={React.Fragment}>\n        <Dialog \n          as=\"div\"\n          className=\"fixed inset-0 z-50 overflow-y-auto\"\n          onClose={handleClose}\n          initialFocus={titleInputRef}\n        >\n          {/* The backdrop, rendered as a fixed sibling to the panel container */}\n          <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm\" aria-hidden=\"true\" />\n          \n          {/* Full-screen container to center the panel */}\n          <div className=\"fixed inset-0 flex items-center justify-center p-4\">\n            <Transition.Child\n              as={React.Fragment}\n              enter=\"ease-out duration-300\"\n              enterFrom=\"opacity-0 scale-95\"\n              enterTo=\"opacity-100 scale-100\"\n              leave=\"ease-in duration-200\"\n              leaveFrom=\"opacity-100 scale-100\"\n              leaveTo=\"opacity-0 scale-95\"\n            >\n              <Dialog.Panel className=\"w-full max-w-2xl overflow-hidden rounded-xl bg-gray-900 border border-gray-800 shadow-xl\">\n                <div className=\"p-6\">\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <Dialog.Title\n                      as=\"h3\"\n                      className=\"text-xl font-medium leading-6 text-white\"\n                    >\n                      Create Post\n                    </Dialog.Title>\n                    <button\n                      type=\"button\"\n                      ref={closeButtonRef}\n                      className=\"p-2 rounded-full focus:outline-none hover:bg-gray-800\"\n                      onClick={handleClose}\n                      tabIndex={0}\n                    >\n                      <X className=\"w-5 h-5 text-gray-400\" />\n                    </button>\n                  </div>\n                  \n                  <form onSubmit={handleSubmit}>\n                    {renderContent()}\n                  </form>\n                </div>\n              </Dialog.Panel>\n            </Transition.Child>\n          </div>\n        </Dialog>\n      </Transition>\n    );\n  }\n};\n\nexport default PostCreator; ","import React from 'react';\nimport PostCreator from '../post/PostCreator';\nimport { useSelector } from 'react-redux';\nimport { selectCreatingPost } from '../../store/slices/postsSlice';\n\ninterface CreatePostModalProps {\n  tribeId: string;\n}\n\n/**\n * Backward-compatible CreatePostModal that uses the new PostCreator component\n */\nconst CreatePostModal: React.FC<CreatePostModalProps> = ({ tribeId }) => {\n  const isOpen = useSelector(selectCreatingPost);\n  \n  return (\n    <PostCreator \n      mode=\"modal\"\n      isOpen={isOpen}\n      tribeId={tribeId}\n    />\n  );\n};\n\nexport default CreatePostModal; ","import { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { HomeIcon, PlusCircle, UserCircle, X, FileText, Users, MessageSquare, Image } from 'lucide-react';\nimport { useDispatch } from 'react-redux';\nimport { setCreatingPost } from '../store/slices/postsSlice';\nimport { TribeCreationForm } from './tribe/TribeCreationForm';\nimport CreatePostModal from './posts/CreatePostModal';\n\nexport function BottomNav() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [showMenu, setShowMenu] = useState(false);\n  const [showTribeModal, setShowTribeModal] = useState(false);\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\n  \n  const creationOptions = [\n    {\n      icon: <FileText className=\"w-6 h-6\" />,\n      label: 'Create Post',\n      action: () => {\n        setShowMenu(false);\n        dispatch(setCreatingPost(true));\n      }\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      label: 'Create Tribe',\n      action: () => {\n        setShowMenu(false);\n        setShowTribeModal(true);\n      }\n    }\n  ];\n  \n  const handleAddClick = () => {\n    setShowMenu(!showMenu);\n  };\n  \n  const handleTribeCreationSuccess = (tribeId: number) => {\n    setShowTribeModal(false);\n    navigate(`/tribes/${tribeId}`);\n  };\n\n  const handleHomeClick = () => {\n    if (location.pathname !== '/') {\n      navigate('/');\n    }\n  };\n\n  return (\n    <>\n      <nav className=\"fixed bottom-0 left-0 right-0 z-40 shadow-md\" style={{ backgroundColor: 'var(--chain-bg)' }}>\n        <div className=\"flex items-center justify-around py-3\">\n          <button\n            onClick={handleHomeClick}\n            className={`flex flex-col items-center space-y-1 ${\n              location.pathname === '/' ? 'text-theme-primary' : 'text-text-secondary'\n            }`}\n          >\n            <HomeIcon className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Home</span>\n          </button>\n\n          <button\n            onClick={handleAddClick}\n            className=\"flex flex-col items-center space-y-1 text-text-secondary hover:text-theme-primary\"\n          >\n            <PlusCircle className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Create</span>\n          </button>\n\n          <button\n            onClick={() => navigate('/profile')}\n            className={`flex flex-col items-center space-y-1 ${\n              location.pathname === '/profile' ? 'text-theme-primary' : 'text-text-secondary'\n            }`}\n          >\n            <UserCircle className=\"w-6 h-6\" />\n            <span className=\"text-xs\">Profile</span>\n          </button>\n        </div>\n      </nav>\n\n      {/* Main creation options modal */}\n      {showMenu && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowMenu(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-md rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-bold text-white\">Create</h2>\n                <button onClick={() => setShowMenu(false)} className=\"text-text-secondary hover:text-white\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {creationOptions.map((option, index) => (\n                  <button\n                    key={index}\n                    onClick={option.action}\n                    className=\"p-4 flex flex-col items-center bg-black/20 rounded-xl hover:bg-black/30 transition-colors\"\n                  >\n                    {option.icon}\n                    <span className=\"font-medium mt-2\">{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Create Post Modal */}\n      <CreatePostModal tribeId=\"1\" /> {/* TODO: Get actual tribeId from context/route */}\n\n      {/* Tribe creation modal */}\n      {showTribeModal && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowTribeModal(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-2xl rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10 max-h-[90vh] overflow-y-auto\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"px-6 py-5\">\n              <div className=\"flex justify-between items-center mb-5\">\n                <h2 className=\"text-xl font-bold text-white\">Create Tribe</h2>\n                <button onClick={() => setShowTribeModal(false)} className=\"text-text-secondary hover:text-white transition-colors\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              <TribeCreationForm \n                onSuccess={handleTribeCreationSuccess} \n                onCancel={() => setShowTribeModal(false)} \n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Notifications Modal */}\n      {showNotificationModal && (\n        <div className=\"fixed inset-0 z-50 flex items-end justify-center sm:items-center\" onClick={() => setShowNotificationModal(false)}>\n          <div className=\"absolute inset-0 backdrop-blur-sm\" style={{ backgroundColor: 'rgba(var(--chain-bg-rgb), 0.8)' }}></div>\n          <div \n            className=\"relative w-full max-w-md rounded-t-2xl sm:rounded-xl overflow-hidden shadow-lg z-10 max-h-[90vh] overflow-y-auto\"\n            style={{ backgroundColor: 'var(--chain-bg)' }}\n            onClick={e => e.stopPropagation()}\n          >\n            <div className=\"p-4\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-bold\">Notifications</h2>\n                <button onClick={() => setShowNotificationModal(false)} className=\"text-text-secondary\">\n                  <X className=\"w-6 h-6\" />\n                </button>\n              </div>\n              \n              {/* Notification list would go here */}\n              <div className=\"text-center text-text-secondary py-8 bg-black/20 rounded-xl\">\n                You have no notifications\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","import React, { createContext, useContext, ReactNode, useState, useEffect, useCallback } from 'react';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { Tribe } from '../types/tribe';\nimport { useWallet } from '../hooks/useWallet';\n\ninterface TribesContextType {\n  sdk: TribesSDK | null;\n  isInitialized: boolean;\n  tribes: Tribe[];\n  isLoading: boolean;\n  error: string | null;\n  refreshTribes: () => Promise<void>;\n  getTribe: (tribeId: number) => Promise<Tribe | null>;\n}\n\nconst defaultContext: TribesContextType = {\n  sdk: null,\n  isInitialized: false,\n  tribes: [],\n  isLoading: false,\n  error: null,\n  refreshTribes: async () => {},\n  getTribe: async () => null\n};\n\nconst TribesContext = createContext<TribesContextType>(defaultContext);\n\ninterface TribesProviderProps {\n  children: ReactNode;\n  sdk: TribesSDK | null;\n  isInitialized: boolean;\n}\n\nexport function TribesProvider({ children, sdk, isInitialized }: TribesProviderProps) {\n  const [tribes, setTribes] = useState<Tribe[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { address } = useWallet();\n\n  const refreshTribes = useCallback(async () => {\n    if (!sdk || !isInitialized) {\n      console.log('Cannot refresh tribes: SDK not initialized');\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      console.log('Refreshing tribes...');\n      \n      // Get total tribes count\n      const count = await sdk.getTribesCount();\n      console.log(`Found ${count} tribes`);\n      \n      // Fetch all tribes\n      const allTribes: Tribe[] = [];\n      for (let i = 1; i <= count; i++) {\n        try {\n          const tribe = await sdk.getTribe(i);\n          if (tribe) {\n            allTribes.push(tribe);\n          }\n        } catch (err) {\n          console.error(`Error fetching tribe ${i}:`, err);\n        }\n      }\n      \n      setTribes(allTribes);\n      console.log('Loaded tribes:', allTribes);\n    } catch (err) {\n      console.error('Error refreshing tribes:', err);\n      setError((err as Error).message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isInitialized]);\n\n  const getTribe = useCallback(async (tribeId: number): Promise<Tribe | null> => {\n    if (!sdk || !isInitialized) {\n      console.log('Cannot get tribe: SDK not initialized');\n      return null;\n    }\n\n    try {\n      return await sdk.getTribe(tribeId);\n    } catch (err) {\n      console.error(`Error getting tribe ${tribeId}:`, err);\n      return null;\n    }\n  }, [sdk, isInitialized]);\n\n  // Load tribes on initialization and when address changes\n  useEffect(() => {\n    if (isInitialized) {\n      refreshTribes();\n    }\n  }, [isInitialized, address, refreshTribes]);\n\n  return (\n    <TribesContext.Provider \n      value={{ \n        sdk, \n        isInitialized, \n        tribes, \n        isLoading, \n        error, \n        refreshTribes,\n        getTribe\n      }}\n    >\n      {children}\n    </TribesContext.Provider>\n  );\n}\n\nexport function useTribesSDK() {\n  const context = useContext(TribesContext);\n  if (context === undefined) {\n    throw new Error('useTribesSDK must be used within a TribesProvider');\n  }\n  return context;\n} ","import { useCallback } from 'react';\nimport { Address } from 'viem';\nimport { useWallet } from './useWallet';\nimport { Tribe } from '../types/tribe';\nimport { useTribesSDK } from '../contexts/TribesContext';\n\nexport interface TribesDataHookResult {\n  // State\n  isLoading: boolean;\n  error: string | null;\n  tribes: Tribe[];\n  userTribes: number[];\n\n  // Actions\n  getTribe: (tribeId: number) => Promise<Tribe>;\n  getAllTribes: () => Promise<void>;\n  getUserTribes: (address: Address) => Promise<number[]>;\n  getMemberStatus: (tribeId: number, memberAddress: Address) => Promise<number>;\n  refreshTribes: () => Promise<void>;\n}\n\n/**\n * Hook for reading tribes data\n */\nexport function useTribesData(): TribesDataHookResult {\n  const { \n    sdk, \n    isInitialized, \n    tribes, \n    isLoading, \n    error, \n    refreshTribes: contextRefreshTribes,\n    getTribe: contextGetTribe\n  } = useTribesSDK();\n  \n  const { address } = useWallet();\n  \n  // Wrapper functions to maintain backward compatibility\n  const getTribe = useCallback(async (tribeId: number): Promise<Tribe> => {\n    const tribe = await contextGetTribe(tribeId);\n    if (!tribe) {\n      throw new Error(`Tribe ${tribeId} not found`);\n    }\n    return tribe;\n  }, [contextGetTribe]);\n\n  const getAllTribes = useCallback(async (): Promise<void> => {\n    return contextRefreshTribes();\n  }, [contextRefreshTribes]);\n  \n  const refreshTribes = useCallback(async (): Promise<void> => {\n    return contextRefreshTribes();\n  }, [contextRefreshTribes]);\n\n  // These functions are still needed for specific use cases\n  const getUserTribes = useCallback(async (userAddress: Address): Promise<number[]> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getUserTribes(userAddress);\n    } catch (err) {\n      console.error('Error getting user tribes:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  const getMemberStatus = useCallback(async (tribeId: number, memberAddress: Address): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.getMemberStatus(tribeId, memberAddress);\n    } catch (err) {\n      console.error('Error getting member status:', err);\n      throw err;\n    }\n  }, [sdk]);\n\n  return {\n    isLoading,\n    error,\n    tribes,\n    userTribes: [], // This comes from the context now\n    getTribe,\n    getAllTribes,\n    getUserTribes,\n    getMemberStatus,\n    refreshTribes\n  };\n} ","import { Tribe } from '../types/tribe';\nimport { type WalletClient } from 'viem';\n\n/**\n * Extract avatar URL from tribe metadata or return a default\n * @param tribe The tribe object\n * @param defaultAvatar Optional default avatar URL\n * @returns The avatar URL\n */\nexport function getTribeAvatar(tribe: Tribe, defaultAvatar: string = '/images/default-avatar.png'): string {\n  if (!tribe) return defaultAvatar;\n  \n  try {\n    // Try to access avatar directly if it exists in the tribe object\n    const tribeAny = tribe as any;\n    if (tribeAny.avatar && typeof tribeAny.avatar === 'string' && tribeAny.avatar.trim() !== '') {\n      console.log(`Using direct avatar for tribe ${tribe.id}:`, tribeAny.avatar);\n      return tribeAny.avatar;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n        console.log(`Successfully parsed metadata for tribe ${tribe.id}`);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n      console.log(`Using metadata object directly for tribe ${tribe.id}`);\n    }\n    \n    // Check if avatar exists in metadata and is not empty\n    if (metadata?.avatar && typeof metadata.avatar === 'string' && metadata.avatar.trim() !== '') {\n      console.log(`Found avatar in metadata for tribe ${tribe.id}:`, metadata.avatar);\n      return metadata.avatar;\n    }\n    \n    // Try fallback to a generated avatar using DiceBear API\n    if (tribe.id && tribe.name) {\n      const generatedAvatar = `https://api.dicebear.com/7.x/shapes/svg?seed=${encodeURIComponent(tribe.id)}-${encodeURIComponent(tribe.name)}`;\n      console.log(`Generated avatar for tribe ${tribe.id}:`, generatedAvatar);\n      return generatedAvatar;\n    }\n    \n    console.log(`Using default avatar for tribe ${tribe.id}`);\n    return defaultAvatar;\n  } catch (error) {\n    console.error(`Error processing avatar for tribe ${tribe.id}:`, error);\n    return defaultAvatar;\n  }\n}\n\n/**\n * Extract privacy setting from tribe metadata\n * @param tribe The tribe object\n * @returns 'public' or 'private'\n */\nexport function getTribePrivacy(tribe: Tribe): 'public' | 'private' {\n  if (!tribe) return 'public';\n  \n  try {\n    // Check for direct privacy property\n    const tribeAny = tribe as any;\n    if (tribeAny.privacy === 'private') {\n      return 'private';\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if isPrivate flag exists in metadata\n    if (metadata?.isPrivate === true) {\n      return 'private';\n    }\n    \n    // Check if privacy field exists\n    if (metadata?.privacy === 'private') {\n      return 'private';\n    }\n    \n    // Return public by default\n    return 'public';\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return 'public';\n  }\n}\n\n/**\n * Extract topics from tribe metadata\n * @param tribe The tribe object\n * @returns Array of topics\n */\nexport function getTribeTopics(tribe: Tribe): Array<{id: string, name: string, postCount?: number}> {\n  if (!tribe) return [];\n  \n  try {\n    // Check for direct topics property\n    const tribeAny = tribe as any;\n    if (Array.isArray(tribeAny.topics)) {\n      return tribeAny.topics.map((topic: any, index: number) => ({\n        id: topic.id || `topic-${index}`,\n        name: topic.name || `Topic ${index + 1}`,\n        postCount: topic.postCount || 0\n      }));\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if topics array exists in metadata\n    if (Array.isArray(metadata?.topics)) {\n      return metadata.topics.map((topic: any, index: number) => ({\n        id: topic.id || `topic-${index}`,\n        name: topic.name || `Topic ${index + 1}`,\n        postCount: topic.postCount || 0\n      }));\n    }\n    \n    return [];\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return [];\n  }\n}\n\n/**\n * Extract description from tribe metadata\n * @param tribe The tribe object\n * @returns The description\n */\nexport function getTribeDescription(tribe: Tribe): string {\n  if (!tribe) return '';\n  \n  try {\n    // Check for direct description property\n    const tribeAny = tribe as any;\n    if (tribeAny.description && typeof tribeAny.description === 'string') {\n      return tribeAny.description;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if description exists in metadata\n    if (metadata?.description && typeof metadata.description === 'string') {\n      return metadata.description;\n    }\n    \n    return '';\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return '';\n  }\n}\n\n/**\n * Extract cover image URL from tribe metadata\n * @param tribe The tribe object\n * @param defaultCover Optional default cover image URL\n * @returns The cover image URL\n */\nexport function getTribeCoverImage(tribe: Tribe, defaultCover: string = '/images/default-cover.png'): string {\n  if (!tribe) return defaultCover;\n  \n  try {\n    // Check for direct coverImage property\n    const tribeAny = tribe as any;\n    if (tribeAny.coverImage && typeof tribeAny.coverImage === 'string' && tribeAny.coverImage.trim() !== '') {\n      return tribeAny.coverImage;\n    }\n    \n    // Try to parse metadata if it's a string\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    // Check if coverImage exists in metadata and is not empty\n    if (metadata?.coverImage && typeof metadata.coverImage === 'string' && metadata.coverImage.trim() !== '') {\n      return metadata.coverImage;\n    }\n    \n    return defaultCover;\n  } catch (error) {\n    console.error(`Error parsing metadata for tribe ${tribe.id}:`, error);\n    return defaultCover;\n  }\n}\n\n/**\n * Get user membership status for the tribe\n * @param tribe The tribe object\n * @returns Object with membership status flags\n */\nexport function getTribeMembershipStatus(tribe: Tribe): { isMember: boolean, isPending: boolean, isAdmin: boolean } {\n  if (!tribe) return { isMember: false, isPending: false, isAdmin: false };\n  \n  try {\n    // Check if tribe has direct membership status properties\n    const tribeAny = tribe as any;\n    \n    if (tribeAny.userMembershipStatus) {\n      return {\n        isMember: Boolean(tribeAny.userMembershipStatus.isMember),\n        isPending: Boolean(tribeAny.userMembershipStatus.isPending),\n        isAdmin: Boolean(tribeAny.userMembershipStatus.isAdmin)\n      };\n    }\n    \n    // Try to parse metadata for membership status\n    let metadata: any = null;\n    if (typeof tribe.metadata === 'string' && tribe.metadata.trim() !== '') {\n      try {\n        metadata = JSON.parse(tribe.metadata);\n      } catch (parseError) {\n        console.error(`Error parsing metadata JSON for tribe ${tribe.id}:`, parseError);\n      }\n    } else if (typeof tribe.metadata === 'object' && tribe.metadata !== null) {\n      metadata = tribe.metadata;\n    }\n    \n    if (metadata?.userMembershipStatus) {\n      return {\n        isMember: Boolean(metadata.userMembershipStatus.isMember),\n        isPending: Boolean(metadata.userMembershipStatus.isPending),\n        isAdmin: Boolean(metadata.userMembershipStatus.isAdmin)\n      };\n    }\n    \n    // Check for individual properties in the tribe object\n    return {\n      isMember: Boolean(tribeAny.isMember),\n      isPending: Boolean(tribeAny.isPending),\n      isAdmin: Boolean(tribeAny.isAdmin || tribe.admins?.includes(tribeAny.currentUser))\n    };\n  } catch (error) {\n    console.error(`Error getting membership status for tribe ${tribe.id}:`, error);\n    return { isMember: false, isPending: false, isAdmin: false };\n  }\n}\n\n// Error types for tribe operations\nexport enum ErrorType {\n  UNAUTHORIZED = 'unauthorized',\n  COOLDOWN_ACTIVE = 'cooldown_active',\n  NOT_FOUND = 'not_found',\n  CONTRACT_ERROR = 'contract_error',\n  UNKNOWN = 'unknown'\n}\n\n// Add the TribesHelper class\nexport class TribesHelper {\n  private chainId: number;\n  private walletClient: WalletClient | null = null;\n  private userAddress: string | null = null;\n\n  constructor(chainId: number) {\n    this.chainId = chainId;\n  }\n\n  async connect(walletClient: WalletClient, address: string): Promise<void> {\n    this.walletClient = walletClient;\n    this.userAddress = address;\n  }\n\n  // Implement required methods with mock functionality\n  async createPost(tribeId: number, metadata: string, isGated: boolean = false, \n                  collectibleContract: string = '0x0000000000000000000000000000000000000000', \n                  collectibleId: number = 0): Promise<number> {\n    return 1; // Mock post ID\n  }\n\n  async getPost(postId: number): Promise<any> {\n    return {\n      id: postId,\n      creator: this.userAddress || '0x0',\n      tribeId: 1,\n      metadata: '{}',\n      isGated: false,\n      collectibleContract: '0x0000000000000000000000000000000000000000',\n      collectibleId: 0,\n      isEncrypted: false,\n      accessSigner: '0x0000000000000000000000000000000000000000'\n    };\n  }\n\n  async getPostsByTribe(tribeId: number, offset: number = 0, limit: number = 10): Promise<any> {\n    return { postIds: [1, 2, 3], total: 3 };\n  }\n\n  async getPostsByUser(userAddress: string, offset: number = 0, limit: number = 10): Promise<any> {\n    return { postIds: [1, 2], total: 2 };\n  }\n\n  async canViewPost(postId: number, viewer: string): Promise<boolean> {\n    return true;\n  }\n\n  async interactWithPost(postId: number, interactionType: number): Promise<void> {}\n\n  async getInteractionCount(postId: number, interactionType: number): Promise<number> {\n    return 0;\n  }\n} ","import { useNavigate, useLocation } from 'react-router-dom';\nimport { X, Hash, Users, Globe, Lock } from 'lucide-react';\nimport { useTribesData } from '../hooks/useTribesData';\nimport clsx from 'clsx';\nimport { getTribeAvatar, getTribePrivacy, getTribeTopics } from '../utils/tribeHelpers';\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { tribes, isLoading } = useTribesData();\n  const currentPath = location.pathname;\n\n  // Get all topics from tribes with proper error handling\n  const allTopics = tribes?.flatMap(tribe => {\n    const topics = getTribeTopics(tribe);\n    return topics.map(topic => ({\n      ...topic,\n      tribeName: tribe.name,\n      tribeId: tribe.id\n    }));\n  }) || [];\n\n  return (\n    <>\n      {/* Overlay */}\n      <div\n        className={clsx(\n          'fixed inset-0 bg-black/50 backdrop-blur-sm z-30 md:hidden transition-opacity',\n          isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n        )}\n        onClick={onClose}\n      />\n\n      {/* Sidebar */}\n      <aside\n        className={clsx(\n          'fixed md:sticky top-[64px] left-0 h-[calc(100vh-64px-64px)] w-64',\n          'bg-theme-bg/90 backdrop-blur-xl z-30',\n          'transform transition-transform duration-200 ease-in-out',\n          'overflow-hidden flex flex-col',\n          isOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'\n        )}\n      >\n        {/* Mobile Header */}\n        <div className=\"p-4 flex justify-between items-center md:hidden\">\n          <h2 className=\"text-xl font-bold text-text-primary\">Navigation</h2>\n          <button onClick={onClose} className=\"p-1 text-text-primary hover:text-theme-primary\">\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Scrollable Content */}\n        <div className=\"flex-1 overflow-y-auto overflow-x-hidden\">\n          <div className=\"p-4 space-y-8\">\n            {/* Tribes Section */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4 text-sm font-medium text-text-secondary sticky top-0 bg-theme-bg/90 backdrop-blur-xl py-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>TRIBES</span>\n              </div>\n              <div className=\"space-y-1\">\n                {isLoading ? (\n                  // Loading skeleton\n                  [...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-theme-primary/5 h-9 rounded-lg\" />\n                  ))\n                ) : tribes?.map(tribe => {\n                  const avatarUrl = getTribeAvatar(tribe);\n                  const privacy = getTribePrivacy(tribe);\n                  \n                  return (\n                    <button\n                      key={tribe.id}\n                      onClick={() => {\n                        navigate(`/tribes/${tribe.id}`);\n                        onClose();\n                      }}\n                      className={clsx(\n                        'w-full px-2 py-1.5 rounded-lg',\n                        'flex gap-2 transition-colors',\n                        'text-text-secondary hover:text-text-primary',\n                        'hover:bg-theme-primary/5',\n                        currentPath === `/tribes/${tribe.id}` ? 'bg-theme-primary/10 text-text-primary' : ''\n                      )}\n                    >\n                      <img\n                        src={avatarUrl}\n                        alt={tribe.name}\n                        className=\"w-6 h-6 rounded-lg\"\n                        onError={(e) => {\n                          // Fallback if image fails to load\n                          (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n                        }}\n                      />\n                      <span className=\"flex-1 truncate text-sm text-left\">{tribe.name}</span>\n                      {privacy === 'public' ? (\n                        <Globe className=\"w-3 h-3 opacity-50\" />\n                      ) : (\n                        <Lock className=\"w-3 h-3 opacity-50\" />\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Topics Section */}\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4 text-sm font-medium text-text-secondary sticky top-0 bg-theme-bg/90 backdrop-blur-xl py-2\">\n                <Hash className=\"w-4 h-4\" />\n                <span>TOPICS</span>\n              </div>\n              <div className=\"flex flex-wrap gap-2\">\n                {isLoading ? (\n                  // Loading skeleton\n                  [...Array(4)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse bg-theme-primary/5 h-7 w-24 rounded-full\" />\n                  ))\n                ) : allTopics.length > 0 ? (\n                  allTopics.map(topic => (\n                    <button\n                      key={`${topic.tribeId}-${topic.id}`}\n                      onClick={() => {\n                        navigate(`/tribes/${topic.tribeId}/topics/${topic.id}`);\n                        onClose();\n                      }}\n                      className={clsx(\n                        'inline-flex items-center px-3 py-1 rounded-full',\n                        'text-sm transition-colors gap-1',\n                        'hover:bg-theme-primary/5',\n                        currentPath === `/tribes/${topic.tribeId}/topics/${topic.id}`\n                          ? 'bg-theme-primary/10 text-text-primary'\n                          : 'bg-black/50 text-text-secondary hover:text-text-primary'\n                      )}\n                    >\n                      <Hash className=\"w-3 h-3\" />\n                      <span className=\"truncate max-w-[120px]\">{topic.name}</span>\n                      <span className=\"text-xs opacity-50 shrink-0\">\n                        {topic.postCount}\n                      </span>\n                    </button>\n                  ))\n                ) : (\n                  <div className=\"text-sm text-text-secondary italic px-2\">\n                    No topics available\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n}","import React, { useState } from 'react'\nimport { Outlet } from 'react-router-dom'\nimport { Navigation } from './Navigation'\nimport { BottomNav } from './BottomNav'\nimport { Sidebar } from './Sidebar'\n\nexport function Layout() {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false)\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <Navigation onMenuClick={() => setIsSidebarOpen(!isSidebarOpen)} />\n      <div className=\"flex\">\n        <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />\n        <main className=\"flex-1 pb-20 md:pb-0\">\n          <Outlet />\n        </main>\n      </div>\n      <BottomNav />\n    </div>\n  )\n}","export const STORAGE_KEYS = {\n  AUTH: 'tribes_auth',\n  PROFILE: 'tribes_profile',\n  FOLLOWERS: 'tribes_followers',\n  ONBOARDING: 'tribes_onboarding'\n} as const;\n\nexport interface AuthData {\n  address: string | null;\n  isConnected: boolean;\n}\n\nexport interface ProfileData {\n  username: string;\n  avatarUrl: string;\n  avatarNFT: string;\n  avatarTokenId: number;\n}\n\nexport interface OnboardingState {\n  hasSkippedFollowing: boolean;\n  currentStep: number;\n  username?: string;\n  avatarUrl?: string;\n}\n\n// Auth Storage\nexport const getAuthData = (): AuthData => {\n  const data = localStorage.getItem(STORAGE_KEYS.AUTH);\n  return data ? JSON.parse(data) : { address: null, isConnected: false };\n};\n\nexport const saveAuthData = (data: AuthData): void => {\n  localStorage.setItem(STORAGE_KEYS.AUTH, JSON.stringify(data));\n};\n\n// Profile Storage\nexport const getProfileData = (): ProfileData | null => {\n  const data = localStorage.getItem(STORAGE_KEYS.PROFILE);\n  return data ? JSON.parse(data) : null;\n};\n\nexport const saveProfileData = (data: ProfileData): void => {\n  localStorage.setItem(STORAGE_KEYS.PROFILE, JSON.stringify(data));\n};\n\n// Followers Storage\nexport const getFollowers = (): string[] => {\n  const data = localStorage.getItem(STORAGE_KEYS.FOLLOWERS);\n  return data ? JSON.parse(data) : [];\n};\n\nexport const saveFollowers = (followers: string[]): void => {\n  localStorage.setItem(STORAGE_KEYS.FOLLOWERS, JSON.stringify(followers));\n};\n\nexport const hasMinimumFollows = (): boolean => {\n  const followers = getFollowers();\n  return followers.length >= 3;\n};\n\n// Onboarding Storage\nexport const getOnboardingState = (): OnboardingState => {\n  const data = localStorage.getItem(STORAGE_KEYS.ONBOARDING);\n  return data ? JSON.parse(data) : {\n    hasSkippedFollowing: false,\n    currentStep: 0\n  };\n};\n\nexport const saveOnboardingState = (state: OnboardingState): void => {\n  localStorage.setItem(STORAGE_KEYS.ONBOARDING, JSON.stringify(state));\n};\n\nexport const clearOnboardingState = (): void => {\n  localStorage.removeItem(STORAGE_KEYS.ONBOARDING);\n}; ","import React, { useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../hooks/useAuth';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { \n  getAuthData, \n  getOnboardingState, \n  hasMinimumFollows,\n  getProfileData\n} from '../utils/storage';\n\nconst DEBUG = true;\nconst STORAGE_KEY = 'tribes_auth_state';\n\n// Debug function to track flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[RootRoute:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[RootRoute:${timestamp}] ${message}`);\n  }\n};\n\nexport function RootRoute() {\n  const navigate = useNavigate();\n  const { isConnected, address } = useAuth();\n  const checkInProgress = useRef(false);\n\n  // Track navigation redirects to prevent loops\n  const trackRedirect = (path: string) => {\n    try {\n      const redirects = localStorage.getItem('redirect_attempts') || '{}';\n      const attempts = JSON.parse(redirects);\n      attempts[path] = (attempts[path] || 0) + 1;\n      localStorage.setItem('redirect_attempts', JSON.stringify(attempts));\n      \n      // If we've redirected to connect more than 5 times, reset auth state\n      if (path === '/connect' && attempts[path] > 5) {\n        logDebug('Too many redirects to connect page, clearing auth state');\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.removeItem('tribes_auth');\n        localStorage.removeItem('tribes_profile');\n        return false;\n      }\n      \n      return true;\n    } catch (e) {\n      console.error('Error tracking redirects:', e);\n      return true;\n    }\n  };\n  \n  const safeNavigate = (path: string) => {\n    if (trackRedirect(path)) {\n      logDebug(`Navigating to ${path}`);\n      navigate(path);\n    } else {\n      logDebug('Navigation blocked to prevent loop');\n    }\n  };\n\n  useEffect(() => {\n    const checkStateAndRedirect = async () => {\n      // Prevent multiple simultaneous checks\n      if (checkInProgress.current) {\n        logDebug('Check already in progress, skipping');\n        return;\n      }\n      \n      checkInProgress.current = true;\n      logDebug('Starting state check');\n      \n      try {\n        // Check saved auth state first\n        const savedAuth = getAuthData();\n        logDebug('Auth data from storage', { isConnected: savedAuth.isConnected, hasAddress: !!savedAuth.address });\n        \n        if (!savedAuth.isConnected || !savedAuth.address) {\n          logDebug('No saved auth, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        // If we have auth but no active connection, let user reconnect\n        if (!isConnected || !address) {\n          logDebug('No active connection, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        try {\n          // Check if user has a profile\n          logDebug('Checking profile for address', { address });\n          const result: any = await blockchain.getProfileByAddress(address);\n          logDebug('Profile check result', { exists: !!result.profile });\n          \n          const onboardingState = getOnboardingState();\n\n          // No profile - start onboarding\n          if (!result.profile) {\n            logDebug('No profile, redirecting to username setup');\n            safeNavigate('/username-setup');\n            return;\n          }\n\n          // Has profile and avatar but hasn't completed follow step\n          if (!onboardingState.hasSkippedFollowing && !hasMinimumFollows()) {\n            logDebug('Profile exists but onboarding incomplete');\n            safeNavigate('/onboarding');\n            return;\n          }\n\n          // Everything complete - go to dashboard\n          logDebug('Profile complete, redirecting to dashboard');\n          safeNavigate('/dashboard');\n        } catch (error) {\n          console.error('Error checking profile:', error);\n          logDebug('Error checking profile', { error });\n          safeNavigate('/connect');\n        }\n      } finally {\n        checkInProgress.current = false;\n      }\n    };\n\n    checkStateAndRedirect();\n  }, [isConnected, address, navigate]);\n\n  // Return null as this is just a routing component\n  logDebug('Rendering null');\n  return null;\n} ","import React, { useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { X, CheckCircle, AlertCircle, AlertTriangle, Info } from 'lucide-react'\nimport { cn } from '../utils/cn'\n\nexport type NotificationType = 'success' | 'error' | 'info' | 'warning'\n\ninterface NotificationToastProps {\n  message: string\n  type: NotificationType\n  isVisible: boolean\n  onClose: () => void\n  duration?: number\n}\n\nconst getIcon = (type: NotificationType) => {\n  switch (type) {\n    case 'success':\n      return <CheckCircle className=\"w-5 h-5\" />\n    case 'error':\n      return <AlertCircle className=\"w-5 h-5\" />\n    case 'warning':\n      return <AlertTriangle className=\"w-5 h-5\" />\n    case 'info':\n      return <Info className=\"w-5 h-5\" />\n  }\n}\n\nconst toastVariants = {\n  success: 'bg-success-main/20 text-success-main border-success-main/20',\n  error: 'bg-destructive/20 text-destructive border-destructive/20',\n  warning: 'bg-yellow-500/20 text-yellow-500 border-yellow-500/20',\n  info: 'bg-blue-500/20 text-blue-500 border-blue-500/20',\n}\n\nexport const NotificationToast: React.FC<NotificationToastProps> = ({\n  message,\n  type,\n  isVisible,\n  onClose,\n  duration = 3000\n}) => {\n  useEffect(() => {\n    if (isVisible) {\n      const timer = setTimeout(() => {\n        onClose()\n      }, duration)\n\n      return () => clearTimeout(timer)\n    }\n  }, [isVisible, duration, onClose])\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -50 }}\n          className=\"fixed top-4 right-4 z-50\"\n        >\n          <div\n            className={cn(\n              'flex items-center space-x-3 px-4 py-3 rounded-lg border backdrop-blur-sm shadow-lg',\n              toastVariants[type]\n            )}\n          >\n            {getIcon(type)}\n            <span className=\"text-sm font-medium\">{message}</span>\n            <button\n              onClick={onClose}\n              className=\"ml-2 hover:opacity-70 transition-opacity\"\n            >\n              <X className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n} ","import React, { createContext, useContext, useState, useCallback } from 'react'\nimport { NotificationToast, NotificationType } from '../components/NotificationToast'\n\ninterface NotificationContextType {\n  showNotification: (message: string, type: NotificationType) => void\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext)\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider')\n  }\n  return context\n}\n\ninterface NotificationProviderProps {\n  children: React.ReactNode\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notification, setNotification] = useState<{\n    message: string\n    type: NotificationType\n    isVisible: boolean\n  }>({\n    message: '',\n    type: 'info',\n    isVisible: false\n  })\n\n  const showNotification = useCallback((message: string, type: NotificationType) => {\n    setNotification({\n      message,\n      type,\n      isVisible: true\n    })\n  }, [])\n\n  const hideNotification = useCallback(() => {\n    setNotification(prev => ({\n      ...prev,\n      isVisible: false\n    }))\n  }, [])\n\n  return (\n    <NotificationContext.Provider value={{ showNotification }}>\n      {children}\n      <NotificationToast\n        message={notification.message}\n        type={notification.type}\n        isVisible={notification.isVisible}\n        onClose={hideNotification}\n      />\n    </NotificationContext.Provider>\n  )\n} ","import { useState, useCallback, useEffect } from 'react'\nimport { Address } from 'viem'\nimport { useNotification } from '../contexts/NotificationContext'\nimport { ProfileData, ProfileMetadata, ProfileError } from '../types/user'\nimport { useWallet } from './useWallet'\nimport { useTribesSDK } from '../contexts/TribesContext'\nimport { SUPPORTED_CHAINS } from '../constants/networks'\nimport { useAccount } from 'wagmi'\nimport { useNetwork } from './useNetwork'\n\nexport interface ProfileHookResult {\n  // Profile data\n  profile: ProfileData | null\n  isLoading: boolean\n  error: string | null\n  \n  // Network info\n  currentChainId: number | undefined\n  isTargetNetwork: boolean\n  \n  // SDK state\n  isSdkInitialized: boolean\n  \n  // Actions\n  getProfileById: (profileId: number) => Promise<void>\n  getProfileByUsername: (username: string) => Promise<void>\n  createProfile: (username: string, metadata: string) => Promise<number>\n  updateProfileMetadata: (profileId: number, metadata: string) => Promise<void>\n  checkUsernameAvailability: (username: string) => Promise<boolean>\n  validateUsername: (username: string) => boolean\n  getProfileByAddress: (address: Address) => Promise<{ profile: ProfileData | null; error?: { code: string } }>\n  checkProfileOwnership: (address: Address) => Promise<ProfileData | null>\n  skipProfileCreation: () => Promise<boolean>\n  hasSkippedProfileCreation: (address: Address) => Promise<boolean>\n  findUsernameByAddress: (address: Address) => Promise<string | null>\n  updateProfileCache: (profile: ProfileData, chainId: number) => void\n  updateProfile: (tokenId: string, metadata: string) => Promise<void>\n  checkUsername: (username: string) => Promise<boolean>\n}\n\n// Helper function to check if a chain ID is supported\nconst isChainSupported = (chainId: number | undefined): boolean => {\n  if (!chainId) return false;\n  return SUPPORTED_CHAINS.some((chain) => chain.id === chainId);\n};\n\n// Add this after the existing imports\nconst DEBUG = true; // Toggle debugging\n\n// Debug function to track profile flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[useProfile:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[useProfile:${timestamp}] ${message}`);\n  }\n};\n\n/**\n * Hook for interacting with user profiles\n */\nexport function useProfile(): ProfileHookResult {\n  const { sdk, isInitialized } = useTribesSDK();\n  const [isLoading, setIsLoading] = useState(false); // Changed to false by default\n  const [error, setError] = useState<string | null>(null);\n  const [profile, setProfile] = useState<ProfileData | null>(null);\n  const { address, chainId, isConnected, walletClient } = useWallet();\n  const { showNotification } = useNotification();\n  const { chainId: networkChainId } = useNetwork();\n\n  // Connect to wallet when available\n  useEffect(() => {\n    const connectSdk = async () => {\n      if (sdk && isConnected && walletClient && address) {\n        try {\n          logDebug('Connecting SDK to wallet', { address });\n          await sdk.connect(walletClient, address);\n        } catch (err) {\n          setError((err as Error).message);\n          logDebug('SDK wallet connection error', { error: (err as Error).message });\n        }\n      }\n    };\n\n    connectSdk();\n  }, [sdk, isConnected, walletClient, address]);\n\n  const getProfileById = useCallback(async (profileId: number) => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const getProfileByUsername = useCallback(async (username: string) => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const profileData = await sdk.getProfileByUsername(username);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to get profile';\n      setError(errorMessage);\n      console.error('Error getting profile by username:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const createProfile = useCallback(async (username: string, metadata: string): Promise<number> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    // Check if wallet is connected and reconnect if necessary\n    if (!isConnected || !walletClient || !address) {\n      throw new Error('Wallet not connected. Please connect your wallet and try again.');\n    }\n\n    // Ensure SDK is connected to wallet - multiple attempts with delay\n    let connectionAttempts = 0;\n    const maxAttempts = 3;\n    \n    while (connectionAttempts < maxAttempts) {\n      try {\n        console.log(`[useProfile] Connecting SDK to wallet, attempt ${connectionAttempts + 1}/${maxAttempts}`);\n        await sdk.connect(walletClient, address);\n        \n        // Verify connection\n        if (sdk.isWalletConnected()) {\n          console.log('[useProfile] SDK successfully connected to wallet');\n          break;\n        } else {\n          console.warn('[useProfile] SDK connection verification failed, retrying...');\n        }\n      } catch (error) {\n        console.error(`[useProfile] SDK connection attempt ${connectionAttempts + 1} failed:`, error);\n        if (connectionAttempts === maxAttempts - 1) {\n          throw new Error('Failed to connect to wallet after multiple attempts. Please try again.');\n        }\n      }\n      \n      connectionAttempts++;\n      // Add increasing delay between attempts\n      await new Promise(resolve => setTimeout(resolve, 500 * connectionAttempts));\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      const profileId = await sdk.createProfile(username, parsedMetadata);\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n      return profileId;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create profile';\n      setError(errorMessage);\n      console.error('Error creating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isConnected, walletClient, address]);\n\n  const updateProfileMetadata = useCallback(async (profileId: number, metadata: string): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      await sdk.updateProfileMetadata(profileId, parsedMetadata);\n      const profileData = await sdk.getProfileById(profileId);\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const checkUsernameAvailability = useCallback(async (username: string): Promise<boolean> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkUsernameAvailability(username);\n    } catch (err) {\n      console.error('Error checking username availability:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  const validateUsername = useCallback((username: string): boolean => {\n    // Usernames must be 3-20 characters and only contain letters, numbers, and underscores\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\n    return usernameRegex.test(username);\n  }, []);\n\n  const getProfileByAddress = useCallback(async (address: Address): Promise<{ profile: ProfileData | null; error?: { code: string } }> => {\n    if (!sdk || !isInitialized) {\n      logDebug('SDK not initialized');\n      return { profile: null, error: { code: 'SDK_NOT_INITIALIZED' } };\n    }\n\n    setIsLoading(true);\n    try {\n      logDebug('Getting profile for address', { address });\n      const profile = await sdk.getProfileByAddress(address);\n      if (!profile) {\n        logDebug('No profile found');\n        return { profile: null, error: { code: 'NO_PROFILE' } };\n      }\n      logDebug('Profile found', { profile });\n      setProfile(profile);\n      return { profile };\n    } catch (error) {\n      logDebug('Error getting profile', error);\n      return { profile: null, error: { code: 'UNKNOWN_ERROR' } };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk, isInitialized]);\n\n  const checkProfileOwnership = useCallback(async (address: Address): Promise<ProfileData | null> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkProfileOwnership(address);\n    } catch (err) {\n      console.error('Error checking profile ownership:', err);\n      return null;\n    }\n  }, [sdk]);\n\n  const skipProfileCreation = useCallback(async (): Promise<boolean> => {\n    if (!sdk || !address) {\n      return false;\n    }\n\n    try {\n      return await sdk.skipProfileCreation(address);\n    } catch (err) {\n      console.error('Error skipping profile creation:', err);\n      return false;\n    }\n  }, [sdk, address]);\n\n  const hasSkippedProfileCreation = useCallback(async (address: Address): Promise<boolean> => {\n    if (!sdk) {\n      return false;\n    }\n\n    try {\n      return await sdk.hasSkippedProfileCreation(address);\n    } catch (err) {\n      console.error('Error checking skipped profile creation:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  const findUsernameByAddress = useCallback(async (address: Address): Promise<string | null> => {\n    if (!sdk) {\n      return null;\n    }\n\n    try {\n      return await sdk.findUsernameByAddress(address);\n    } catch (err) {\n      console.error('Error finding username by address:', err);\n      return null;\n    }\n  }, [sdk]);\n\n  const updateProfileCache = useCallback((profile: ProfileData, chainId: number) => {\n    try {\n      localStorage.setItem('tribes_auth_state', JSON.stringify({\n        address: profile.owner,\n        chainId,\n        profile,\n        timestamp: Date.now()\n      }));\n    } catch (err) {\n      console.error('Failed to update profile cache:', err);\n    }\n  }, []);\n\n  const updateProfile = useCallback(async (tokenId: string, metadata: string): Promise<void> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const parsedMetadata = JSON.parse(metadata) as ProfileMetadata;\n      await sdk.updateProfileMetadata(parseInt(tokenId), parsedMetadata);\n      const profileData = await sdk.getProfileById(parseInt(tokenId));\n      setProfile(profileData);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update profile';\n      setError(errorMessage);\n      console.error('Error updating profile:', err);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sdk]);\n\n  const checkUsername = useCallback(async (username: string): Promise<boolean> => {\n    if (!sdk) {\n      throw new Error('SDK not initialized');\n    }\n\n    try {\n      return await sdk.checkUsernameAvailability(username);\n    } catch (err) {\n      console.error('Error checking username:', err);\n      return false;\n    }\n  }, [sdk]);\n\n  return {\n    profile,\n    isLoading: isLoading || !isInitialized, // Include initialization state in loading\n    error,\n    currentChainId: networkChainId,\n    isTargetNetwork: isChainSupported(networkChainId),\n    isSdkInitialized: !!sdk && isInitialized,\n    getProfileById,\n    getProfileByUsername,\n    createProfile,\n    updateProfileMetadata,\n    checkUsernameAvailability,\n    validateUsername,\n    getProfileByAddress,\n    checkProfileOwnership,\n    skipProfileCreation,\n    hasSkippedProfileCreation,\n    findUsernameByAddress,\n    updateProfileCache,\n    updateProfile,\n    checkUsername\n  };\n} ","import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { ArrowLeft } from 'lucide-react';\nimport { useProfile } from '../hooks/useProfile';\nimport { getWalletClient } from '../config/contracts';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { FUSE_EMBER } from '../constants/networks';\n\nconst DEBUG = true;\nconst STORAGE_KEY = 'tribes_auth_state';\n\n// Debug function to track auth flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[WalletConnect:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[WalletConnect:${timestamp}] ${message}`);\n  }\n};\n\nconst wallets = [\n  {\n    id: 'metamask',\n    name: 'MetaMask',\n    icon: '🦊',\n    installed: true\n  },\n  {\n    id: 'coinbase',\n    name: 'Coinbase Wallet',\n    icon: '🔵',\n    installed: false\n  },\n  {\n    id: 'ledger',\n    name: 'Ledger',\n    icon: '📱',\n    installed: false\n  },\n  {\n    id: 'rainbow',\n    name: 'Rainbow Wallet',\n    icon: '🌈',\n    installed: false\n  }\n];\n\nexport const WalletConnect = () => {\n  const navigate = useNavigate();\n  const { getProfileByAddress } = useProfile();\n  const { chainId, switchNetwork } = useNetwork();\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState<string>();\n  const connectionAttempt = useRef(0);\n  \n  // Clear localStorage on entry\n  useEffect(() => {\n    logDebug('WalletConnect component mounted - clearing redirect attempts');\n    // Reset navigation attempts in localStorage\n    try {\n      const data = localStorage.getItem('redirect_attempts');\n      if (data) {\n        const attempts = JSON.parse(data);\n        if (attempts['/connect'] && attempts['/connect'] > 5) {\n          logDebug('Too many redirect attempts detected, clearing auth state');\n          localStorage.removeItem(STORAGE_KEY);\n          localStorage.removeItem('tribes_auth');\n          localStorage.removeItem('tribes_profile');\n        }\n      }\n      localStorage.removeItem('redirect_attempts');\n    } catch (e) {\n      console.error('Error clearing redirect attempts:', e);\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    if (isConnecting) return;\n    \n    // Increment connection attempt\n    connectionAttempt.current += 1;\n    logDebug(`Starting connection attempt ${connectionAttempt.current}`);\n\n    try {\n      setIsConnecting(true);\n      setError(undefined);\n\n      // Ensure we're on a supported chain first\n      if (!chainId) {\n        logDebug('No chain ID detected, switching network');\n        await switchNetwork(FUSE_EMBER.id);\n      }\n\n      logDebug('Getting wallet client');\n      const walletClient = await getWalletClient(chainId);\n      logDebug('Requesting addresses from wallet');\n      const [address] = await walletClient.requestAddresses();\n\n      if (!address) {\n        logDebug('No address returned from wallet');\n        throw new Error('No address returned from wallet');\n      }\n      \n      logDebug('Got address from wallet', { address });\n\n      // Check if user has a profile on the current chain\n      logDebug('Checking for profile');\n      const { profile, error: profileError } = await getProfileByAddress(address as `0x${string}`);\n      \n      if (profileError) {\n        logDebug('Profile check returned error', { code: profileError.code });\n      }\n      \n      if (profileError?.code === 'WRONG_CHAIN') {\n        logDebug('Wrong chain detected, switching network');\n        await switchNetwork(FUSE_EMBER.id);\n        throw new Error('Please connect to a supported network');\n      }\n\n      // Save auth state to localStorage to avoid redirect loops\n      if (address) {\n        logDebug('Saving address to localStorage');\n        localStorage.setItem(STORAGE_KEY, JSON.stringify({\n          address,\n          chainId: chainId || FUSE_EMBER.id,\n          timestamp: Date.now()\n        }));\n      }\n\n      if (profile) {\n        // If profile exists, go to dashboard\n        logDebug('Profile found, navigating to dashboard');\n        navigate('/dashboard');\n        return;\n      }\n\n      if (profileError?.code === 'NO_PROFILE') {\n        // If no profile, go to create profile\n        logDebug('No profile found, navigating to create-profile');\n        navigate('/create-profile');\n        return;\n      }\n\n      // If we get here, something went wrong\n      logDebug('Unknown profile check result');\n      setError('Failed to check profile status');\n    } catch (error) {\n      console.error('Failed to connect wallet:', error);\n      logDebug('Connection error', { error });\n      setError(error instanceof Error ? error.message : 'Failed to connect wallet');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white p-6\">\n      <div className=\"flex items-center mb-8\">\n        <button className=\"p-2\" onClick={() => navigate('/')}>\n          <ArrowLeft className=\"w-6 h-6\" />\n        </button>\n        <div className=\"flex-1 flex justify-center space-x-2\">\n          <div className=\"w-12 h-2 bg-monad-purple rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n          <div className=\"w-2 h-2 bg-white/20 rounded-full\" />\n        </div>\n      </div>\n\n      <h1 className=\"text-5xl font-bold mb-4\">Connect with wallet</h1>\n      <p className=\"text-gray-400 mb-8\">\n        We found the following options based on compatibility with Tribes.\n      </p>\n\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        {wallets.map((wallet) => (\n          <button\n            key={wallet.id}\n            onClick={() => connectWallet()}\n            disabled={isConnecting || !wallet.installed}\n            className={`w-full flex items-center p-4 bg-white/5 rounded-xl hover:bg-white/10 transition-colors ${\n              isConnecting ? 'opacity-50 cursor-not-allowed' : ''\n            }`}\n          >\n            <span className=\"text-2xl mr-3\">{wallet.icon}</span>\n            <div className=\"flex-1 text-left\">\n              <div className=\"font-medium\">{wallet.name}</div>\n              <div className=\"text-sm text-gray-400\">\n                {isConnecting ? 'Connecting...' : \n                  wallet.id === 'metamask' ? 'Connect now' : 'Coming soon'}\n              </div>\n            </div>\n          </button>\n        ))}\n      </div>\n      <p className=\"text-center text-sm text-gray-400 mt-8\">\n        More wallet options coming soon\n      </p>\n    </div>\n  );\n};","import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useProfile } from '../../hooks/useProfile';\nimport { useNotification } from '../../contexts/NotificationContext';\nimport { getWalletClient, getContracts } from '../../config/contracts';\nimport { Profile } from '../../types/contracts';\nimport { useWalletClient } from 'wagmi';\nimport { useNetwork } from '../../hooks/useNetwork';\nimport { MONAD_DEVNET, FUSE_EMBER, SUPPORTED_CHAINS } from '../../constants/networks';\nimport { useWallet } from '../../hooks/useWallet';\nimport { useTribesSDK } from '../../contexts/TribesContext';\n\n// Username validation constants\nconst USERNAME_CONSTRAINTS = {\n  MIN_LENGTH: 3,\n  MAX_LENGTH: 32,\n  ALLOWED_CHARS: /^[a-zA-Z0-9_-]+$/\n};\n\ninterface ProfileFormProps {\n  mode: 'create' | 'edit';\n  existingProfile?: Profile | null;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n  className?: string;\n}\n\nexport function ProfileForm({ mode, existingProfile, onSuccess, onCancel, className = '' }: ProfileFormProps) {\n  const navigate = useNavigate();\n  const { \n    createProfile, \n    updateProfileMetadata, \n    checkUsernameAvailability,\n    validateUsername,\n    currentChainId,\n    isTargetNetwork\n  } = useProfile();\n  const { showNotification } = useNotification();\n  const { data: wagmiWalletClient, isLoading: isWalletLoading } = useWalletClient();\n  const { chainId, switchNetwork } = useNetwork();\n  const { isConnected, address, walletClient } = useWallet();\n  const { sdk } = useTribesSDK();\n  \n  const [username, setUsername] = useState(existingProfile?.username || '');\n  const [bio, setBio] = useState('');\n  const [avatar, setAvatar] = useState('');\n  const [location, setLocation] = useState('');\n  const [website, setWebsite] = useState('');\n  const [twitter, setTwitter] = useState('');\n  const [instagram, setInstagram] = useState('');\n  const [discord, setDiscord] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isUsernameAvailable, setIsUsernameAvailable] = useState(true);\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [hasCheckedProfile, setHasCheckedProfile] = useState(false);\n  \n  // Move useRef to top level of component\n  const checkedUsernamesRef = useRef<Map<string, boolean>>(new Map());\n\n  // Debounced username check with caching\n  useEffect(() => {\n    // Skip check if in edit mode or username is too short\n    if (mode === 'edit' || username.length < USERNAME_CONSTRAINTS.MIN_LENGTH) {\n      return;\n    }\n\n    // Store the current username to compare in the cleanup function\n    const currentUsername = username;\n    const currentChainId = chainId;\n    const cacheKey = `${username}-${currentChainId}`;\n    \n    // Create a flag to handle component unmount\n    let isMounted = true;\n    \n    // Check if we already have a cached result for this username\n    if (checkedUsernamesRef.current.has(cacheKey)) {\n      const cachedResult = checkedUsernamesRef.current.get(cacheKey);\n      console.log(`[ProfileForm] Using cached result for ${username} on chain ${currentChainId}: ${cachedResult}`);\n      setIsUsernameAvailable(cachedResult || false);\n      return;\n    }\n    \n    console.log(`[ProfileForm] Setting up debounce check for ${username} on chain ${currentChainId}`);\n    const timer = setTimeout(async () => {\n      if (!isMounted) {\n        console.log(`[ProfileForm] Component unmounted, skipping check for ${currentUsername}`);\n        return;\n      }\n      \n      setIsCheckingUsername(true);\n      try {\n        console.log(`[ProfileForm] Checking availability for ${currentUsername} on chain ${currentChainId}`);\n        const available = await checkUsernameAvailability(username);\n        \n        // Cache this result with chain-aware key\n        checkedUsernamesRef.current.set(cacheKey, available);\n        \n        // Only update state if component is still mounted AND we're still checking the same username\n        if (isMounted && currentUsername === username) {\n          console.log(`[ProfileForm] Username ${currentUsername} availability on chain ${currentChainId}: ${available}`);\n          setIsUsernameAvailable(available);\n        }\n      } catch (err) {\n        console.error('Error checking username:', err);\n        if (isMounted && currentUsername === username) {\n          setIsUsernameAvailable(false);\n        }\n      } finally {\n        if (isMounted && currentUsername === username) {\n          setIsCheckingUsername(false);\n        }\n      }\n    }, 1000); // Increase to 1000ms to further reduce API calls\n\n    return () => {\n      console.log(`[ProfileForm] Cleanup for username check: ${currentUsername} on chain ${currentChainId}`);\n      isMounted = false;\n      clearTimeout(timer);\n    };\n  }, [username, mode, checkUsernameAvailability, chainId]);\n\n  // Load existing profile data\n  useEffect(() => {\n    if (existingProfile) {\n      setUsername(existingProfile.username);\n      try {\n        const metadata = JSON.parse(existingProfile.metadata);\n        setBio(metadata.bio || '');\n        setAvatar(metadata.avatar || '');\n      } catch (err) {\n        console.error('Failed to parse profile metadata:', err);\n      }\n    }\n  }, [existingProfile]);\n\n  // Basic check for existing profile using local storage\n  useEffect(() => {\n    const checkExistingProfile = async () => {\n      console.log('[ProfileForm] Starting checkExistingProfile, mode:', mode, 'hasCheckedProfile:', hasCheckedProfile);\n      \n      // Skip if not on create mode or already checked\n      if (mode !== 'create' || hasCheckedProfile) {\n        console.log('[ProfileForm] Skipping profile check - not in create mode or already checked');\n        return;\n      }\n      \n      // Check if we have the on_profile_setup_page flag set\n      const onSetupPage = localStorage.getItem('on_profile_setup_page') === 'true';\n      \n      // Prevent checking profile while on any profile creation page\n      if (onSetupPage || \n          window.location.pathname.includes('username-setup') || \n          window.location.pathname.includes('create-profile')) {\n        console.log('[ProfileForm] On profile creation page, marking as checked without navigation');\n        setHasCheckedProfile(true);\n        return;\n      }\n      \n      try {\n        console.log('[ProfileForm] Beginning wallet check');\n        setIsCheckingUsername(true);\n        \n        let address;\n        if (wagmiWalletClient) {\n          const addresses = await wagmiWalletClient.getAddresses();\n          address = addresses[0];\n          console.log('[ProfileForm] Got address from wagmiWalletClient:', address);\n        } else {\n          try {\n            const walletClient = await getWalletClient();\n            const addresses = await walletClient.getAddresses();\n            address = addresses[0];\n            console.log('[ProfileForm] Got address from getWalletClient:', address);\n          } catch (err) {\n            console.error('[ProfileForm] Unable to get wallet client:', err);\n          }\n        }\n        \n        // Check if there's profile data in local storage\n        if (address) {\n          console.log('[ProfileForm] Checking stored profile data for address:', address);\n          const storedData = localStorage.getItem('tribes_auth_state');\n          if (storedData) {\n            console.log('[ProfileForm] Found tribes_auth_state in localStorage');\n            const data = JSON.parse(storedData);\n            // NEVER navigate when on the profile creation pages\n            const onProfileCreationPage = \n              window.location.pathname.includes('username-setup') || \n              window.location.pathname.includes('create-profile');\n            \n            console.log('[ProfileForm] Profile check data:', {\n              hasProfile: !!data.profile,\n              addressMatch: data.address === address,\n              onProfileCreationPage,\n              currentPath: window.location.pathname\n            });\n            \n            if (data.profile && data.address === address && !onProfileCreationPage) {\n              console.log('[ProfileForm] Found existing profile, navigating to dashboard');\n              navigate('/dashboard');\n              return;\n            } else {\n              console.log('[ProfileForm] Not navigating - either no profile, address mismatch, or on profile creation page');\n            }\n          } else {\n            console.log('[ProfileForm] No tribes_auth_state found in localStorage');\n          }\n        }\n      } catch (err) {\n        console.error('[ProfileForm] Error checking existing profile:', err);\n      } finally {\n        setIsCheckingUsername(false);\n        setHasCheckedProfile(true);\n        console.log('[ProfileForm] Profile check completed');\n      }\n    };\n\n    // Only check once on initial render, not on every render\n    if (!hasCheckedProfile) {\n      console.log('[ProfileForm] Triggering profile check');\n      checkExistingProfile();\n    }\n  }, [mode, navigate, hasCheckedProfile, wagmiWalletClient]);\n\n  // Add a direct profile creation function at the top of the component\n  const createProfileDirectly = async (username: string, metadataStr: string) => {\n    \n    // Find the proper chain object from SUPPORTED_CHAINS\n    const currentChain = chainId \n      ? SUPPORTED_CHAINS.find(chain => chain.id === chainId) || MONAD_DEVNET\n      : MONAD_DEVNET;\n      \n    console.log('[ProfileForm] Using chain:', { chainId: currentChain.id, chainName: currentChain.name });\n    \n    if (!walletClient || !address) {\n      // Try fallback to wagmi wallet client if available\n      if (wagmiWalletClient && address) {\n        console.log('[ProfileForm] Using fallback wagmiWalletClient since direct walletClient is unavailable');\n        \n        try {\n          // Continue with wagmiWalletClient\n          const { profileNFTMinter } = getContracts(currentChain.id);\n          \n          console.log('[ProfileForm] Using contracts with wagmiWalletClient:', { \n            profileNFTMinter: profileNFTMinter.address,\n            chainId: currentChain.id, \n            address\n          });\n          \n          // Send transaction using wagmi wallet client with the appropriate chain\n          const hash = await wagmiWalletClient.writeContract({\n            chain: currentChain,\n            address: profileNFTMinter.address,\n            abi: profileNFTMinter.abi,\n            functionName: 'createProfile',\n            args: [username, metadataStr],\n            account: address\n          });\n          \n          console.log(`[ProfileForm] Transaction submitted with wagmiWalletClient: ${hash}`);\n          return hash;\n        } catch (error) {\n          const wagmiError = error as Error;\n          console.error('[ProfileForm] Fallback to wagmiWalletClient also failed:', wagmiError);\n          throw new Error(`Failed with wagmiWalletClient: ${wagmiError.message}`);\n        }\n      }\n      \n      throw new Error('Wallet not connected: ' + (!walletClient ? 'Missing walletClient' : 'Missing address'));\n    }\n    \n    console.log('[ProfileForm] Creating profile directly with wallet client');\n    \n    try {\n      // Get contract addresses from config using the current chain's ID\n      const { profileNFTMinter } = getContracts(currentChain.id);\n      \n      console.log('[ProfileForm] Using contracts:', { \n        profileNFTMinter: profileNFTMinter.address,\n        chainId: currentChain.id, \n        walletClient,\n        account: address\n      });\n      \n      // Send transaction directly using the wallet client with the appropriate chain\n      const hash = await walletClient.writeContract({\n        chain: currentChain,\n        address: profileNFTMinter.address,\n        abi: profileNFTMinter.abi,\n        functionName: 'createProfile',\n        args: [username, metadataStr],\n        account: address\n      });\n      \n      console.log(`[ProfileForm] Transaction submitted: ${hash}`);\n      return hash;\n    } catch (error) {\n      console.error('[ProfileForm] Error sending transaction directly:', error);\n      throw error;\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    console.log('[ProfileForm] Form submission attempted');\n    \n    // Validate form\n    if (!username && mode === 'create') {\n      showNotification('Username is required', 'error');\n      return;\n    }\n\n    if (mode === 'create') {\n      if (!validateUsername(username)) {\n        showNotification('Invalid username format', 'error');\n        return;\n      }\n\n      if (!isUsernameAvailable) {\n        showNotification('Username is not available', 'error');\n        return;\n      }\n    }\n\n    // Check wallet connection\n    if (!isConnected) {\n      showNotification('Please connect your wallet to create a profile', 'error');\n      return;\n    }\n\n    if (!isTargetNetwork) {\n      showNotification('Please switch to the correct network', 'error');\n      return;\n    }\n\n    console.log('[ProfileForm] Starting profile creation/update...');\n    setIsLoading(true);\n    \n    try {\n      // Prepare metadata for both create and edit modes\n      const metadata = JSON.stringify({\n        avatar: avatar,\n        bio: bio,\n        location: location,\n        website: website,\n        social: {\n          twitter: twitter,\n          instagram: instagram,\n          discord: discord\n        }\n      });\n      \n      // Create or update profile\n      if (mode === 'edit' && existingProfile) {\n        // For edit mode, still use the SDK update function\n        try {\n          // Convert tokenId to number if it's a string or bigint\n          const tokenId = typeof existingProfile.tokenId === 'string' \n            ? parseInt(existingProfile.tokenId) \n            : typeof existingProfile.tokenId === 'bigint'\n              ? Number(existingProfile.tokenId)\n              : existingProfile.tokenId || 0;\n              \n          console.log(`[ProfileForm] Updating profile ${tokenId}`);\n          \n          await updateProfileMetadata(tokenId, metadata);\n          showNotification('Profile updated successfully!', 'success');\n        } catch (error) {\n          const err = error as Error;\n          console.error('[ProfileForm] Error updating profile:', err);\n          showNotification(`Update failed: ${err.message}`, 'error');\n          setIsLoading(false);\n          return;\n        }\n      } else {\n        // For create mode, use our direct approach ONLY\n        try {\n          console.log('[ProfileForm] Attempting direct profile creation');\n          \n          // Send transaction directly - NEVER try to use the SDK for creation\n          const hash = await createProfileDirectly(username, metadata);\n          showNotification('Profile creation transaction submitted!', 'success');\n        } catch (error) {\n          const err = error as Error;\n          console.error('[ProfileForm] Direct profile creation failed:', err);\n          showNotification(`Error: ${err.message}`, 'error');\n          setIsLoading(false);\n          return;\n        }\n      }\n      \n      // Handle success\n      if (onSuccess) {\n        onSuccess();\n      } else {\n        navigate('/dashboard');\n      }\n    } catch (err) {\n      // This block catches any other errors that might occur\n      const error = err as Error;\n      console.error('[ProfileForm] Unexpected error during form submission:', error);\n      showNotification(`Unexpected error: ${error.message}`, 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add network switch handler - moved the hook call to the top level\n  const handleSwitchNetwork = async () => {\n    try {\n      await switchNetwork(MONAD_DEVNET.id);\n      showNotification('Switching to Monad Devnet...', 'info');\n    } catch (err) {\n      console.error('[ProfileForm] Network switch error:', err);\n      showNotification('Failed to switch network', 'error');\n    }\n  };\n\n  // If wallet is loading, show loading indicator\n  if (isWalletLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-theme-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      <h1 className=\"text-3xl font-bold mb-2\">\n        {mode === 'edit' ? 'Edit Profile' : 'Create Your Profile'}\n      </h1>\n      <p className=\"text-gray-400 mb-8\">\n        {mode === 'edit' \n          ? 'Update your profile information.'\n          : 'Choose a unique username and fill in your profile details.'}\n      </p>\n\n      {/* Network warning */}\n      {!isTargetNetwork && (\n        <div className=\"mb-6 p-4 bg-red-500/10 border border-red-500 rounded-lg\">\n          <h3 className=\"text-lg font-medium text-red-500 mb-2\">Wrong Network</h3>\n          <p className=\"text-gray-300 mb-3\">\n            You need to be on the Monad Devnet to create or update your profile.\n            {currentChainId && (\n              <span className=\"block mt-1\">\n                Current network: Chain ID {currentChainId} / Required: Chain ID {MONAD_DEVNET.id}\n              </span>\n            )}\n          </p>\n          <button\n            onClick={handleSwitchNetwork}\n            className=\"py-2 px-4 bg-red-500 text-white rounded-lg font-medium transition-colors hover:bg-red-600\"\n          >\n            Switch to Monad Devnet\n          </button>\n        </div>\n      )}\n\n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        {/* Username Input */}\n        <div>\n          <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-300\">\n            Username {mode === 'create' && '*'}\n          </label>\n          <div className=\"mt-1 relative\">\n            <input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              required={mode === 'create'}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              disabled={mode === 'edit'}\n              className={`appearance-none block w-full px-3 py-2 bg-black/50 border ${\n                !isUsernameAvailable ? 'border-red-500' : \n                isCheckingUsername ? 'border-yellow-500' : \n                isUsernameAvailable && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH ? 'border-green-500' : \n                'border-white/10'\n              } rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent ${\n                mode === 'edit' ? 'opacity-50 cursor-not-allowed' : ''\n              }`}\n              placeholder=\"Enter username\"\n            />\n            \n            {/* Inline status indicators */}\n            <div className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n              {isCheckingUsername && (\n                <div className=\"text-yellow-400 animate-spin h-5 w-5\">⟳</div>\n              )}\n              \n              {!isCheckingUsername && mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && isUsernameAvailable && (\n                <div className=\"text-green-500 text-xl\">✓</div>\n              )}\n              \n              {!isCheckingUsername && mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && !isUsernameAvailable && (\n                <div className=\"text-red-500 text-xl\">✗</div>\n              )}\n            </div>\n          </div>\n          \n          {/* Username validation messages */}\n          {mode === 'create' && username.length > 0 && username.length < USERNAME_CONSTRAINTS.MIN_LENGTH && (\n            <p className=\"mt-1 text-sm text-yellow-500\">Username must be at least {USERNAME_CONSTRAINTS.MIN_LENGTH} characters</p>\n          )}\n          \n          {mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && !isUsernameAvailable && (\n            <p className=\"mt-1 text-sm text-red-500\">Username is not available</p>\n          )}\n          \n          {mode === 'create' && username.length >= USERNAME_CONSTRAINTS.MIN_LENGTH && isUsernameAvailable && !isCheckingUsername && (\n            <p className=\"mt-1 text-sm text-green-500\">Username is available</p>\n          )}\n        </div>\n\n        {/* Avatar URL */}\n        <div>\n          <label htmlFor=\"avatar\" className=\"block text-sm font-medium text-gray-300\">\n            Avatar URL (optional)\n          </label>\n          <div className=\"mt-1\">\n            <input\n              id=\"avatar\"\n              name=\"avatar\"\n              type=\"text\"\n              value={avatar}\n              onChange={(e) => setAvatar(e.target.value)}\n              className=\"appearance-none block w-full px-3 py-2 bg-black/50 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent\"\n              placeholder=\"Enter avatar URL\"\n            />\n          </div>\n        </div>\n\n        {/* Bio Input */}\n        <div>\n          <label htmlFor=\"bio\" className=\"block text-sm font-medium text-gray-300\">\n            Bio (optional)\n          </label>\n          <div className=\"mt-1\">\n            <textarea\n              id=\"bio\"\n              name=\"bio\"\n              rows={3}\n              value={bio}\n              onChange={(e) => setBio(e.target.value)}\n              className=\"appearance-none block w-full px-3 py-2 bg-black/50 border border-white/10 rounded-lg focus:outline-none focus:ring-2 focus:ring-theme-primary focus:border-transparent resize-none\"\n              placeholder=\"Tell us about yourself\"\n            />\n          </div>\n        </div>\n\n        {/* Submit buttons */}\n        <div className=\"flex space-x-4\">\n          {onCancel && (\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              disabled={isLoading}\n              className=\"flex-1 py-2 px-4 bg-white/5 text-white rounded-lg font-medium hover:bg-white/10 transition-colors border border-white/10 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Cancel\n            </button>\n          )}\n          <button\n            type=\"submit\"\n            disabled={\n              isLoading || \n              isCheckingUsername || \n              (mode === 'create' && (\n                !username || \n                username.length < USERNAME_CONSTRAINTS.MIN_LENGTH || \n                !isUsernameAvailable\n              ))\n            }\n            className=\"flex-1 py-2 px-4 bg-theme-primary text-black rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed relative\"\n          >\n            {/* Show spinner inside button when loading */}\n            {isLoading && (\n              <span className=\"absolute inset-0 flex items-center justify-center bg-theme-primary rounded-lg\">\n                <div className=\"animate-spin h-5 w-5 border-2 border-black border-t-transparent rounded-full\"></div>\n              </span>\n            )}\n            {isLoading \n              ? (mode === 'edit' ? 'Saving...' : 'Creating...') \n              : (mode === 'edit' ? 'Save Changes' : 'Create Profile')}\n          </button>\n        </div>\n\n        <p className=\"mt-4 text-sm text-center text-gray-400\">\n          {mode === 'edit'\n            ? 'This action requires a small gas fee to update your profile'\n            : 'This action requires a small gas fee to mint your profile NFT'}\n        </p>\n      </form>\n    </div>\n  );\n} ","import React, { useEffect } from 'react';\nimport { ProfileForm } from '../components/profile/ProfileForm';\nimport { Navigation } from '../components/Navigation';\n\nexport function UsernameAvatarSetup() {\n  // Add protection to prevent unwanted navigation cycles\n  useEffect(() => {\n    console.log('[UsernameAvatarSetup] Component mounted');\n    // Mark that we're on this page, so profile checks won't navigate away\n    window.localStorage.setItem('on_profile_setup_page', 'true');\n    \n    return () => {\n      console.log('[UsernameAvatarSetup] Component unmounting');\n      window.localStorage.removeItem('on_profile_setup_page');\n    };\n  }, []);\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-black text-white\">\n      <Navigation onMenuClick={() => {}} />\n      \n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"bg-white/[0.02] backdrop-blur-xl rounded-2xl border border-white/10 p-8\">\n          <ProfileForm mode=\"create\" />\n        </div>\n      </div>\n    </div>\n  );\n} ","import React, { useState, useMemo } from 'react';\n\ninterface FeedLayoutProps {\n  children: React.ReactNode;\n  leftSidebar?: React.ReactNode;\n  rightSidebar?: React.ReactNode;\n}\n\nexport function FeedLayout({ children, rightSidebar }: FeedLayoutProps) {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"w-full max-w-[1200px] mx-auto px-4 sm:px-6 py-8\">\n        <div className=\"flex gap-8\">\n\n          {/* Main Content */}\n          <div className=\"flex-1 min-w-0 max-w-[800px] mx-auto lg:mx-0\">\n            {children}\n          </div>\n\n          {/* Right Sidebar */}\n          {rightSidebar && (\n            <div className=\"hidden lg:block w-[380px] flex-shrink-0\">\n              {rightSidebar}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n} ","/**\n * Generates an avatar URL from an Ethereum address using DiceBear API\n * @param address The Ethereum address to generate an avatar for\n * @returns A URL to the generated avatar\n */\nexport function generateAvatarFromAddress(address: string | undefined | null): string {\n  // Handle undefined or null address\n  if (!address) {\n    console.warn('No address provided for avatar generation, using default');\n    return `https://api.dicebear.com/7.x/identicon/svg?seed=default&backgroundColor=transparent`;\n  }\n\n  // Remove '0x' prefix if present and take first 8 characters as seed\n  const seed = address.startsWith('0x') ? address.substring(2, 10) : address.substring(0, 8);\n  \n  // Use DiceBear API to generate a consistent avatar\n  return `https://api.dicebear.com/7.x/identicon/svg?seed=${seed}&backgroundColor=transparent`;\n} ","import React from 'react';\nimport { generateAvatarFromAddress } from '../../utils/avatar';\n\ninterface UserAvatarProps {\n  address?: string;\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showUsername?: boolean;\n}\n\nconst UserAvatar: React.FC<UserAvatarProps> = ({ address, className = '' }) => {\n  const avatarUrl = React.useMemo(() => generateAvatarFromAddress(address), [address]);\n  \n  return (\n    <div \n      className={`relative overflow-hidden rounded-full bg-neutral-200 dark:bg-neutral-800 ${className}`}\n      title={address || 'Unknown User'}\n    >\n      <img\n        src={avatarUrl}\n        alt={`Avatar for ${address || 'Unknown User'}`}\n        className=\"w-full h-full object-cover\"\n        loading=\"lazy\"\n      />\n      <div className=\"absolute inset-0 ring-1 ring-inset ring-black/10 dark:ring-white/10 rounded-full\" />\n    </div>\n  );\n};\n\nexport default UserAvatar; ","import { cva } from 'class-variance-authority';\nimport { colors } from '../../../theme/foundations/colors';\n\n// Type colors - Maps post types to consistent colors \nconst TYPE_COLORS = {\n  text: {\n    border: 'border-neutral-800 hover:border-neutral-700',\n    accent: 'bg-neutral-800/30 text-neutral-200',\n    icon: 'text-neutral-400',\n  },\n  image: {\n    border: 'border-blue-900 hover:border-blue-800',\n    accent: 'bg-blue-900/30 text-blue-200',\n    icon: 'text-blue-400',\n  },\n  video: {\n    border: 'border-purple-900 hover:border-purple-800',\n    accent: 'bg-purple-900/30 text-purple-200',\n    icon: 'text-purple-400',\n  },\n  link: {\n    border: 'border-green-900 hover:border-green-800',\n    accent: 'bg-green-900/30 text-green-200',\n    icon: 'text-green-400',\n  },\n  event: {\n    border: 'border-yellow-900 hover:border-yellow-800',\n    accent: 'bg-yellow-900/30 text-yellow-200',\n    icon: 'text-yellow-400',\n  },\n  poll: {\n    border: 'border-orange-900 hover:border-orange-800',\n    accent: 'bg-orange-900/30 text-orange-200',\n    icon: 'text-orange-400',\n  },\n  bounty: {\n    border: 'border-emerald-900 hover:border-emerald-800',\n    accent: 'bg-emerald-900/30 text-emerald-200',\n    icon: 'text-emerald-400',\n  },\n  project: {\n    border: 'border-indigo-900 hover:border-indigo-800',\n    accent: 'bg-indigo-900/30 text-indigo-200',\n    icon: 'text-indigo-400',\n  },\n};\n\n// Base post container styles with more refined styling\nexport const postContainerStyles = cva(\n  'relative w-full rounded-xl border p-5 shadow-md transition-all hover:shadow-lg bg-neutral-900 text-white backdrop-blur-sm',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.border,\n        image: TYPE_COLORS.image.border,\n        video: TYPE_COLORS.video.border,\n        link: TYPE_COLORS.link.border,\n        event: TYPE_COLORS.event.border,\n        poll: TYPE_COLORS.poll.border,\n        bounty: TYPE_COLORS.bounty.border,\n        project: TYPE_COLORS.project.border,\n      },\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Badge for post type indicator\nexport const postTypeBadgeStyles = cva(\n  'absolute top-4 right-4 inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.accent,\n        image: TYPE_COLORS.image.accent,\n        video: TYPE_COLORS.video.accent,\n        link: TYPE_COLORS.link.accent,\n        event: TYPE_COLORS.event.accent,\n        poll: TYPE_COLORS.poll.accent,\n        bounty: TYPE_COLORS.bounty.accent,\n        project: TYPE_COLORS.project.accent,\n      }\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Icon container for post type\nexport const postTypeIconStyles = cva(\n  'flex items-center justify-center w-10 h-10 rounded-full',\n  {\n    variants: {\n      type: {\n        text: TYPE_COLORS.text.accent,\n        image: TYPE_COLORS.image.accent,\n        video: TYPE_COLORS.video.accent,\n        link: TYPE_COLORS.link.accent,\n        event: TYPE_COLORS.event.accent,\n        poll: TYPE_COLORS.poll.accent,\n        bounty: TYPE_COLORS.bounty.accent,\n        project: TYPE_COLORS.project.accent,\n      }\n    },\n    defaultVariants: {\n      type: 'text',\n    },\n  }\n);\n\n// Tag styles with refined design\nexport const tagStyles = cva(\n  'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'bg-neutral-800 text-neutral-200 hover:bg-neutral-700',\n        blue: 'bg-blue-900/50 text-blue-200 hover:bg-blue-800/50',\n        purple: 'bg-purple-900/50 text-purple-200 hover:bg-purple-800/50',\n        green: 'bg-green-900/50 text-green-200 hover:bg-green-800/50',\n        yellow: 'bg-yellow-900/50 text-yellow-200 hover:bg-yellow-800/50',\n        orange: 'bg-orange-900/50 text-orange-200 hover:bg-orange-800/50',\n        red: 'bg-red-900/50 text-red-200 hover:bg-red-800/50',\n        indigo: 'bg-indigo-900/50 text-indigo-200 hover:bg-indigo-800/50',\n        emerald: 'bg-emerald-900/50 text-emerald-200 hover:bg-emerald-800/50',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\n// Action button styles with improved hover states\nexport const actionButtonStyles = cva(\n  'inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors',\n  {\n    variants: {\n      variant: {\n        default: 'text-neutral-400 hover:bg-neutral-800 hover:text-white',\n        primary: 'text-primary hover:bg-primary/20',\n        destructive: 'text-red-400 hover:bg-red-900/20 hover:text-red-200',\n        success: 'text-green-400 hover:bg-green-900/20 hover:text-green-200',\n      },\n      active: {\n        true: '',\n        false: '',\n      }\n    },\n    compoundVariants: [\n      {\n        variant: 'default',\n        active: true,\n        className: 'text-white bg-neutral-800',\n      },\n      {\n        variant: 'primary',\n        active: true,\n        className: 'text-white bg-primary/20',\n      },\n      {\n        variant: 'destructive',\n        active: true,\n        className: 'text-red-200 bg-red-900/20',\n      },\n      {\n        variant: 'success',\n        active: true,\n        className: 'text-green-200 bg-green-900/20',\n      },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      active: false,\n    },\n  }\n);\n\n// Post metadata styles with improved spacing\nexport const metadataStyles = 'flex items-center gap-2 text-sm text-neutral-400 mt-2';\n\n// Post content styles with better readability\nexport const contentStyles = 'mt-4 text-neutral-100 whitespace-pre-wrap break-words leading-relaxed text-base';\n\n// Media container styles with subtle shadow\nexport const mediaContainerStyles = 'mt-4 overflow-hidden rounded-lg border border-neutral-800 shadow-sm';\n\n// Author styles with improved spacing\nexport const authorStyles = 'flex items-center gap-3';\nexport const authorNameStyles = 'font-semibold text-white hover:text-accent transition-colors';\nexport const authorAvatarStyles = 'h-10 w-10 rounded-full bg-neutral-800';\n\n// Timestamp styles\nexport const timestampStyles = 'text-sm text-neutral-400';\n\n// Section divider\nexport const dividerStyles = 'border-t border-neutral-800 my-4';\n\n// Button styles\nexport const buttonStyles = cva(\n  'inline-flex items-center justify-center rounded-lg px-4 py-2 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-neutral-900',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-accent text-black hover:bg-accent/90 focus:ring-accent/50',\n        secondary: 'bg-neutral-800 text-white hover:bg-neutral-700 focus:ring-neutral-400/30',\n        outline: 'border border-neutral-700 text-white hover:bg-neutral-800 focus:ring-neutral-400/30',\n        destructive: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-400/30',\n        ghost: 'text-white hover:bg-neutral-800 focus:ring-neutral-400/30',\n      },\n      size: {\n        sm: 'text-xs px-2.5 py-1.5',\n        md: 'text-sm px-4 py-2',\n        lg: 'text-base px-5 py-2.5',\n      },\n      fullWidth: {\n        true: 'w-full',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n    },\n  }\n); ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag } from 'lucide-react';\n\ninterface TextPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst TextPost: React.FC<TextPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'text' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className={contentStyles}>\n        {post.content}\n      </div>\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-700 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default TextPost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, Maximize2 } from 'lucide-react';\n\ninterface ImagePostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst ImagePost: React.FC<ImagePostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [isImageExpanded, setIsImageExpanded] = React.useState(false);\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handleImageClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsImageExpanded(!isImageExpanded);\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Get the first image from media array\n  const mainImage = post.metadata?.media?.[0];\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'image' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Title */}\n      {post.metadata?.title && (\n        <h3 className=\"text-lg font-semibold mt-3 text-white\">\n          {post.metadata.title}\n        </h3>\n      )}\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Image */}\n      {mainImage && (\n        <div \n          className={`${mediaContainerStyles} relative group cursor-pointer`}\n          onClick={handleImageClick}\n        >\n          <div className=\"relative aspect-video w-full overflow-hidden\">\n            <img\n              src={mainImage.url}\n              alt={post.metadata?.title || 'Post image'}\n              className=\"w-full h-full object-cover transition-transform duration-200 group-hover:scale-105\"\n              loading=\"lazy\"\n            />\n          </div>\n          <button \n            className=\"absolute top-2 right-2 p-1 rounded-full bg-black/50 text-white opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsImageExpanded(true);\n            }}\n          >\n            <Maximize2 className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-700 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n\n      {/* Image Modal */}\n      {isImageExpanded && mainImage && (\n        <div \n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/80\"\n          onClick={() => setIsImageExpanded(false)}\n        >\n          <div className=\"relative max-h-[90vh] max-w-[90vw]\">\n            <img\n              src={mainImage.url}\n              alt={post.metadata?.title || 'Post image'}\n              className=\"max-h-[90vh] max-w-[90vw] object-contain\"\n              loading=\"lazy\"\n            />\n            <button \n              className=\"absolute top-4 right-4 p-2 rounded-full bg-black/50 text-white\"\n              onClick={() => setIsImageExpanded(false)}\n            >\n              <Maximize2 className=\"h-6 w-6\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default ImagePost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, Play, Pause, Volume2, VolumeX } from 'lucide-react';\n\ninterface VideoPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst VideoPost: React.FC<VideoPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [isMuted, setIsMuted] = React.useState(true);\n\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handlePlayPause = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (videoRef.current) {\n      if (isPlaying) {\n        videoRef.current.pause();\n      } else {\n        videoRef.current.play();\n      }\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const handleMuteToggle = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (videoRef.current) {\n      videoRef.current.muted = !isMuted;\n      setIsMuted(!isMuted);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Get the first video from media array\n  const mainVideo = post.metadata?.media?.find(m => m.type === 'video');\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'video' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Video */}\n      {mainVideo && (\n        <div className={`${mediaContainerStyles} relative group`}>\n          <video\n            ref={videoRef}\n            src={mainVideo.url}\n            className=\"w-full aspect-video object-cover\"\n            loop\n            muted={isMuted}\n            playsInline\n            onClick={(e) => e.stopPropagation()}\n          />\n          <div className=\"absolute inset-0 bg-black/20 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n            <div className=\"flex items-center gap-4\">\n              <button\n                className=\"p-2 rounded-full bg-black/50 text-white hover:bg-black/70 transition-colors\"\n                onClick={handlePlayPause}\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-6 w-6\" />\n                ) : (\n                  <Play className=\"h-6 w-6\" />\n                )}\n              </button>\n              <button\n                className=\"p-2 rounded-full bg-black/50 text-white hover:bg-black/70 transition-colors\"\n                onClick={handleMuteToggle}\n              >\n                {isMuted ? (\n                  <VolumeX className=\"h-6 w-6\" />\n                ) : (\n                  <Volume2 className=\"h-6 w-6\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag, index) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-200 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default VideoPost; ","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  postContainerStyles, \n  tagStyles, \n  actionButtonStyles,\n  metadataStyles,\n  contentStyles,\n  authorStyles,\n  authorNameStyles,\n  timestampStyles,\n  mediaContainerStyles\n} from '../styles/post.styles';\nimport { Heart, MessageCircle, Share2, Flag, ExternalLink } from 'lucide-react';\n\ninterface LinkPostProps {\n  post: Post | any;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst LinkPost: React.FC<LinkPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const handleLinkClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (post.metadata?.link) {\n      window.open(post.metadata.link, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <article \n      className={postContainerStyles({ type: 'link' })}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Link Preview */}\n      {post.metadata?.link && (\n        <div \n          className={`${mediaContainerStyles} group cursor-pointer hover:border-neutral-300 transition-colors`}\n          onClick={handleLinkClick}\n        >\n          <div className=\"p-4\">\n            {post.metadata.title && (\n              <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\">\n                {post.metadata.title}\n              </h3>\n            )}\n            {post.metadata.description && (\n              <p className=\"text-neutral-600 line-clamp-2\">\n                {post.metadata.description}\n              </p>\n            )}\n            <div className=\"mt-2 flex items-center text-neutral-500 text-sm\">\n              <ExternalLink className=\"h-4 w-4 mr-1\" />\n              <span className=\"truncate\">\n                {post.metadata.link}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-3 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag: string, index: number) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Actions */}\n      {showActions && (\n        <div className=\"mt-4 flex items-center justify-between border-t border-neutral-200 pt-3\">\n          <div className=\"flex items-center gap-2\">\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onLike?.();\n              }}\n            >\n              <Heart className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.likeCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onComment?.();\n              }}\n            >\n              <MessageCircle className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.commentCount || 0}</span>\n            </button>\n            <button \n              className={actionButtonStyles({ variant: 'default' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onShare?.();\n              }}\n            >\n              <Share2 className=\"mr-1 h-4 w-4\" />\n              <span>{post.stats?.shareCount || 0}</span>\n            </button>\n          </div>\n          <button \n            className={actionButtonStyles({ variant: 'destructive' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              onReport?.();\n            }}\n          >\n            <Flag className=\"h-4 w-4\" />\n          </button>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default LinkPost; ","import { Post } from './post';\n\n/**\n * Blockchain Event data matching the EventController contract structure\n */\nexport interface BlockchainEvent {\n  metadataURI: string;  // IPFS URI containing event details\n  organizer: string;    // Address of event organizer\n  maxTickets: number;   // Maximum number of tickets available\n  ticketsSold: number;  // Number of tickets already sold\n  price: bigint;        // Price in wei\n  active: boolean;      // Whether the event is active or cancelled\n}\n\n/**\n * Represents an event ticket purchase on the blockchain\n */\nexport interface EventTicket {\n  eventId: number;      // Blockchain event ID\n  tokenId: number;      // NFT token ID\n  owner: string;        // Ticket owner address\n  purchasedAt: number;  // Timestamp when ticket was purchased\n  used: boolean;        // Whether the ticket has been used\n}\n\n/**\n * Represents a speaker at an event\n */\nexport interface EventSpeaker {\n  name: string;\n  role?: string;\n  avatar?: string;\n  bio?: string;\n  social?: {\n    twitter?: string;\n    linkedin?: string;\n    website?: string;\n  };\n}\n\n/**\n * Represents an agenda item for an event\n */\nexport interface EventAgendaItem {\n  title: string;\n  time?: string;\n  description?: string;\n  speaker?: string; // Reference to a speaker name\n  duration?: string;\n}\n\n/**\n * Enum for event accessibility types\n */\nexport enum EventAccessibilityType {\n  FULLY_ACCESSIBLE = 'fully_accessible',\n  LIMITED_ACCESSIBILITY = 'limited_accessibility',\n  NOT_ACCESSIBLE = 'not_accessible',\n}\n\n/**\n * Enum for event cost types\n */\nexport enum EventCostType {\n  FREE = 'free',\n  PAID = 'paid',\n  DONATION = 'donation',\n}\n\n/**\n * Represents complete event details - this is what would be stored\n * in the metadataURI field on the blockchain\n */\nexport interface EventDetails {\n  // Basic event information\n  title: string;        // Event title\n  startDate: string;    // ISO string\n  endDate?: string;     // ISO string\n  location?: string;\n  virtualLink?: string;\n  description?: string; // Detailed event description\n  \n  // Blockchain-specific fields\n  eventId?: number;     // Blockchain event ID (if already created)\n  contractAddress?: string; // Address of the EventController contract\n  organizer: string;    // Address of event organizer\n  price?: string;       // Human-readable price (e.g., \"0.1 ETH\")\n  priceInWei?: string;  // Price in wei as string (for big numbers)\n  maxTickets: number;   // Maximum number of tickets\n  ticketsSold?: number; // Number of tickets sold\n  active?: boolean;     // Whether the event is active\n  isOnChain?: boolean;  // Whether this event exists on the blockchain\n  ipfsHash?: string;    // IPFS hash for the metadata if stored on IPFS\n  \n  // Capacity information (UI-specific)\n  maxAttendees?: number;\n  currentAttendees?: number;\n  \n  // Additional details\n  cost?: string;\n  costType?: EventCostType;\n  category?: string;\n  accessibility?: EventAccessibilityType | string;\n  \n  // Rich content\n  speakers?: EventSpeaker[];\n  agenda?: EventAgendaItem[];\n  \n  // Additional fields\n  rsvpLink?: string;\n  ticketUrl?: string;\n  isCancelled?: boolean;\n  cancelReason?: string;\n  coverImage?: string;  // URL to event cover image\n  \n  // Social features\n  attendees?: string[]; // List of attendee addresses\n  interestedCount?: number; // Number of users interested but not attending\n}\n\n/**\n * Helper function to extract event details from post metadata\n * Handles different metadata structures and provides fallbacks\n */\nexport const extractEventDetails = (post: Post): EventDetails => {\n  // Try to get event details from the standard location first\n  const eventFromDetails = post.metadata?.eventDetails;\n  // Try legacy format\n  const eventFromLegacy = post.metadata?.event;\n  \n  // Create default structure with the post author as fallback organizer\n  const defaultDetails: EventDetails = {\n    title: post.metadata?.title || '',\n    startDate: new Date().toISOString(), // Default to now if no date provided\n    organizer: post.author,\n    maxTickets: 0,\n    currentAttendees: 0,\n    speakers: [],\n    agenda: []\n  };\n  \n  // Merge details in priority order: default < legacy < current\n  return {\n    ...defaultDetails,\n    ...(eventFromLegacy || {}),\n    ...(eventFromDetails || {})\n  };\n};\n\n/**\n * Helper function to check if a Post is an event type\n */\nexport const isEventPost = (post: Post): boolean => {\n  // Check through multiple ways to identify an event post\n  return (\n    // Check by type enum\n    post.type === 4 ||\n    // Check by string type\n    post.type?.toString().toLowerCase() === 'event' ||\n    // Check by metadata\n    !!post.metadata?.eventDetails ||\n    !!post.metadata?.event\n  );\n};\n\n/**\n * Convert frontend EventDetails to blockchain format\n * This prepares event data for storage on-chain\n */\nexport const eventDetailsToBlockchain = (details: EventDetails): {\n  metadataJson: string;\n  maxTickets: number;\n  price: bigint;\n} => {\n  // Create a copy of the details suitable for IPFS storage\n  const metadataForIpfs = {\n    title: details.title,\n    description: details.description || '',\n    startDate: details.startDate,\n    endDate: details.endDate,\n    location: details.location,\n    virtualLink: details.virtualLink,\n    organizer: details.organizer,\n    category: details.category,\n    speakers: details.speakers,\n    agenda: details.agenda,\n    coverImage: details.coverImage,\n    accessibility: details.accessibility\n  };\n\n  // Convert price from ETH string to wei if provided\n  const priceInWei = details.priceInWei \n    ? BigInt(details.priceInWei) \n    : details.price \n      ? BigInt(parseFloat(details.price) * 1e18) // Simple ETH to wei conversion\n      : BigInt(0);\n      \n  return {\n    metadataJson: JSON.stringify(metadataForIpfs),\n    maxTickets: details.maxTickets || 0,\n    price: priceInWei\n  };\n};\n\n/**\n * Convert blockchain event to frontend format\n */\nexport const blockchainToEventDetails = (\n  blockchainEvent: BlockchainEvent, \n  eventId: number,\n  metadata?: any // Parsed metadata JSON from IPFS\n): EventDetails => {\n  // Provide defaults if metadata is missing\n  const parsedMetadata = metadata || {};\n  \n  return {\n    title: parsedMetadata.title || `Event #${eventId}`,\n    description: parsedMetadata.description || '',\n    startDate: parsedMetadata.startDate || new Date().toISOString(),\n    endDate: parsedMetadata.endDate,\n    location: parsedMetadata.location,\n    virtualLink: parsedMetadata.virtualLink,\n    \n    // Blockchain-specific fields\n    eventId,\n    organizer: blockchainEvent.organizer,\n    maxTickets: blockchainEvent.maxTickets,\n    ticketsSold: blockchainEvent.ticketsSold,\n    priceInWei: blockchainEvent.price.toString(),\n    price: (Number(blockchainEvent.price) / 1e18).toString(), // Convert wei to ETH\n    active: blockchainEvent.active,\n    isOnChain: true,\n    ipfsHash: blockchainEvent.metadataURI.replace('ipfs://', ''),\n    \n    // Additional details from metadata\n    category: parsedMetadata.category,\n    accessibility: parsedMetadata.accessibility,\n    speakers: parsedMetadata.speakers || [],\n    agenda: parsedMetadata.agenda || [],\n    coverImage: parsedMetadata.coverImage,\n    \n    // UI-specific derived fields\n    isCancelled: !blockchainEvent.active,\n    maxAttendees: blockchainEvent.maxTickets,\n    currentAttendees: blockchainEvent.ticketsSold\n  };\n}; ","import { EventDetails, BlockchainEvent } from '../types/event';\n\n/**\n * Service for interacting with events on the blockchain\n * This is currently a mock implementation for UI testing\n */\nexport class EventsService {\n  /**\n   * Gets the number of tickets a user owns for an event\n   * @param eventId The blockchain event ID\n   * @param userAddress The user's wallet address\n   * @returns Number of tickets owned\n   */\n  static async getUserTickets(eventId: number, userAddress: string): Promise<number> {\n    console.log(`Getting tickets for event ${eventId} and user ${userAddress}`);\n    \n    // For demonstration, we'll return a mock value\n    // In a real implementation, this would call the blockchain\n    return localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) \n      ? parseInt(localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) || '0') \n      : 0;\n  }\n  \n  /**\n   * Purchases tickets for an event\n   * @param eventId The blockchain event ID\n   * @param amount Number of tickets to purchase\n   * @returns A transaction hash (mock)\n   */\n  static async purchaseTickets(eventId: number, amount: number): Promise<string> {\n    console.log(`Purchasing ${amount} tickets for event ${eventId}`);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    \n    // In a real implementation, this would call the blockchain\n    // For now, let's just store in localStorage to simulate persistence\n    \n    // Get connected wallet (mock)\n    const userAddress = localStorage.getItem('connectedWallet');\n    if (!userAddress) {\n      throw new Error('No wallet connected');\n    }\n    \n    // Update ticket count\n    const currentTickets = localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`)\n      ? parseInt(localStorage.getItem(`event-${eventId}-user-${userAddress}-tickets`) || '0')\n      : 0;\n      \n    localStorage.setItem(\n      `event-${eventId}-user-${userAddress}-tickets`, \n      (currentTickets + amount).toString()\n    );\n    \n    // Return mock tx hash\n    return `0x${Math.random().toString(16).substring(2)}`;\n  }\n  \n  /**\n   * Create a new event on the blockchain\n   * @param eventDetails Event details to store\n   * @returns Transaction hash and event ID (mock)\n   */\n  static async createEvent(eventDetails: EventDetails): Promise<{ hash: string; eventId: number }> {\n    console.log('Creating event:', eventDetails);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // Generate random event ID\n    const eventId = Math.floor(Math.random() * 1000) + 1;\n    \n    // Return mock values\n    return {\n      hash: `0x${Math.random().toString(16).substring(2)}`,\n      eventId\n    };\n  }\n  \n  /**\n   * Get an event by ID\n   * @param eventId Event ID\n   * @returns Event details or null\n   */\n  static async getEvent(eventId: number): Promise<EventDetails | null> {\n    console.log(`Getting event ${eventId}`);\n    \n    // In a real implementation, this would fetch from the blockchain\n    // For demo purposes, return mock data\n    return {\n      title: `Event #${eventId}`,\n      startDate: new Date().toISOString(),\n      endDate: new Date(Date.now() + 86400000).toISOString(),\n      location: 'Mock Location',\n      eventId,\n      isOnChain: true,\n      organizer: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n      maxTickets: 100,\n      ticketsSold: 45,\n      price: '0.05',\n      active: true,\n      priceInWei: '50000000000000000'\n    };\n  }\n  \n  /**\n   * Cancel an event on the blockchain\n   * @param eventId Event ID to cancel\n   * @returns Transaction hash (mock)\n   */\n  static async cancelEvent(eventId: number): Promise<string> {\n    console.log(`Cancelling event ${eventId}`);\n    \n    // Simulate blockchain delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Return mock tx hash\n    return `0x${Math.random().toString(16).substring(2)}`;\n  }\n} ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../types/post';\nimport UserAvatar from '../user/UserAvatar';\nimport { Heart, MessageCircle, Share2, Flag } from 'lucide-react';\nimport { \n  postContainerStyles, \n  authorStyles, \n  authorNameStyles, \n  timestampStyles, \n  contentStyles,\n  actionButtonStyles,\n  dividerStyles,\n  postTypeBadgeStyles\n} from './styles/post.styles';\n\nexport interface BasePostProps {\n  post: Post;\n  postType: string; // 'text', 'image', 'video', etc.\n  typeIcon?: React.ReactNode;\n  typeName?: string;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst BasePost: React.FC<BasePostProps> = ({\n  post,\n  postType,\n  typeIcon,\n  typeName,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true,\n  className = '',\n  children\n}) => {\n  const [isLiked, setIsLiked] = useState(false);\n  \n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsLiked(!isLiked);\n    onLike?.();\n  };\n  \n  const handleClick = () => {\n    if (onClick) {\n      onClick(post.id);\n    }\n  };\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDistanceToNow(new Date(post.createdAt), { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return 'some time ago';\n    }\n  }, [post.createdAt]);\n\n  return (\n    <article \n      className={`${postContainerStyles({ type: postType as any })} ${className}`}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      {/* Post Type Badge - if provided */}\n      {typeIcon && typeName && (\n        <div className={postTypeBadgeStyles({ type: postType as any })}>\n          {typeIcon}\n          <span>{typeName}</span>\n        </div>\n      )}\n      \n      {/* Author section */}\n      <div className={authorStyles}>\n        <UserAvatar \n          address={post.author} \n          className=\"h-10 w-10\"\n        />\n        <div className=\"flex flex-col\">\n          <a \n            href={`/profile/${post.author}`} \n            className={authorNameStyles}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {post.author}\n          </a>\n          <time className={timestampStyles}>\n            {formattedDate}\n          </time>\n        </div>\n      </div>\n\n      {/* Content */}\n      {post.content && (\n        <div className={contentStyles}>\n          {post.content}\n        </div>\n      )}\n\n      {/* Custom content for different post types */}\n      {children}\n\n      {/* Actions */}\n      {showActions && (\n        <>\n          <div className={dividerStyles} />\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <button \n                className={actionButtonStyles({ variant: 'default', active: isLiked })}\n                onClick={handleLike}\n              >\n                <Heart className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.likeCount || 0}</span>\n              </button>\n              <button \n                className={actionButtonStyles({ variant: 'default' })}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onComment?.();\n                }}\n              >\n                <MessageCircle className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.commentCount || 0}</span>\n              </button>\n              <button \n                className={actionButtonStyles({ variant: 'default' })}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onShare?.();\n                }}\n              >\n                <Share2 className=\"mr-1 h-4 w-4\" />\n                <span>{post.stats?.shareCount || 0}</span>\n              </button>\n            </div>\n            <button \n              className={actionButtonStyles({ variant: 'destructive' })}\n              onClick={(e) => {\n                e.stopPropagation();\n                onReport?.();\n              }}\n            >\n              <Flag className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </>\n      )}\n    </article>\n  );\n};\n\nexport default BasePost; ","import React, { useState, useEffect } from 'react';\nimport { formatDistanceToNow, format, isBefore, isAfter, isToday } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport { EventDetails, extractEventDetails, EventSpeaker, EventAgendaItem } from '../../../types/event';\nimport { EventsService } from '../../../services/events.service';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  Link as LinkIcon, \n  ExternalLink,\n  Heart, \n  MessageCircle, \n  Share2, \n  Flag, \n  Info,\n  DollarSign,\n  Accessibility,\n  User,\n  Tag,\n  Plus,\n  CalendarCheck,\n  Share,\n  Ticket,\n  AlertCircle\n} from 'lucide-react';\n\nimport BasePost from '../BasePost';\nimport { \n  tagStyles, \n  buttonStyles,\n  postTypeIconStyles,\n  dividerStyles\n} from '../styles/post.styles';\n\ninterface EventPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst EventPost: React.FC<EventPostProps> = (props) => {\n  const { post } = props;\n  const [isAttending, setIsAttending] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [ticketCount, setTicketCount] = useState(0);\n  const [userAddress, setUserAddress] = useState<string | null>(null);\n  const [ticketQuantity, setTicketQuantity] = useState(1);\n  const [showTicketModal, setShowTicketModal] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Extract event details from metadata using our helper function\n  const eventDetails: EventDetails = React.useMemo(() => {\n    return extractEventDetails(post);\n  }, [post]);\n\n  // Format event dates\n  const eventDates = React.useMemo(() => {\n    try {\n      if (!eventDetails.startDate) return { \n        display: \"Date not specified\",\n        status: \"unknown\" \n      };\n\n      const startDate = new Date(eventDetails.startDate);\n      const endDate = eventDetails.endDate ? new Date(eventDetails.endDate) : null;\n      \n      const formattedStartDate = format(startDate, 'PPP');\n      const formattedEndDate = endDate ? format(endDate, 'PPP') : null;\n      \n      const formattedStartTime = format(startDate, 'p');\n      const formattedEndTime = endDate ? format(endDate, 'p') : null;\n      \n      const isSameDay = formattedStartDate === formattedEndDate;\n      \n      let status = \"upcoming\";\n      if (isBefore(new Date(), startDate)) {\n        status = \"upcoming\";\n      } else if (endDate && isAfter(new Date(), endDate)) {\n        status = \"past\";\n      } else {\n        status = \"ongoing\";\n      }\n      \n      // Calculate days remaining\n      const now = new Date();\n      const diffTime = startDate.getTime() - now.getTime();\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      \n      let daysRemainingText = \"\";\n      if (diffDays > 0) {\n        daysRemainingText = `${diffDays} day${diffDays !== 1 ? 's' : ''} away`;\n      } else if (diffDays === 0) {\n        daysRemainingText = \"Today!\";\n      }\n      \n      return {\n        startDate: formattedStartDate,\n        startTime: formattedStartTime,\n        endDate: formattedEndDate,\n        endTime: formattedEndTime,\n        isSameDay,\n        status,\n        daysRemaining: diffDays,\n        daysRemainingText,\n        fullStartDate: startDate,\n        fullEndDate: endDate\n      };\n    } catch (error) {\n      console.error('Error formatting event dates:', error);\n      return {\n        display: \"Invalid date format\",\n        status: \"unknown\"\n      };\n    }\n  }, [eventDetails.startDate, eventDetails.endDate]);\n\n  // Get event status color and text\n  const getEventStatusInfo = (status: string) => {\n    switch (status) {\n      case 'upcoming':\n        return { \n          color: 'bg-emerald-900/30 text-emerald-300 border-emerald-700/50',\n          text: 'Upcoming' \n        };\n      case 'ongoing':\n        return { \n          color: 'bg-blue-900/30 text-blue-300 border-blue-700/50',\n          text: 'Happening now' \n        };\n      case 'past':\n        return { \n          color: 'bg-neutral-800/50 text-neutral-400 border-neutral-700/50',\n          text: 'Past event' \n        };\n      default:\n        return { \n          color: 'bg-neutral-800 text-neutral-400 border-neutral-700',\n          text: 'Date unknown' \n        };\n    }\n  };\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" | \"red\" | \"indigo\" | \"emerald\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\", \"red\", \"indigo\", \"emerald\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  // Generate add to calendar link\n  const generateCalendarLink = () => {\n    if (!eventDates.fullStartDate) return '#';\n    \n    const title = encodeURIComponent(post.metadata?.title || 'Event');\n    const start = encodeURIComponent(eventDates.fullStartDate.toISOString());\n    const end = eventDates.fullEndDate ? encodeURIComponent(eventDates.fullEndDate.toISOString()) : start;\n    const location = encodeURIComponent(eventDetails.location || '');\n    const details = encodeURIComponent(post.content || '');\n    \n    return `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${title}&dates=${start}/${end}&details=${details}&location=${location}`;\n  };\n\n  // Check if user has tickets for this event\n  useEffect(() => {\n    const checkUserTickets = async () => {\n      try {\n        // Mock checking connected wallet address - replace with your wallet connection logic\n        const address = localStorage.getItem('connectedWallet') || '0xMockAddress';\n        setUserAddress(address);\n        \n        // Store mock address for testing purposes\n        if (!localStorage.getItem('connectedWallet')) {\n          localStorage.setItem('connectedWallet', address);\n        }\n        \n        // If this is a blockchain event and we have an eventId\n        if (eventDetails.isOnChain && eventDetails.eventId) {\n          try {\n            const tickets = await EventsService.getUserTickets(eventDetails.eventId, address);\n            setTicketCount(tickets);\n            setIsAttending(tickets > 0);\n          } catch (error) {\n            console.error('Error checking tickets, using mock data:', error);\n            // Use mock data for testing\n            setTicketCount(Math.random() > 0.7 ? 2 : 0);\n            setIsAttending(Math.random() > 0.7);\n          }\n        }\n      } catch (error) {\n        console.error('Error checking user tickets:', error);\n      }\n    };\n    \n    checkUserTickets();\n  }, [eventDetails.isOnChain, eventDetails.eventId]);\n\n  // Handle attend/RSVP button click\n  const handleAttend = async (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    if (eventDetails.isOnChain && eventDetails.eventId) {\n      // For blockchain events, open ticket purchasing modal\n      setShowTicketModal(true);\n    } else {\n      // For regular events, toggle attendance state\n      setIsAttending(!isAttending);\n      // Here you would update your backend\n    }\n  };\n\n  // Handle ticket purchase\n  const handlePurchaseTickets = async () => {\n    if (!eventDetails.eventId) return;\n    \n    setIsLoading(true);\n    setErrorMessage('');\n    \n    try {\n      // Call blockchain service to purchase tickets\n      try {\n        await EventsService.purchaseTickets(eventDetails.eventId, ticketQuantity);\n      } catch (error) {\n        console.error('Service error, using mock fallback:', error);\n        // Simulate successful purchase for testing\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        // Store in localStorage for persistence\n        const userAddr = localStorage.getItem('connectedWallet') || '0xMockAddress';\n        const currentTickets = parseInt(localStorage.getItem(`event-${eventDetails.eventId}-user-${userAddr}-tickets`) || '0');\n        localStorage.setItem(`event-${eventDetails.eventId}-user-${userAddr}-tickets`, (currentTickets + ticketQuantity).toString());\n      }\n      \n      // Update state\n      setTicketCount(ticketCount + ticketQuantity);\n      setIsAttending(true);\n      setShowTicketModal(false);\n    } catch (error) {\n      console.error('Error purchasing tickets:', error);\n      setErrorMessage('Failed to purchase tickets. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Debug info for better troubleshooting\n  console.log('EventPost rendering with:', {\n    postType: post.type,\n    metadataKeys: post.metadata ? Object.keys(post.metadata) : [],\n    hasEventDetails: !!post.metadata?.eventDetails,\n    hasEventLegacy: !!post.metadata?.event,\n    extractedDetails: eventDetails,\n    isOnChain: eventDetails.isOnChain,\n    eventId: eventDetails.eventId\n  });\n\n  return (\n    <BasePost\n      {...props}\n      postType=\"event\"\n      typeIcon={<Calendar className=\"mr-1 h-3 w-3\" />}\n      typeName=\"Event\"\n    >\n      {/* Event Status Banner */}\n      {eventDates.status && (\n        <div className={`mt-4 flex items-center justify-between rounded-md px-3 py-2 border ${getEventStatusInfo(eventDates.status).color}`}>\n          <div className=\"flex items-center\">\n            <span className=\"font-medium\">{getEventStatusInfo(eventDates.status).text}</span>\n          </div>\n          {eventDates.daysRemainingText && eventDates.status === 'upcoming' && (\n            <span className=\"text-sm\">{eventDates.daysRemainingText}</span>\n          )}\n        </div>\n      )}\n\n      {/* Event Title */}\n      {post.metadata?.title && (\n        <h3 className=\"text-xl font-bold mt-4 text-white\">\n          {post.metadata.title}\n        </h3>\n      )}\n\n      {/* Blockchain Event Badge */}\n      {eventDetails.isOnChain && (\n        <div className=\"mt-2 inline-flex items-center rounded-full bg-indigo-900/30 text-indigo-300 px-2.5 py-0.5 text-xs font-medium\">\n          <Ticket className=\"mr-1 h-3 w-3\" />\n          <span>Blockchain Event</span>\n        </div>\n      )}\n\n      {/* Event Summary Grid */}\n      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Left column - Date & Time */}\n        <div className=\"rounded-lg border border-yellow-900/40 bg-yellow-900/10 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className={postTypeIconStyles({ type: 'event' })}>\n              <Calendar className=\"h-5 w-5 text-yellow-300\" />\n            </div>\n            <div className=\"space-y-1\">\n              <h4 className=\"font-semibold text-white\">Date & Time</h4>\n              \n              {eventDates.status !== 'unknown' ? (\n                <>\n                  {/* Calendar-style date display for start date */}\n                  <div className=\"flex items-center mt-2\">\n                    <div className=\"flex flex-col items-center justify-center bg-neutral-800 border border-neutral-700 rounded-md min-w-[60px] h-[60px] mr-3\">\n                      <span className=\"text-xs text-neutral-400\">{eventDates.fullStartDate ? format(eventDates.fullStartDate, 'MMM') : 'N/A'}</span>\n                      <span className=\"text-xl font-bold\">{eventDates.fullStartDate ? format(eventDates.fullStartDate, 'd') : '-'}</span>\n                    </div>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm text-neutral-300\">{eventDates.startDate || 'N/A'}</span>\n                      <span className=\"text-xs text-neutral-400\">From {eventDates.startTime || 'N/A'}</span>\n                      \n                      {eventDates.endDate && !eventDates.isSameDay && (\n                        <div className=\"mt-1 text-xs text-neutral-400\">\n                          To {eventDates.endDate} at {eventDates.endTime}\n                        </div>\n                      )}\n                      \n                      {eventDates.isSameDay && eventDates.endTime && (\n                        <div className=\"text-xs text-neutral-400\">\n                          Until {eventDates.endTime}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <span className=\"text-sm text-neutral-400\">Date and time not specified</span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Right column - Location */}\n        <div className=\"rounded-lg border border-yellow-900/40 bg-yellow-900/10 p-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className={postTypeIconStyles({ type: 'event' })}>\n              <MapPin className=\"h-5 w-5 text-yellow-300\" />\n            </div>\n            <div className=\"space-y-1\">\n              <h4 className=\"font-semibold text-white\">Location</h4>\n              \n              {eventDetails.location ? (\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-neutral-300\">{eventDetails.location}</p>\n                  \n                  {/* Map placeholder - in a real app, this could be a real map component */}\n                  <div className=\"mt-2 h-[60px] w-full rounded-md bg-neutral-800 border border-neutral-700 flex items-center justify-center\">\n                    <span className=\"text-xs text-neutral-400\">Map view</span>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"mt-2 text-sm text-neutral-400\">\n                  {eventDetails.virtualLink ? 'Online event' : 'Location not specified'}\n                </div>\n              )}\n              \n              {eventDetails.virtualLink && (\n                <a \n                  href={eventDetails.virtualLink}\n                  className=\"mt-2 inline-flex items-center gap-1.5 text-sm text-blue-400 hover:text-blue-300 transition-colors\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  onClick={(e) => e.stopPropagation()}\n                >\n                  <LinkIcon className=\"h-3.5 w-3.5\" />\n                  <span>Join virtually</span>\n                  <ExternalLink className=\"h-3 w-3\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Event Details Section */}\n      <div className=\"mt-4 space-y-4\">\n        {/* Organizer & Categories */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          {/* Organizer */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <User className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Organizer:</span>\n            <span className=\"text-white\">{eventDetails.organizer || post.author || 'N/A'}</span>\n          </div>\n          \n          {/* Categories */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Tag className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Category:</span>\n            {eventDetails.category ? (\n              <span className={tagStyles({ variant: getTagVariant(eventDetails.category) })}>\n                {eventDetails.category}\n              </span>\n            ) : post.metadata?.tags && post.metadata.tags.length > 0 ? (\n              <span className={tagStyles({ variant: getTagVariant(post.metadata.tags[0]) })}>\n                {post.metadata.tags[0]}\n              </span>\n            ) : (\n              <span className=\"text-neutral-400\">N/A</span>\n            )}\n          </div>\n        </div>\n\n        {/* Cost & Accessibility */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          {/* Cost */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <DollarSign className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Cost:</span>\n            {eventDetails.isOnChain ? (\n              <span className=\"text-white\">{eventDetails.price || '0'} ETH per ticket</span>\n            ) : (\n              <span className=\"text-white\">{eventDetails.cost || 'Free / Not specified'}</span>\n            )}\n          </div>\n          \n          {/* Accessibility */}\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Accessibility className=\"h-4 w-4 text-yellow-400\" />\n            <span className=\"text-neutral-400\">Accessibility:</span>\n            <span className=\"text-white\">{eventDetails.accessibility || 'Not specified'}</span>\n          </div>\n        </div>\n\n        {/* Attendees */}\n        <div className=\"bg-neutral-800/60 rounded-lg p-4 border border-neutral-700/50\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n            <div className=\"flex items-start gap-2\">\n              <Users className=\"h-5 w-5 text-yellow-400 mt-0.5\" />\n              <div>\n                <div className=\"text-sm font-medium text-white\">\n                  {eventDetails.isOnChain ? 'Tickets' : 'Attendees'}\n                </div>\n                <div className=\"text-xs text-neutral-400\">\n                  {eventDetails.isOnChain ? (\n                    <>\n                      <span className=\"text-white text-sm\">{eventDetails.ticketsSold || 0}</span> of <span className=\"text-white text-sm\">{eventDetails.maxTickets}</span> tickets sold\n                      {ticketCount > 0 && (\n                        <div className=\"mt-1 text-emerald-400\">You own {ticketCount} ticket{ticketCount !== 1 ? 's' : ''}</div>\n                      )}\n                    </>\n                  ) : (\n                    eventDetails.currentAttendees !== undefined ? (\n                      <>\n                        <span className=\"text-white text-sm\">{eventDetails.currentAttendees}</span>\n                        {eventDetails.maxAttendees ? (\n                          <> of <span className=\"text-white text-sm\">{eventDetails.maxAttendees}</span> spots filled</>\n                        ) : (\n                          <> attending</>\n                        )}\n                      </>\n                    ) : (\n                      'Attendance not tracked'\n                    )\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            {/* Attendance bar */}\n            {eventDetails.isOnChain ? (\n              <div className=\"w-full md:w-1/2 h-2 bg-neutral-700 rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-yellow-500\" \n                  style={{ \n                    width: `${Math.min(100, ((eventDetails.ticketsSold || 0) / eventDetails.maxTickets) * 100)}%` \n                  }}\n                />\n              </div>\n            ) : (\n              eventDetails.maxAttendees && eventDetails.currentAttendees !== undefined && (\n                <div className=\"w-full md:w-1/2 h-2 bg-neutral-700 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full bg-yellow-500\" \n                    style={{ \n                      width: `${Math.min(100, (eventDetails.currentAttendees / eventDetails.maxAttendees) * 100)}%` \n                    }}\n                  />\n                </div>\n              )\n            )}\n          </div>\n          \n          {/* Ticket Purchase / Attendee actions */}\n          {eventDates.status !== 'past' && (\n            <div className=\"mt-3 flex justify-end\">\n              {eventDetails.isOnChain ? (\n                <button\n                  className={buttonStyles({ \n                    variant: ticketCount > 0 ? 'outline' : 'primary',\n                    size: 'sm'\n                  })}\n                  onClick={handleAttend}\n                  disabled={eventDetails.isOnChain && !eventDetails.active}\n                >\n                  {ticketCount > 0 ? (\n                    <>View My Ticket{ticketCount !== 1 ? 's' : ''}</>\n                  ) : (\n                    <>\n                      <Ticket className=\"mr-1 h-3.5 w-3.5\" />\n                      Purchase Tickets\n                    </>\n                  )}\n                </button>\n              ) : (\n                <button\n                  className={buttonStyles({ \n                    variant: isAttending ? 'outline' : 'primary',\n                    size: 'sm'\n                  })}\n                  onClick={handleAttend}\n                >\n                  {isAttending ? (\n                    <>I'm attending</>\n                  ) : (\n                    <>\n                      <Plus className=\"mr-1 h-3.5 w-3.5\" />\n                      Attend\n                    </>\n                  )}\n                </button>\n              )}\n            </div>\n          )}\n          \n          {/* Cancelled warning */}\n          {eventDetails.isOnChain && !eventDetails.active && (\n            <div className=\"mt-3 flex items-center gap-2 text-red-400 text-sm\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <span>This event has been cancelled by the organizer</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Event Description */}\n      {post.content && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Description</h4>\n          <div className=\"text-neutral-300 text-sm leading-relaxed whitespace-pre-wrap\">\n            {post.content}\n          </div>\n        </div>\n      )}\n\n      {/* Speakers Section */}\n      {eventDetails.speakers && eventDetails.speakers.length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Featured Speakers</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n            {eventDetails.speakers.map((speaker: EventSpeaker, index: number) => (\n              <div key={index} className=\"flex items-center gap-2 bg-neutral-800/50 rounded-md p-2\">\n                <div className=\"w-8 h-8 rounded-full bg-neutral-700 flex items-center justify-center\">\n                  {speaker.avatar ? (\n                    <img src={speaker.avatar} alt={speaker.name} className=\"w-8 h-8 rounded-full\" />\n                  ) : (\n                    <User className=\"w-4 h-4 text-neutral-400\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"text-sm font-medium text-white\">{speaker.name}</div>\n                  {speaker.role && <div className=\"text-xs text-neutral-400\">{speaker.role}</div>}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Agenda Section */}\n      {eventDetails.agenda && eventDetails.agenda.length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium text-white mb-2\">Event Agenda</h4>\n          <div className=\"space-y-2\">\n            {eventDetails.agenda.map((item: EventAgendaItem, index: number) => (\n              <div key={index} className=\"bg-neutral-800/50 rounded-md p-3 border-l-2 border-yellow-500\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm font-medium text-white\">{item.title}</span>\n                  {item.time && <span className=\"text-xs text-neutral-400\">{item.time}</span>}\n                </div>\n                {item.description && (\n                  <p className=\"text-xs text-neutral-300 mt-1\">{item.description}</p>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Tags */}\n      {post.metadata?.tags && post.metadata.tags.length > 0 && (\n        <div className=\"mt-4 flex flex-wrap gap-2\">\n          {post.metadata.tags.map((tag: string, index: number) => (\n            <span \n              key={index} \n              className={tagStyles({ variant: getTagVariant(tag) })}\n            >\n              {tag}\n            </span>\n          ))}\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className={dividerStyles} />\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <a\n            href={generateCalendarLink()}\n            className={buttonStyles({ variant: 'outline', size: 'sm' })}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <CalendarCheck className=\"mr-1.5 h-3.5 w-3.5\" />\n            Add to Calendar\n          </a>\n          \n          <button\n            className={buttonStyles({ variant: 'outline', size: 'sm' })}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (navigator.share) {\n                navigator.share({\n                  title: post.metadata?.title || 'Event',\n                  text: post.content || 'Check out this event',\n                  url: window.location.href\n                }).catch(console.error);\n              } else {\n                // Fallback\n                props.onShare?.();\n              }\n            }}\n          >\n            <Share className=\"mr-1.5 h-3.5 w-3.5\" />\n            Share Event\n          </button>\n        </div>\n      </div>\n      \n      {/* Ticket Purchase Modal */}\n      {showTicketModal && eventDetails.isOnChain && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={() => setShowTicketModal(false)}>\n          <div className=\"bg-neutral-900 rounded-lg p-6 max-w-md w-full mx-4\" onClick={e => e.stopPropagation()}>\n            <h3 className=\"text-xl font-bold text-white mb-4\">Purchase Tickets</h3>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Event</label>\n                <div className=\"text-white\">{post.metadata?.title}</div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Price per Ticket</label>\n                <div className=\"text-white\">{eventDetails.price || '0'} ETH</div>\n              </div>\n              \n              <div>\n                <label htmlFor=\"quantity\" className=\"block text-sm font-medium text-neutral-300 mb-1\">Quantity</label>\n                <input\n                  id=\"quantity\"\n                  type=\"number\"\n                  min=\"1\"\n                  max={eventDetails.maxTickets - (eventDetails.ticketsSold || 0)}\n                  value={ticketQuantity}\n                  onChange={e => setTicketQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                  className=\"w-full rounded-md border border-neutral-700 bg-neutral-800 p-2 text-white\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-neutral-300 mb-1\">Total Price</label>\n                <div className=\"text-white font-bold\">\n                  {eventDetails.price ? (parseFloat(eventDetails.price) * ticketQuantity).toFixed(4) : '0'} ETH\n                </div>\n              </div>\n              \n              {errorMessage && (\n                <div className=\"bg-red-900/20 border border-red-900 text-red-300 p-3 rounded-md text-sm\">\n                  {errorMessage}\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-3 mt-6\">\n                <button\n                  className={buttonStyles({ variant: 'outline' })}\n                  onClick={() => setShowTicketModal(false)}\n                  disabled={isLoading}\n                >\n                  Cancel\n                </button>\n                \n                <button\n                  className={buttonStyles({ variant: 'primary' })}\n                  onClick={handlePurchaseTickets}\n                  disabled={isLoading || !eventDetails.active}\n                >\n                  {isLoading ? 'Processing...' : 'Purchase Tickets'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </BasePost>\n  );\n};\n\nexport default EventPost; ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Check } from 'lucide-react';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  HeartIcon, \n  ChatBubbleLeftIcon, \n  ArrowPathRoundedSquareIcon, \n  BookmarkIcon \n} from '@heroicons/react/24/outline';\nimport { \n  HeartIcon as HeartIconSolid, \n  BookmarkIcon as BookmarkIconSolid \n} from '@heroicons/react/24/solid';\n\ninterface PollPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\ninterface PollOption {\n  id: string;\n  text: string;\n  votes: number;\n}\n\ninterface PollData {\n  question?: string;\n  options?: PollOption[];\n  endDate?: string;\n}\n\nconst PollPost: React.FC<PollPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [liked, setLiked] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\n  const [hasVoted, setHasVoted] = useState(false);\n  \n  // Format the timestamp\n  const formattedTime = (() => {\n    try {\n      // Check if createdAt is a valid date\n      const timestamp = post.createdAt;\n      if (!timestamp) return 'Unknown time';\n      \n      // Handle both number and string formats\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Invalid date';\n      \n      return formatDistanceToNow(date, { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error, post);\n      return 'Unknown time';\n    }\n  })();\n  \n  // Extract poll data from metadata with proper typing\n  const pollData: PollData | any = post.metadata?.poll || {};\n  const pollQuestion = pollData.question || post.content || 'Poll';\n  const pollOptions: PollOption[] = pollData.options || [];\n  const pollEndDate = pollData.endDate ? new Date(pollData.endDate) : null;\n  \n  // Calculate if poll has ended\n  const isPollEnded = pollEndDate ? new Date() > pollEndDate : false;\n  \n  // Calculate total votes\n  const totalVotes = pollOptions.reduce((sum, option) => sum + (option.votes || 0), 0);\n  \n  // Format remaining time\n  const remainingTime = (() => {\n    if (!pollEndDate || isPollEnded) return null;\n    \n    const now = new Date();\n    const diffMs = pollEndDate.getTime() - now.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays} day${diffDays !== 1 ? 's' : ''} left`;\n    } else if (diffHours > 0) {\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} left`;\n    } else {\n      return 'Ending soon';\n    }\n  })();\n  \n  // Handle vote action\n  const handleVote = (optionId: string) => {\n    if (!hasVoted) {\n      setSelectedOption(optionId);\n      setHasVoted(true);\n    }\n  };\n  \n  // Handle like action\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLiked(!liked);\n    if (onLike) onLike();\n  };\n  \n  // Handle comment action\n  const handleComment = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onComment) onComment();\n  };\n  \n  // Handle share action\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onShare) onShare();\n  };\n  \n  // Handle save action\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSaved(!saved);\n  };\n  \n  // Handle card click\n  const handleCardClick = () => {\n    if (onClick) onClick(post.id);\n  };\n\n  // Get author name and profile picture\n  const authorName = typeof post.author === 'string' ? \n    `${post.author.slice(0, 6)}...${post.author.slice(-4)}` : \n    post.author;\n\n  const authorAddress = typeof post.author === 'string' ? \n    post.author : \n    post.author;\n    \n  // Safely get stats values\n  const likeCount = post.stats?.likeCount || 0;\n  const commentCount = post.stats?.commentCount || 0;\n\n  return (\n    <div \n      className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      {/* Post Header */}\n      <div className=\"flex items-center mb-3\">\n        <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold\">\n          <UserAvatar \n            address={authorAddress}\n            size=\"md\"\n            showUsername={false}\n          />\n        </div>\n        <div className=\"ml-2\">\n          <div className=\"font-medium\">{authorName}</div>\n          <div className=\"text-xs text-gray-500 flex\">\n            {formattedTime}\n            {post.tribeId && (\n              <>\n                <span className=\"mx-1\">•</span>\n                <span>Tribe #{post.tribeId}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Poll Question */}\n      <h3 className=\"text-lg font-medium mb-3\">{pollQuestion}</h3>\n      \n      {/* Poll Options */}\n      <div className=\"space-y-2\">\n        {pollOptions.map((option) => {\n          const percentage = totalVotes > 0 ? Math.round((option.votes / totalVotes) * 100) : 0;\n          const isSelected = selectedOption === option.id;\n          \n          return (\n            <button\n              key={option.id}\n              onClick={() => handleVote(option.id)}\n              disabled={hasVoted && !isSelected}\n              className=\"w-full\"\n            >\n              <div className=\"relative\">\n                <div\n                  className={`w-full p-3 rounded-xl border ${\n                    isSelected\n                      ? 'border-[#4ADE80] bg-[#4ADE80]/10'\n                      : 'border-gray-200 hover:bg-gray-50'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span>{option.text}</span>\n                    {hasVoted && (\n                      <span className=\"text-sm text-gray-500\">{percentage}%</span>\n                    )}\n                  </div>\n                </div>\n                {hasVoted && (\n                  <div\n                    className=\"absolute top-0 left-0 h-full bg-[#4ADE80]/10 rounded-xl transition-all\"\n                    style={{ width: `${percentage}%` }}\n                  />\n                )}\n              </div>\n            </button>\n          );\n        })}\n      </div>\n      \n      {/* Poll Stats */}\n      <div className=\"flex items-center justify-between text-sm text-gray-500 mt-3\">\n        <span>{totalVotes.toLocaleString()} votes</span>\n        {remainingTime && <span>{remainingTime}</span>}\n        {isPollEnded && <span>Poll ended</span>}\n      </div>\n      \n      {/* Post Stats */}\n      {showActions && (\n        <>\n          <div className=\"flex items-center mt-4 text-gray-500 text-sm\">\n            <div className=\"flex items-center\">\n              <span>{likeCount}</span>\n              <span className=\"mx-1\">likes</span>\n            </div>\n            <span className=\"mx-1.5\">•</span>\n            <div className=\"flex items-center\">\n              <span>{commentCount}</span>\n              <span className=\"mx-1\">comments</span>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100\">\n            <button \n              onClick={handleLike}\n              className=\"flex items-center text-gray-500 hover:text-red-600\"\n            >\n              {liked ? (\n                <HeartIconSolid className=\"h-5 w-5 text-red-600\" />\n              ) : (\n                <HeartIcon className=\"h-5 w-5\" />\n              )}\n              <span className=\"ml-1.5 text-sm\">{likeCount > 0 ? likeCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleComment}\n              className=\"flex items-center text-gray-500 hover:text-blue-600\"\n            >\n              <ChatBubbleLeftIcon className=\"h-5 w-5\" />\n              <span className=\"ml-1.5 text-sm\">{commentCount > 0 ? commentCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleShare}\n              className=\"flex items-center text-gray-500 hover:text-green-600\"\n            >\n              <ArrowPathRoundedSquareIcon className=\"h-5 w-5\" />\n            </button>\n            \n            <button \n              onClick={handleSave}\n              className=\"flex items-center text-gray-500 hover:text-yellow-600\"\n            >\n              {saved ? (\n                <BookmarkIconSolid className=\"h-5 w-5 text-yellow-600\" />\n              ) : (\n                <BookmarkIcon className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PollPost; ","import React, { useState } from 'react';\nimport { Post } from '../../../types/post';\nimport { Bug, ArrowUpRight, Github, Clock } from 'lucide-react';\nimport { \n  tagStyles, \n  buttonStyles,\n  postTypeIconStyles\n} from '../styles/post.styles';\nimport BasePost from '../BasePost';\n\ninterface BountyPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst BountyPost: React.FC<BountyPostProps> = (props) => {\n  const { post } = props;\n  \n  // Extract bounty data from metadata\n  const bountyData = React.useMemo(() => {\n    return post.metadata?.bounty || {\n      reward: '0',\n      currency: 'ETH',\n      difficulty: 'medium',\n      deadline: undefined,\n      tags: [],\n      requirements: [],\n      repository: undefined\n    };\n  }, [post.metadata?.bounty]);\n\n  // Get difficulty color\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy':\n        return 'bg-green-500/20 text-green-500';\n      case 'medium':\n        return 'bg-yellow-500/20 text-yellow-500';\n      case 'hard':\n        return 'bg-red-500/20 text-red-500';\n      default:\n        return 'bg-neutral-500/20 text-neutral-400';\n    }\n  };\n\n  // Map tag colors consistently based on tag content\n  const getTagVariant = (tag: string): \"default\" | \"blue\" | \"purple\" | \"green\" | \"yellow\" | \"orange\" | \"red\" | \"indigo\" | \"emerald\" => {\n    const variants = [\"blue\", \"purple\", \"green\", \"yellow\", \"orange\", \"red\", \"indigo\", \"emerald\"] as const;\n    const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    return variants[hash % variants.length];\n  };\n\n  return (\n    <BasePost \n      {...props} \n      postType=\"bounty\"\n      typeIcon={<Bug className=\"mr-1 h-3 w-3\" />}\n      typeName=\"Bounty\"\n    >\n      {/* Bounty Content */}\n      <div className=\"space-y-4 mt-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={postTypeIconStyles({ type: 'bounty' })}>\n              <Bug className=\"w-5 h-5 text-emerald-300\" />\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-white\">\n                {bountyData.reward} {bountyData.currency}\n              </div>\n              <div className=\"text-sm text-neutral-400\">Reward</div>\n            </div>\n          </div>\n          <span\n            className={`px-3 py-1 rounded-full text-sm ${getDifficultyColor(bountyData.difficulty)}`}\n          >\n            {bountyData.difficulty.charAt(0).toUpperCase() + bountyData.difficulty.slice(1)}\n          </span>\n        </div>\n\n        {bountyData.deadline && (\n          <div className=\"flex items-center space-x-2 text-sm text-neutral-400\">\n            <Clock className=\"w-4 h-4\" />\n            <span>Deadline: {new Date(bountyData.deadline).toLocaleDateString()}</span>\n          </div>\n        )}\n\n        {/* Requirements */}\n        {bountyData.requirements && bountyData.requirements.length > 0 && (\n          <div className=\"space-y-2 mt-3\">\n            <h4 className=\"text-sm font-medium text-white\">Requirements</h4>\n            <ul className=\"space-y-2\">\n              {bountyData.requirements.map((req: string, index: number) => (\n                <li key={index} className=\"flex items-start space-x-2 text-sm text-neutral-300\">\n                  <span className=\"w-1.5 h-1.5 mt-1.5 rounded-full bg-emerald-500\" />\n                  <span>{req}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {/* Repository Link */}\n        {bountyData.repository && (\n          <a\n            href={bountyData.repository}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-center space-x-2 px-4 py-2 bg-neutral-800 rounded-full hover:bg-neutral-700 w-fit transition-colors\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <Github className=\"w-4 h-4\" />\n            <span>View Repository</span>\n            <ArrowUpRight className=\"w-4 h-4\" />\n          </a>\n        )}\n\n        {/* Tags */}\n        {bountyData.tags && bountyData.tags.length > 0 && (\n          <div className=\"mt-3 flex flex-wrap gap-2\">\n            {bountyData.tags.map((tag: string, index: number) => (\n              <span \n                key={index} \n                className={tagStyles({ variant: getTagVariant(tag) })}\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        )}\n\n        {/* Apply Button */}\n        <button \n          className={buttonStyles({ variant: 'primary', fullWidth: true })}\n          onClick={(e) => {\n            e.stopPropagation();\n            // Apply for bounty logic here\n          }}\n        >\n          Apply for Bounty\n        </button>\n      </div>\n    </BasePost>\n  );\n};\n\nexport default BountyPost; ","import React, { useState } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Post } from '../../../types/post';\nimport UserAvatar from '../../user/UserAvatar';\nimport { \n  HeartIcon, \n  ChatBubbleLeftIcon, \n  ArrowPathRoundedSquareIcon, \n  BookmarkIcon \n} from '@heroicons/react/24/outline';\nimport { \n  HeartIcon as HeartIconSolid, \n  BookmarkIcon as BookmarkIconSolid \n} from '@heroicons/react/24/solid';\nimport { ExternalLink, GitBranch, Globe } from 'lucide-react';\n\ninterface ProjectPostProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\nconst ProjectPost: React.FC<ProjectPostProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  const [liked, setLiked] = useState(false);\n  const [saved, setSaved] = useState(false);\n  \n  // Format the timestamp\n  const formattedTime = (() => {\n    try {\n      // Check if createdAt is a valid date\n      const timestamp = post.createdAt;\n      if (!timestamp) return 'Unknown time';\n      \n      // Handle both number and string formats\n      const date = new Date(timestamp);\n      if (isNaN(date.getTime())) return 'Invalid date';\n      \n      return formatDistanceToNow(date, { addSuffix: true });\n    } catch (error) {\n      console.error('Error formatting date:', error, post);\n      return 'Unknown time';\n    }\n  })();\n  \n  // Extract project data from metadata\n  const projectData = post.metadata?.project || {\n    github: undefined,\n    website: undefined\n  };\n  \n  // Handle like action\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setLiked(!liked);\n    if (onLike) onLike();\n  };\n  \n  // Handle comment action\n  const handleComment = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onComment) onComment();\n  };\n  \n  // Handle share action\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onShare) onShare();\n  };\n  \n  // Handle save action\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSaved(!saved);\n  };\n  \n  // Handle card click\n  const handleCardClick = () => {\n    if (onClick) onClick(post.id);\n  };\n\n  // Get author name and profile picture\n  const authorName = typeof post.author === 'string' ? \n    `${post.author.slice(0, 6)}...${post.author.slice(-4)}` : \n    post.author;\n\n  const authorAddress = typeof post.author === 'string' ? \n    post.author : \n    post.author;\n    \n  // Safely get stats values\n  const likeCount = post.stats?.likeCount || 0;\n  const commentCount = post.stats?.commentCount || 0;\n\n  return (\n    <div \n      className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      {/* Post Header */}\n      <div className=\"flex items-center mb-3\">\n        <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center text-white font-bold\">\n          <UserAvatar \n            address={authorAddress}\n            size=\"md\"\n            showUsername={false}\n          />\n        </div>\n        <div className=\"ml-2\">\n          <div className=\"font-medium\">{authorName}</div>\n          <div className=\"text-xs text-gray-500 flex\">\n            {formattedTime}\n            {post.tribeId && (\n              <>\n                <span className=\"mx-1\">•</span>\n                <span>Tribe #{post.tribeId}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Post Content */}\n      {post.content && (\n        <div className=\"text-gray-800 whitespace-pre-line mb-4\">\n          {post.content}\n        </div>\n      )}\n      \n      {/* Project Repository Widget */}\n      <div className=\"mt-4 rounded-xl border border-purple-500/20\">\n        <div className=\"flex items-center justify-between p-4 border-b border-purple-500/10\">\n          <div className=\"text-gray-800 font-medium flex items-center gap-2\">\n            <GitBranch className=\"w-4 h-4\" />\n            <span>Project Repository</span>\n          </div>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-3 text-gray-600\">\n            {projectData.github && (\n              <a \n                href={projectData.github}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-2 px-3 py-1.5 rounded-lg hover:bg-purple-500/10 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <GitBranch className=\"w-4 h-4\" />\n                <span>GitHub</span>\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            )}\n            {projectData.website && (\n              <a\n                href={projectData.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\" \n                className=\"flex items-center gap-2 px-3 py-1.5 rounded-lg hover:bg-purple-500/10 transition-colors\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <Globe className=\"w-4 h-4\" />\n                <span>Website</span>\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Post Stats */}\n      {showActions && (\n        <>\n          <div className=\"flex items-center mt-4 text-gray-500 text-sm\">\n            <div className=\"flex items-center\">\n              <span>{likeCount}</span>\n              <span className=\"mx-1\">likes</span>\n            </div>\n            <span className=\"mx-1.5\">•</span>\n            <div className=\"flex items-center\">\n              <span>{commentCount}</span>\n              <span className=\"mx-1\">comments</span>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100\">\n            <button \n              onClick={handleLike}\n              className=\"flex items-center text-gray-500 hover:text-red-600\"\n            >\n              {liked ? (\n                <HeartIconSolid className=\"h-5 w-5 text-red-600\" />\n              ) : (\n                <HeartIcon className=\"h-5 w-5\" />\n              )}\n              <span className=\"ml-1.5 text-sm\">{likeCount > 0 ? likeCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleComment}\n              className=\"flex items-center text-gray-500 hover:text-blue-600\"\n            >\n              <ChatBubbleLeftIcon className=\"h-5 w-5\" />\n              <span className=\"ml-1.5 text-sm\">{commentCount > 0 ? commentCount : ''}</span>\n            </button>\n            \n            <button \n              onClick={handleShare}\n              className=\"flex items-center text-gray-500 hover:text-green-600\"\n            >\n              <ArrowPathRoundedSquareIcon className=\"h-5 w-5\" />\n            </button>\n            \n            <button \n              onClick={handleSave}\n              className=\"flex items-center text-gray-500 hover:text-yellow-600\"\n            >\n              {saved ? (\n                <BookmarkIconSolid className=\"h-5 w-5 text-yellow-600\" />\n              ) : (\n                <BookmarkIcon className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ProjectPost; ","import React from 'react';\nimport { Post, PostType } from '../../types/post';\nimport { \n  TextPost, \n  ImagePost, \n  VideoPost, \n  LinkPost, \n  EventPost, \n  PollPost, \n  BountyPost,\n  ProjectPost\n} from './types';\n\n// Define a mapping from PostType enum to component type string\nconst POST_TYPE_MAPPING: Record<number, string> = {\n  [PostType.TEXT]: 'text',\n  [PostType.IMAGE]: 'image',\n  [PostType.VIDEO]: 'video',\n  [PostType.LINK]: 'link',\n  [PostType.EVENT]: 'event',\n  [PostType.POLL]: 'poll',\n  [6]: 'bounty', // BOUNTY type\n  [7]: 'project' // PROJECT type\n};\n\ninterface PostTypeMapperProps {\n  post: Post;\n  onLike?: () => void;\n  onComment?: () => void;\n  onShare?: () => void;\n  onReport?: () => void;\n  onClick?: (postId: string) => void;\n  showActions?: boolean;\n}\n\n/**\n * PostTypeMapper - Maps a post to the appropriate component based on its type\n * This follows the strategy pattern, allowing us to easily add new post types\n */\nconst PostTypeMapper: React.FC<PostTypeMapperProps> = ({\n  post,\n  onLike,\n  onComment,\n  onShare,\n  onReport,\n  onClick,\n  showActions = true\n}) => {\n  // Enhanced debug logging for post type detection\n  const renderPostByType = () => {\n    const postTypeString = post.type !== undefined && post.type !== null \n      ? String(post.type) \n      : '';\n      \n    // Debug logging to help diagnose post type issues\n    console.log('PostTypeMapper rendering post:', {\n      id: post.id,\n      rawType: post.type,\n      numericType: typeof post.type === 'number' ? post.type : parseInt(postTypeString, 10),\n      author: post.author,\n      content: post.content?.substring(0, 30) + (post.content && post.content.length > 30 ? '...' : ''),\n      hasMetadata: !!post.metadata,\n      metadataKeys: post.metadata ? Object.keys(post.metadata) : [],\n      hasMedia: post.metadata?.media && post.metadata.media.length > 0,\n      mediaTypes: post.metadata?.media?.map((m: any) => m.type),\n      componentType: typeof post.type === 'number' \n        ? POST_TYPE_MAPPING[post.type] \n        : postTypeString.toLowerCase(),\n    });\n\n    // Special handling for event posts\n    const isEventType = post.type === PostType.EVENT || post.type === 3;\n    const isEventString = postTypeString.toLowerCase() === 'event';\n    const hasEventMetadata = post.metadata?.event !== undefined;\n    \n    console.log('Event detection:', {\n      eventDetails: post.metadata?.event,\n      isEventType,\n      isEventString,\n      hasEventMetadata\n    });\n\n    // Determine the numeric type for consistent comparison\n    const numericType = typeof post.type === 'number' \n      ? post.type \n      : parseInt(postTypeString, 10);\n\n    // Use the numeric type to get the component type string\n    const componentType = isNaN(numericType) \n      ? postTypeString.toLowerCase() \n      : POST_TYPE_MAPPING[numericType];\n\n    // Render the appropriate component based on the post type\n    switch (componentType) {\n      case 'text':\n        return (\n          <TextPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'image':\n        return (\n          <ImagePost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'video':\n        return (\n          <VideoPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'link':\n        return (\n          <LinkPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'event':\n        return (\n          <EventPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'poll':\n        return (\n          <PollPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'bounty':\n        return (\n          <BountyPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      case 'project':\n        return (\n          <ProjectPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n      default:\n        console.warn(`Unknown post type: ${post.type}, falling back to TextPost`);\n        return (\n          <TextPost\n            post={post}\n            onLike={onLike}\n            onComment={onComment}\n            onShare={onShare}\n            onReport={onReport}\n            onClick={onClick}\n            showActions={showActions}\n          />\n        );\n    }\n  };\n\n  return renderPostByType();\n};\n\nexport default PostTypeMapper; ","import React from 'react';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Clock, TrendingUp, Star, Filter, SlidersHorizontal, Plus, Loader2 } from 'lucide-react';\nimport { Post, PostType } from '../../types/post';\nimport type { FeedItem, BaseFeedItem } from '../../types/feed';\nimport PostTypeMapper from '../posts/PostTypeMapper';\nimport { useDispatch } from 'react-redux';\nimport { setCreatingPost } from '../../store/slices/postsSlice';\nimport clsx from 'clsx';\nimport { isEventPost } from '../../types/event';\n\ninterface UnifiedFeedProps {\n  items: (Post | FeedItem)[];\n  loading?: boolean;\n  showCreateButton?: boolean;\n  tribeId?: string;\n  showFilters?: boolean;\n  onItemClick?: (item: Post | FeedItem) => void;\n}\n\ntype TimeFilter = 'today' | 'week' | 'month' | 'all';\ntype SortFilter = 'trending' | 'latest' | 'top';\n\nconst filterOptions: { value: PostType | 'ALL'; label: string }[] = [\n  { value: 'ALL', label: 'All' },\n  { value: PostType.TEXT, label: 'Text' },\n  { value: PostType.IMAGE, label: 'Image' },\n  { value: PostType.VIDEO, label: 'Video' },\n  { value: PostType.POLL, label: 'Polls' },\n  { value: PostType.EVENT, label: 'Events' },\n  { value: PostType.LINK, label: 'Links' },\n];\n\nexport function UnifiedFeed({ \n  items, \n  loading = false, \n  showCreateButton = true,\n  showFilters = true,\n  onItemClick\n}: UnifiedFeedProps) {\n  const dispatch = useDispatch();\n  const [contentFilter, setContentFilter] = useState<PostType | 'ALL'>('ALL');\n  const [timeFilter, setTimeFilter] = useState<TimeFilter>('all');\n  const [sortFilter, setSortFilter] = useState<SortFilter>('latest');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  // Debug effect to track item changes\n  useEffect(() => {\n  }, [items]);\n\n  const timeFilters: { value: TimeFilter; label: string }[] = [\n    { value: 'today', label: 'Today' },\n    { value: 'week', label: 'This Week' },\n    { value: 'month', label: 'This Month' },\n    { value: 'all', label: 'All Time' }\n  ];\n\n  const sortFilters: { value: SortFilter; label: string; icon: typeof Clock }[] = [\n    { value: 'trending', label: 'Trending', icon: TrendingUp },\n    { value: 'latest', label: 'Latest', icon: Clock },\n    { value: 'top', label: 'Top', icon: Star }\n  ];\n\n  const handleLike = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleComment = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleShare = (_id: string) => {\n    // Implementation removed\n  };\n\n  const handleReport = (_id: string) => {\n    // Implementation removed\n  };\n\n  const openCreatePostModal = () => {\n    dispatch(setCreatingPost(true));\n  };\n\n  const filteredItems = useMemo(() => {\n    if (!items || items.length === 0) {\n      return [];\n    }\n    \n    let filtered = [...items];\n    \n    // Filter by content type with improved matching\n    if (contentFilter !== 'ALL') {\n      filtered = filtered.filter(item => {\n        if ('content' in item && 'type' in item) {\n          const post = item as Post;\n\n          // Special handling for event posts\n          if (contentFilter === PostType.EVENT) {\n            return isEventPost(post);\n          }\n          \n          // Convert both to strings for comparison\n          const typeStr = String(post.type).toLowerCase();\n          const filterStr = String(contentFilter).toLowerCase();\n          \n          // Check for exact match\n          if (typeStr === filterStr) {\n            return true;\n          }\n          \n          // Check for TEXT (0)\n          if (contentFilter === PostType.TEXT && \n              (post.type === 0 || typeStr === 'text' || typeStr === '0')) {\n            return true;\n          }\n          \n          // Check for numeric types\n          if (typeof contentFilter === 'number') {\n            const postTypeNum = parseInt(typeStr, 10);\n            if (!isNaN(postTypeNum) && postTypeNum === contentFilter) {\n              return true;\n            }\n            \n            // Try enum name match\n            const enumName = PostType[contentFilter];\n            if (enumName && typeStr === enumName.toLowerCase()) {\n              return true;\n            }\n          }\n          \n          return false;\n        }\n        return false;\n      });\n    }\n    \n    // Apply time filter \n    const now = new Date();\n    if (timeFilter !== 'all') {\n      filtered = filtered.filter(item => {\n        const timestamp = 'createdAt' in item ? item.createdAt : (item as BaseFeedItem).createdAt;\n        const itemDate = new Date(timestamp);\n        \n        switch (timeFilter) {\n          case 'today': {\n            return itemDate.getDate() === now.getDate() && \n                   itemDate.getMonth() === now.getMonth() &&\n                   itemDate.getFullYear() === now.getFullYear();\n          }\n          case 'week': {\n            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return itemDate >= weekAgo;\n          }\n          case 'month': {\n            return itemDate.getMonth() === now.getMonth() &&\n                   itemDate.getFullYear() === now.getFullYear();\n          }\n          default: {\n            return true;\n          }\n        }\n      });\n    }\n\n    // Apply sort filter with updated stats properties\n    switch (sortFilter) {\n      case 'trending':\n        filtered.sort((a, b) => {\n          const aStats = 'stats' in a ? a.stats : { likeCount: 0, commentCount: 0 };\n          const bStats = 'stats' in b ? b.stats : { likeCount: 0, commentCount: 0 };\n          const aEngagement = (aStats?.likeCount || 0) + ((aStats?.commentCount || 0) * 2);\n          const bEngagement = (bStats?.likeCount || 0) + ((bStats?.commentCount || 0) * 2);\n          return bEngagement - aEngagement;\n        });\n        break;\n      case 'latest':\n        filtered.sort((a, b) => {\n          const aTimestamp = 'createdAt' in a ? \n            new Date(a.createdAt).getTime() : \n            new Date((a as BaseFeedItem).createdAt).getTime();\n          const bTimestamp = 'createdAt' in b ? \n            new Date(b.createdAt).getTime() : \n            new Date((b as BaseFeedItem).createdAt).getTime();\n          return bTimestamp - aTimestamp;\n        });\n        break;\n      case 'top':\n        filtered.sort((a, b) => {\n          const aStats = 'stats' in a ? a.stats : { likeCount: 0 };\n          const bStats = 'stats' in b ? b.stats : { likeCount: 0 };\n          return ((bStats?.likeCount || 0) - (aStats?.likeCount || 0));\n        });\n        break;\n    }\n\n    return filtered;\n  }, [items, contentFilter, timeFilter, sortFilter]);\n\n  const renderItem = (item: Post | FeedItem) => {\n    // Check if item is a Post\n    if ('content' in item && 'type' in item) {\n      return (\n        <div key={item.id} className=\"mb-4\">\n          <PostTypeMapper\n            post={item as Post}\n            onLike={() => handleLike(item.id)}\n            onComment={() => handleComment(item.id)}\n            onShare={() => handleShare(item.id)}\n            onReport={() => handleReport(item.id)}\n            onClick={() => onItemClick?.(item)}\n          />\n        </div>\n      );\n    }\n    \n    // Handle other item types if needed\n    return null;\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      {showFilters && (\n        <>\n          {/* Content type filters */}\n          <div className=\"flex items-center justify-between p-4 bg-transparent\">\n            <div className=\"flex items-center space-x-2 overflow-x-auto scrollbar-hide\">\n              <div className=\"flex rounded-lg bg-gray-800/30 p-1\">\n                {filterOptions.map((option) => (\n                  <button\n                    key={option.value}\n                    onClick={() => setContentFilter(option.value)}\n                    className={clsx(\n                      \"px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200\",\n                      contentFilter === option.value \n                        ? \"bg-blue-600 text-white shadow-md\" \n                        : \"text-gray-400 hover:text-gray-200 hover:bg-gray-700/30\"\n                    )}\n                  >\n                    {option.label}\n                  </button>\n                ))}\n              </div>\n            </div>\n            \n            <button \n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              className=\"p-2.5 bg-gray-800/30 border border-gray-700/50 rounded-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors\"\n            >\n              <SlidersHorizontal className=\"w-5 h-5\" />\n            </button>\n          </div>\n          \n          {/* Advanced filters */}\n          {showAdvancedFilters && (\n            <div className=\"px-4 py-3 bg-gray-800/20 border-t border-b border-gray-700/30\">\n              <div className=\"mb-3\">\n                <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Sort By</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {sortFilters.map(({ value, label, icon: Icon }) => (\n                    <button\n                      key={value}\n                      onClick={() => setSortFilter(value)}\n                      className={clsx(\n                        'px-3 py-1.5 rounded-full flex items-center space-x-2 text-sm transition-colors',\n                        sortFilter === value\n                          ? 'bg-blue-600 text-white'\n                          : 'text-gray-400 hover:text-white bg-gray-800/30 hover:bg-gray-700/50'\n                      )}\n                    >\n                      <Icon className=\"w-4 h-4\" />\n                      <span>{label}</span>\n                    </button>\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-sm font-medium text-gray-300 mb-2\">Time Range</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {timeFilters.map(({ value, label }) => (\n                    <button\n                      key={value}\n                      onClick={() => setTimeFilter(value)}\n                      className={clsx(\n                        'px-3 py-1 rounded-full text-sm transition-colors',\n                        timeFilter === value\n                          ? 'bg-blue-600 text-white'\n                          : 'text-gray-400 hover:text-white bg-gray-800/30 hover:bg-gray-700/50'\n                      )}\n                    >\n                      {label}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Items feed */}\n      <div className=\"px-4 pb-4 space-y-4\">\n        {loading ? (\n          <div className=\"flex flex-col items-center justify-center py-16\">\n            <Loader2 className=\"w-10 h-10 text-blue-500 animate-spin mb-4\" />\n            <p className=\"text-gray-400\">Loading content...</p>\n          </div>\n        ) : filteredItems.length > 0 ? (\n          <div className=\"space-y-4\">\n            {filteredItems.map(renderItem)}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center py-16 text-center\">\n            <div className=\"w-16 h-16 bg-gray-800/50 border border-gray-700/50 rounded-full flex items-center justify-center mb-4\">\n              <Filter className=\"w-8 h-8 text-gray-500\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-white mb-1\">No content found</h3>\n            <p className=\"text-gray-400 mb-6 max-w-md\">\n              {contentFilter === 'ALL' \n                ? 'No posts or content available.' \n                : `No ${contentFilter === PostType.EVENT ? 'event' : \n                    contentFilter === PostType.POLL ? 'poll' :\n                    contentFilter === PostType.TEXT ? 'text' :\n                    contentFilter === PostType.IMAGE ? 'image' :\n                    contentFilter === PostType.VIDEO ? 'video' :\n                    contentFilter === PostType.LINK ? 'link' :\n                    ''} content found. Try a different filter or create a new post.`}\n            </p>\n            {showCreateButton && (\n              <button\n                onClick={openCreatePostModal}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Post\n              </button>\n            )}\n          </div>\n        )}\n        \n        {/* Create post floating button (for mobile) */}\n        {showCreateButton && (\n          <div className=\"fixed bottom-6 right-6 md:hidden\">\n            <button\n              onClick={openCreatePostModal}\n              className=\"w-12 h-12 rounded-full bg-blue-600 text-white shadow-lg flex items-center justify-center hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-6 h-6\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} ","import { PrismaClient, Post as DBPost, PostInteraction, IndexerState, BlockEvent, Prisma } from '@prisma/client';\nimport { Post, PostType } from '../types/post';\nimport { User } from '../types/user';\nimport { Tribe } from '../types/tribe';\nimport { JsonValue } from '@prisma/client/runtime/library';\n\n// Check if running in browser or server\nconst isBrowser = typeof window !== 'undefined';\n\n// Helper types for mocking in browser\ntype MockDBPost = any;\ntype MockPostInteraction = any;\n\ninterface CreatePostInput {\n  id: string;\n  authorId: string;\n  content: string;\n  type: string;\n  tribeId: string;\n  metadata?: Prisma.InputJsonValue;\n  blockchainId?: number;\n  blockchainTxHash?: string;\n  isConfirmed?: boolean;\n}\n\nexport class DBService {\n  private prisma: PrismaClient | null = null;\n  private static instance: DBService;\n  private isServer: boolean;\n\n  private constructor() {\n    this.isServer = !isBrowser;\n    if (!this.isServer) {\n      // In browser, don't initialize Prisma\n      console.log('Running in browser environment - database operations will be mocked');\n    } else {\n      // Only initialize Prisma on the server\n      try {\n        this.prisma = new PrismaClient();\n      } catch (err) {\n        console.error('Failed to initialize PrismaClient:', err);\n      }\n    }\n  }\n\n  public static getInstance(): DBService {\n    if (!DBService.instance) {\n      DBService.instance = new DBService();\n    }\n    return DBService.instance;\n  }\n\n  // Make sure we're not using Prisma in the browser\n  private ensurePrisma(): PrismaClient {\n    if (!this.prisma) {\n      if (this.isServer) {\n        throw new Error('PrismaClient not initialized');\n      } else {\n        throw new Error('Database operations not available in browser');\n      }\n    }\n    return this.prisma;\n  }\n\n  async createPost(post: CreatePostInput): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      return { ...post };\n    }\n    \n    return this.ensurePrisma().post.create({\n      data: {\n        id: post.id,\n        authorId: post.authorId,\n        content: post.content,\n        type: post.type,\n        tribeId: post.tribeId,\n        metadata: post.metadata || {},\n        blockchainId: post.blockchainId,\n        blockchainTxHash: post.blockchainTxHash,\n        isConfirmed: post.isConfirmed || false,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n    });\n  }\n\n  async getPost(id: string): Promise<DBPost | MockDBPost | null> {\n    if (!this.isServer) {\n      return null;\n    }\n    \n    return this.ensurePrisma().post.findUnique({\n      where: { id }\n    });\n  }\n\n  async getPostByBlockchainId(blockchainId: number): Promise<DBPost | MockDBPost | null> {\n    if (!this.isServer) {\n      // In browser, return null to fall back to blockchain\n      return null;\n    }\n    \n    return this.ensurePrisma().post.findUnique({\n      where: { blockchainId },\n    });\n  }\n\n  async getPostsByTribe(tribeId: string, limit = 20, offset = 0): Promise<DBPost[] | MockDBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: { \n        tribeId,\n        updatedAt: { not: undefined }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    });\n  }\n\n  async getUserFeed(userId: string, limit = 20, offset = 0): Promise<DBPost[] | MockDBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        authorId: userId,\n        updatedAt: { not: undefined }\n      },\n      orderBy: { createdAt: 'desc' },\n      take: limit,\n      skip: offset,\n    });\n  }\n\n  async confirmPost(blockchainId: number, txHash: string): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      // Mock response in browser\n      return { blockchainId, blockchainTxHash: txHash, isConfirmed: true };\n    }\n    \n    return this.ensurePrisma().post.update({\n      where: { blockchainId },\n      data: {\n        blockchainTxHash: txHash,\n        isConfirmed: true,\n        confirmedAt: new Date(),\n      },\n    });\n  }\n\n  async deletePost(id: string): Promise<DBPost | MockDBPost> {\n    if (!this.isServer) {\n      return { id };\n    }\n    \n    return this.ensurePrisma().post.update({\n      where: { id },\n      data: { updatedAt: null },\n    });\n  }\n\n  async createInteraction(postId: string, userId: string, type: string): Promise<PostInteraction | MockPostInteraction> {\n    if (!this.isServer) {\n      // Mock response in browser\n      return { id: Date.now().toString(), postId, userId, type };\n    }\n    \n    return this.ensurePrisma().postInteraction.create({\n      data: {\n        postId,\n        userId,\n        type,\n      },\n    });\n  }\n\n  async getInteractions(postId: string): Promise<PostInteraction[] | MockPostInteraction[]> {\n    if (!this.isServer) {\n      // In browser, return empty array\n      return [];\n    }\n    \n    return this.ensurePrisma().postInteraction.findMany({\n      where: { postId },\n    });\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.isServer && this.prisma) {\n      await this.prisma.$disconnect();\n    }\n  }\n\n  // Tribe-related methods\n  async getTribe(id: string): Promise<Tribe | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      const tribeData = localStorage.getItem(`tribe:${id}`);\n      return tribeData ? JSON.parse(tribeData) : null;\n    } catch (error) {\n      console.error('Error getting tribe:', error);\n      return null;\n    }\n  }\n\n  async getAllTribes(limit: number = 100, offset: number = 0): Promise<Tribe[]> {\n    try {\n      if (this.isServer) {\n        return [];\n      }\n      \n      // In a real app, this would query all tribes from a database\n      // For now, we'll scan localStorage for tribe keys\n      const tribes: Tribe[] = [];\n      const tribeIdsKey = 'tribe_ids';\n      const tribeIds = localStorage.getItem(tribeIdsKey);\n      \n      if (tribeIds) {\n        const parsedIds = JSON.parse(tribeIds) as string[];\n        const slicedIds = parsedIds.slice(offset, offset + limit);\n        \n        for (const id of slicedIds) {\n          const tribe = await this.getTribe(id);\n          if (tribe) {\n            tribes.push(tribe);\n          }\n        }\n      }\n      \n      return tribes;\n    } catch (error) {\n      console.error('Error getting all tribes:', error);\n      return [];\n    }\n  }\n\n  async createOrUpdateTribe(tribe: Tribe): Promise<boolean> {\n    try {\n      if (this.isServer) {\n        return false;\n      }\n      \n      // Store the tribe\n      localStorage.setItem(`tribe:${tribe.id}`, JSON.stringify(tribe));\n      \n      // Update tribe IDs list\n      const tribeIdsKey = 'tribe_ids';\n      const tribeIds = localStorage.getItem(tribeIdsKey);\n      let parsedIds: string[] = tribeIds ? JSON.parse(tribeIds) : [];\n      \n      if (!parsedIds.includes(tribe.id)) {\n        parsedIds.push(tribe.id);\n        localStorage.setItem(tribeIdsKey, JSON.stringify(parsedIds));\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error creating/updating tribe:', error);\n      return false;\n    }\n  }\n\n  // User-related methods\n  async getUserByAddress(address: string): Promise<User | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      const userData = localStorage.getItem(`user:${address}`);\n      return userData ? JSON.parse(userData) : null;\n    } catch (error) {\n      console.error('Error getting user by address:', error);\n      return null;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | null> {\n    try {\n      if (this.isServer) {\n        return null;\n      }\n      \n      // In a real app, this would query by username from a database\n      // For now, we'll scan the username mapping\n      const usernameMapKey = 'username_map';\n      const usernameMap = localStorage.getItem(usernameMapKey);\n      \n      if (usernameMap) {\n        const parsedMap = JSON.parse(usernameMap) as Record<string, string>;\n        const address = Object.entries(parsedMap).find(([_, u]) => u === username)?.[0];\n        \n        if (address) {\n          return this.getUserByAddress(address);\n        }\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Error getting user by username:', error);\n      return null;\n    }\n  }\n\n  async createOrUpdateUser(user: User): Promise<boolean> {\n    try {\n      if (this.isServer) {\n        return false;\n      }\n      \n      // Store the user\n      localStorage.setItem(`user:${user.address}`, JSON.stringify(user));\n      \n      // Update username mapping if username exists\n      if (user.username) {\n        const usernameMapKey = 'username_map';\n        const usernameMap = localStorage.getItem(usernameMapKey);\n        const parsedMap = usernameMap ? JSON.parse(usernameMap) as Record<string, string> : {};\n        \n        parsedMap[user.address] = user.username;\n        localStorage.setItem(usernameMapKey, JSON.stringify(parsedMap));\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error creating/updating user:', error);\n      return false;\n    }\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    try {\n      if (this.isServer) {\n        return [];\n      }\n      \n      // In a real app, this would query all users from a database\n      // For now, we'll scan localStorage for user keys\n      const users: User[] = [];\n      const userAddresses: string[] = [];\n      \n      // This is inefficient but works for demo purposes\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key?.startsWith('user:')) {\n          const address = key.substring(5);\n          userAddresses.push(address);\n        }\n      }\n      \n      for (const address of userAddresses) {\n        const user = await this.getUserByAddress(address);\n        if (user) {\n          users.push(user);\n        }\n      }\n      \n      return users;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n\n  async getUserPosts(userId: string, limit = 20, offset = 0): Promise<Post[]> {\n    return this.getMockData('user_posts', userId) || [];\n  }\n\n  private getMockData(type: string, id: string): any {\n    if (this.isServer) return null;\n    try {\n      const key = `${type}:${id}`;\n      const data = localStorage.getItem(key);\n      if (!data) return null;\n      \n      const parsed = JSON.parse(data);\n      if (parsed.expires && parsed.expires < Date.now()) {\n        localStorage.removeItem(key);\n        return null;\n      }\n      return parsed.data;\n    } catch (error) {\n      console.error('Error reading mock data:', error);\n      return null;\n    }\n  }\n\n  private setMockData(type: string, id: string, data: any): void {\n    if (this.isServer) return;\n    try {\n      const key = `${type}:${id}`;\n      const value = {\n        data,\n        timestamp: Date.now(),\n        expires: Date.now() + 5 * 60 * 1000 // 5 minutes\n      };\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error writing mock data:', error);\n    }\n  }\n\n  // Indexer-related methods\n  public async getLastIndexedBlock(chainId: number): Promise<number> {\n    if (!this.isServer) {\n      return 0;\n    }\n    \n    const key = `lastIndexedBlock:${chainId}`;\n    const stored = localStorage.getItem(key);\n    return stored ? Number(stored) : 0;\n  }\n\n  public async updateLastIndexedBlock(blockNumber: number, chainId: number): Promise<void> {\n    if (!this.isServer) {\n      const key = `lastIndexedBlock:${chainId}`;\n      localStorage.setItem(key, blockNumber.toString());\n      return;\n    }\n  }\n\n  public async createBlockEvent(event: {\n    blockNumber: number;\n    transactionHash: string;\n    eventName: string;\n    eventData: Prisma.InputJsonValue;\n  }): Promise<BlockEvent> {\n    return this.ensurePrisma().blockEvent.create({\n      data: {\n        blockNumber: BigInt(event.blockNumber),\n        transactionHash: event.transactionHash,\n        eventName: event.eventName,\n        eventData: event.eventData,\n        processed: false,\n        error: null\n      }\n    });\n  }\n\n  public async markEventProcessed(eventId: number, error?: string): Promise<void> {\n    await this.ensurePrisma().blockEvent.update({\n      where: { id: eventId },\n      data: {\n        processed: true,\n        error,\n        updatedAt: new Date()\n      }\n    });\n  }\n\n  public async getUnprocessedEvents(limit: number = 100): Promise<BlockEvent[]> {\n    return this.ensurePrisma().blockEvent.findMany({\n      where: { processed: false },\n      orderBy: { blockNumber: 'asc' },\n      take: limit\n    });\n  }\n\n  public async createOrUpdatePost(post: CreatePostInput): Promise<DBPost> {\n    if (!this.isServer) {\n      throw new Error('Cannot create/update post in browser environment');\n    }\n\n    return this.ensurePrisma().post.upsert({\n      where: { id: post.id },\n      create: {\n        ...post,\n        metadata: post.metadata || {},\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      update: {\n        ...post,\n        metadata: post.metadata || {},\n        updatedAt: new Date()\n      }\n    });\n  }\n\n  public async getUnindexedPosts(limit: number = 100): Promise<DBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        updatedAt: { equals: undefined }\n      },\n      orderBy: { createdAt: 'asc' },\n      take: limit\n    });\n  }\n\n  public async getPostsByBlockRange(startBlock: number, endBlock: number): Promise<DBPost[]> {\n    if (!this.isServer) {\n      return [];\n    }\n    \n    return this.ensurePrisma().post.findMany({\n      where: {\n        createdAt: {\n          gte: new Date(startBlock * 1000),\n          lte: new Date(endBlock * 1000)\n        }\n      },\n      orderBy: { createdAt: 'asc' }\n    });\n  }\n\n  public async updateIndexerState(chainId: number, data: Partial<{\n    lastIndexedBlock: bigint;\n    lastSyncTime: Date;\n  }>): Promise<void> {\n    await this.ensurePrisma().indexerState.upsert({\n      where: { chainId },\n      create: {\n        chainId,\n        lastIndexedBlock: data.lastIndexedBlock || BigInt(0),\n        lastSyncTime: data.lastSyncTime || new Date()\n      },\n      update: {\n        ...data\n      }\n    });\n  }\n\n  public async getIndexerState(chainId: number): Promise<IndexerState | null> {\n    return this.ensurePrisma().indexerState.findFirst({\n      where: { chainId }\n    });\n  }\n} ","import { DBService } from './db.service';\nimport { QueueService } from './queue.service';\nimport { IndexerService } from './indexer/IndexerService';\nimport { PostsService } from './posts.service';\n\n// Export service classes first\nexport { PostsService, DBService, QueueService, IndexerService };\n\n// Initialize indexer service with default chain ID (will be updated on init)\nlet indexerInstance: IndexerService | null = null;\n\nexport const getIndexerService = (chainId?: number) => {\n  if (!indexerInstance) {\n    indexerInstance = new IndexerService(chainId || 0);\n  } else if (chainId) {\n    // Update chain ID if provided\n    indexerInstance = new IndexerService(chainId);\n  }\n  return indexerInstance;\n};\n\n// Export convenience method for posts service\nexport const getPostsService = () => {\n  return PostsService.getInstance();\n};\n\n// Export service getters instead of direct instances\nexport const services = {\n  getDB: () => DBService.getInstance(),\n  getQueue: () => QueueService.getInstance(),\n  getPosts: () => PostsService.getInstance(),\n  getIndexer: getIndexerService\n}; ","import { getPublicClient, blockchain } from '../utils/blockchainUtils';\nimport { getContracts } from '../config/contracts';\nimport { QueueService as ExternalQueueService } from '../services/queue.service';\nimport { Post, PostMetadata, PostType } from '../types/post';\nimport { Post as DBPost, Prisma } from '@prisma/client';\nimport { DBService } from './db.service';\nimport { TribesHelper } from '../types/tribes';\nimport { IndexerService } from './indexer/IndexerService';\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { getIndexerService } from './index';\n\n// Import the CreatePostInput type\ninterface CreatePostInput {\n  id: string;\n  authorId: string;\n  content: string;\n  type: string;\n  tribeId: string;\n  metadata?: Prisma.InputJsonValue;\n  blockchainId?: number;\n  blockchainTxHash?: string;\n  isConfirmed?: boolean;\n}\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n    tribesHelper?: TribesHelper;\n  }\n}\n\n// Add at the top with other imports and types\nenum TaskType {\n  CACHE_POST = 'CACHE_POST',\n  REFRESH_POST = 'REFRESH_POST',\n  UPDATE_CACHE = 'UPDATE_CACHE',\n  SYNC_TRIBE = 'SYNC_TRIBE'\n}\n\n// Add at the top with other interfaces\ninterface QueueService {\n  addToQueue(type: TaskType, data: any, options?: { priority?: number }): Promise<void>;\n  processQueue(): Promise<void>;\n}\n\n/**\n * Simple LRU Cache implementation that automatically removes least recently used items\n * when the cache reaches maximum size\n */\nclass LRUCache<T> {\n  private cache: Map<string, T>;\n  private maxSize: number;\n  private keyTimestamps: Map<string, number>;\n\n  constructor(maxSize: number) {\n    this.cache = new Map();\n    this.maxSize = maxSize;\n    this.keyTimestamps = new Map();\n  }\n\n  get(key: string): T | undefined {\n    // Record this access\n    if (this.cache.has(key)) {\n      this.keyTimestamps.set(key, Date.now());\n      return this.cache.get(key);\n    }\n    return undefined;\n  }\n\n  set(key: string, value: T): void {\n    // Remove least recently used item if we're at capacity\n    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\n      const oldestKey = this.getOldestKey();\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n        this.keyTimestamps.delete(oldestKey);\n      }\n    }\n\n    this.cache.set(key, value);\n    this.keyTimestamps.set(key, Date.now());\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  delete(key: string): boolean {\n    this.keyTimestamps.delete(key);\n    return this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.keyTimestamps.clear();\n  }\n\n  getOldestKey(): string | undefined {\n    if (this.keyTimestamps.size === 0) return undefined;\n    \n    // Find the key with the oldest timestamp\n    let oldestKey: string | undefined;\n    let oldestTime = Infinity;\n\n    this.keyTimestamps.forEach((time, key) => {\n      if (time < oldestTime) {\n        oldestTime = time;\n        oldestKey = key;\n      }\n    });\n\n    return oldestKey;\n  }\n\n  get size(): number {\n    return this.cache.size;\n  }\n\n  keys(): IterableIterator<string> {\n    return this.cache.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.cache.values();\n  }\n\n  entries(): IterableIterator<[string, T]> {\n    return this.cache.entries();\n  }\n}\n\n// In-memory cache for development, replace with Redis in production\nconst postsCache = new Map<string, Post>();\nconst postsByTribeCache = new Map<string, Post[]>();\nconst postsByUserCache = new Map<string, Post[]>();\n\n// Cache expiry time (5 minutes)\nconst CACHE_EXPIRY = 5 * 60 * 1000;\n\n// For browser environment where Prisma isn't available\ntype MockDBPost = any;\n\n// Interface for blockchain post data\ninterface BlockchainPost {\n  id: bigint;\n  creator: string;\n  content: string;\n  type: string;\n  timestamp: number;\n  likes: number;\n  comments: number;\n  shares: number;\n  tribeId: bigint;\n  title: string;\n  description: string;\n  tags: string[];\n  mediaContent: { type: 'image' | 'video'; url: string }[];\n  views: number;\n  engagement: number;\n}\n\n// Define our extended Post interface to match what is used in the application\ninterface UIPost extends Post {\n  // Additional fields used in UI\n  authorName?: string;\n  tribeName?: string;\n  likes?: number;\n  comments?: number;\n}\n\n// Cache entry with timestamp for expiration\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\ninterface DBPostInput {\n  id: number;\n  metadata: JsonValue;\n  tribeId: string;\n  type: string;\n  content: string;\n  authorId: string;\n  blockNumber?: bigint;\n  transactionHash?: string;\n}\n\n// Add these new interfaces near the top after the imports\ninterface CacheMetrics {\n  hits: number;\n  misses: number;\n  source: {\n    memory: number;\n    localStorage: number;\n    indexedDB: number;\n    database: number;\n    blockchain: number;\n  };\n}\n\ninterface CacheStats {\n  lastAccess: number;\n  accessCount: number;\n  dataSource: 'memory' | 'localStorage' | 'indexedDB' | 'database' | 'blockchain';\n}\n\ninterface QueueTask {\n  type: TaskType;\n  data: any;\n  priority?: number;\n}\n\nexport class PostsService {\n  private static instance: PostsService;\n  private postsCache: LRUCache<CacheEntry<Post>>;\n  private tribePostsCache: Map<string, CacheEntry<string[]>>;\n  private userPostsCache: Map<string, CacheEntry<string[]>>;\n  private dbService: DBService | null = null;\n  private indexerService: IndexerService | null = null;\n  private queueService: QueueService | null = null;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly LOCAL_STORAGE_TTL = 24 * 60 * 60 * 1000; // 24 hours\n  private readonly MAX_CACHED_POSTS = 250;\n  private readonly MAX_POSTS_PER_TRIBE = 100;\n  private isServer: boolean;\n  private contract: any;\n  private isSyncing: boolean = false;\n  private syncProgress: number = 0;\n  private syncTotal: number = 0;\n  private syncCallbacks: Set<() => void> = new Set();\n  private lastSyncTime: number = 0;\n  private syncErrorCount: number = 0;\n  private lastError: Error | null = null;\n  private metrics: CacheMetrics = {\n    hits: 0,\n    misses: 0,\n    source: {\n      memory: 0,\n      localStorage: 0,\n      indexedDB: 0,\n      database: 0,\n      blockchain: 0\n    }\n  };\n  private cacheStats: Map<string, CacheStats> = new Map();\n\n  // Add static getInstance method\n  public static getInstance(): PostsService {\n    if (!PostsService.instance) {\n      PostsService.instance = new PostsService();\n    }\n    return PostsService.instance;\n  }\n\n  private constructor() {\n    this.postsCache = new LRUCache<CacheEntry<Post>>(this.MAX_CACHED_POSTS);\n    this.tribePostsCache = new Map();\n    this.userPostsCache = new Map();\n    this.isServer = typeof window === 'undefined';\n    \n    if (this.isServer) {\n      this.dbService = DBService.getInstance();\n      this.indexerService = getIndexerService();\n      this.setupEventListeners();\n    } else {\n      // Initialize client-side cache\n      this.initializeCache();\n    }\n  }\n\n  private setupEventListeners() {\n    // Use the new onCacheUpdate method instead of onEvent\n    this.indexerService?.onCacheUpdate((type, data) => {\n      if (type === 'posts') {\n        // Handle post updates\n        const { postId, post } = data;\n        this.invalidateCache(postId);\n      }\n    });\n  }\n\n  // New method to initialize cache\n  private async initializeCache(): Promise<void> {\n    console.info('[Cache] Initializing frontend cache...');\n    \n    try {\n      // First try to load from IndexedDB\n      await this.loadFromIndexedDB();\n      \n      // Then try localStorage as fallback\n      await this.loadFromLocalStorage();\n      \n      // Finally, fetch initial data from API\n      await this.fetchInitialData();\n      \n      console.info('[Cache] Cache initialization complete');\n      } catch (error) {\n      console.error('[Cache] Error initializing cache:', error);\n    }\n  }\n\n  private async loadFromIndexedDB(): Promise<void> {\n    if (!window.indexedDB) return;\n\n    try {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n      \n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts', 'tribes'], 'readonly');\n        const postsStore = transaction.objectStore('posts');\n        const tribesStore = transaction.objectStore('tribes');\n\n        // Load posts\n        postsStore.getAll().onsuccess = (event: any) => {\n          const posts = event.target.result;\n          posts.forEach((post: Post & { _timestamp: number }) => {\n            if (Date.now() - post._timestamp < this.LOCAL_STORAGE_TTL) {\n              const { _timestamp, ...cleanPost } = post;\n              this.setCache(post.id, cleanPost);\n            }\n          });\n        };\n\n        // Load tribes data\n        tribesStore.getAll().onsuccess = (event: any) => {\n          const tribes = event.target.result;\n          tribes.forEach((tribe: { id: string; postIds: string[]; timestamp: number }) => {\n            if (Date.now() - tribe.timestamp < this.LOCAL_STORAGE_TTL) {\n              this.tribePostsCache.set(`tribe:${tribe.id}`, {\n                data: tribe.postIds,\n                timestamp: tribe.timestamp\n              });\n            }\n          });\n        };\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('posts')) {\n          db.createObjectStore('posts', { keyPath: 'id' });\n        }\n        if (!db.objectStoreNames.contains('tribes')) {\n          db.createObjectStore('tribes', { keyPath: 'id' });\n        }\n      };\n    } catch (error) {\n      console.warn('[Cache] IndexedDB load failed:', error);\n    }\n  }\n\n  private async fetchInitialData(): Promise<void> {\n    try {\n      // Since API endpoint doesn't exist yet, fetch directly from blockchain\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Cache] No contract available for initial data fetch');\n        return;\n      }\n\n      // Get latest posts from blockchain\n      const [postIds, total] = await contract.getPostsByTribe('0', BigInt(0), BigInt(20));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Cache] Invalid post IDs from blockchain');\n        return;\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      validPosts.forEach(post => {\n        this.setCache(post.id, post);\n      });\n\n      console.info('[Cache] Initial data loaded from blockchain:', validPosts.length, 'posts');\n    } catch (error) {\n      console.error('[Cache] Error fetching initial data:', error);\n    }\n  }\n\n  // Modified getFromCacheOrDB to prioritize cached data\n  private async getFromCacheOrDB(id: string): Promise<Post | null> {\n    const cacheKey = `posts:${id}`;\n    \n    // Check memory cache first\n    const cachedEntry = this.postsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      this.logCacheAccess(cacheKey, true, 'memory');\n      return cachedEntry.data;\n    }\n\n    if (!this.isServer) {\n      // Try IndexedDB\n      try {\n        const idbPost = await this.getFromIndexedDB(id);\n        if (idbPost) {\n          this.logCacheAccess(cacheKey, true, 'indexedDB');\n          return idbPost;\n        }\n      } catch (error) {\n        console.warn('[Cache] IndexedDB access failed:', error);\n      }\n\n      // Try localStorage\n      const localPost = this.getFromLocalStorage(id);\n      if (localPost) {\n        this.logCacheAccess(cacheKey, true, 'localStorage');\n        return localPost;\n      }\n\n      // If on frontend and not in cache, fetch from API\n      try {\n        const response = await fetch(`/api/posts/${id}`);\n        if (response.ok) {\n          const post = await response.json();\n          this.setCache(id, post);\n          return post;\n        }\n      } catch (error) {\n        console.error('[API] Error fetching post:', error);\n      }\n      \n      return null;\n    }\n\n    // Server-side: try database\n    const dbPost = await this.dbService?.getPost(id);\n    if (dbPost) {\n      this.logCacheAccess(cacheKey, true, 'database');\n      const mappedPost = await this.mapBlockchainPostToUIPost(dbPost);\n      if (mappedPost) {\n        this.setCache(id, mappedPost);\n        return mappedPost;\n      }\n    }\n\n    // Only verify with blockchain on server-side\n      if (this.isServer) {\n      this.logCacheAccess(cacheKey, false, 'blockchain');\n      return this.fetchFromBlockchain(id);\n    }\n\n        return null;\n      }\n\n  // Modified getUserFeed to prioritize cached data\n  public async getUserFeed(userAddress: string, limit = 50, offset = 0): Promise<Post[]> {\n    if (!userAddress) return [];\n\n    const cacheKey = `user_${userAddress}`;\n    \n    // Check cache first\n    const cachedEntry = this.userPostsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      const postsPromises = cachedEntry.data\n        .slice(offset, offset + limit)\n        .map(id => this.getFromCacheOrDB(id));\n      \n      const resolvedPosts = await Promise.all(postsPromises);\n      const validPosts = resolvedPosts.filter((post): post is Post => post !== null);\n      if (validPosts.length > 0) {\n        return validPosts;\n      }\n    }\n\n    // Try blockchain if not in cache\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Blockchain] No contract available for user feed');\n        return [];\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getPostsByUser(userAddress, BigInt(offset), BigInt(limit));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Blockchain] Invalid post IDs from blockchain');\n        return [];\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      if (validPosts.length > 0) {\n        // Cache the results\n        this.cacheUserPosts(userAddress, validPosts);\n        console.info('[Blockchain] Retrieved', validPosts.length, 'posts for user', userAddress);\n        return validPosts;\n      }\n    } catch (error) {\n      console.error('[Blockchain] Error fetching user feed:', error);\n    }\n\n    return [];\n  }\n\n  // Helper method to cache user posts\n  private cacheUserPosts(userAddress: string, posts: Post[]): void {\n    this.userPostsCache.set(`user_${userAddress}`, {\n      data: posts.map(post => post.id),\n      timestamp: Date.now()\n    });\n    \n    // Cache individual posts\n    posts.forEach(post => {\n      this.setCache(post.id, post);\n    });\n  }\n\n  // Modified getPostsByTribe to prioritize cached data\n  public async getPostsByTribe(tribeId: string, limit = 20, offset = 0): Promise<Post[]> {\n    const cacheKey = `tribe:${tribeId}`;\n    \n    // Check memory cache first\n    const cachedEntry = this.tribePostsCache.get(cacheKey);\n    if (cachedEntry && !this.isCacheExpired(cachedEntry)) {\n      const postsPromises = cachedEntry.data\n        .slice(offset, offset + limit)\n        .map(id => this.getFromCacheOrDB(id));\n      \n      const resolvedPosts = await Promise.all(postsPromises);\n      const validPosts = resolvedPosts.filter((post): post is Post => post !== null);\n      if (validPosts.length > 0) {\n        return validPosts;\n      }\n    }\n\n    // Try blockchain if not in cache\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('[Blockchain] No contract available for tribe posts');\n        return [];\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getTribePosts(tribeId, BigInt(offset), BigInt(limit));\n      if (!Array.isArray(postIds)) {\n        console.warn('[Blockchain] Invalid post IDs from blockchain');\n        return [];\n      }\n\n      // Fetch each post\n      const posts = await Promise.all(\n        postIds.map(async (postId) => {\n          const post = await contract.getPost(Number(postId));\n          return post ? this.mapBlockchainPostToUIPost(post) : null;\n        })\n      );\n\n      // Filter out nulls and cache valid posts\n      const validPosts = posts.filter((post): post is Post => post !== null);\n      \n      if (validPosts.length > 0) {\n        // Cache the results\n        this.cacheTribePosts(tribeId, validPosts);\n        console.info('[Blockchain] Retrieved', validPosts.length, 'posts for tribe', tribeId);\n        return validPosts;\n      }\n                } catch (error) {\n      console.error('[Blockchain] Error fetching tribe posts:', error);\n    }\n\n    return [];\n  }\n\n  // Add helper method for tribe posts caching\n  private cacheTribePosts(tribeId: string, posts: Post[]): void {\n    this.tribePostsCache.set(`tribe:${tribeId}`, {\n      data: posts.map(post => post.id),\n      timestamp: Date.now()\n    });\n    \n    // Cache individual posts\n    posts.forEach(post => {\n      this.setCache(post.id, post);\n    });\n  }\n\n  private async getFromIndexedDB(id: string): Promise<Post | null> {\n    if (!window.indexedDB) return null;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts'], 'readonly');\n        const store = transaction.objectStore('posts');\n        const getRequest = store.get(id);\n\n        getRequest.onsuccess = () => {\n          const post = getRequest.result;\n          if (post && Date.now() - post._timestamp < this.LOCAL_STORAGE_TTL) {\n            delete post._timestamp;\n            resolve(post);\n          } else {\n            resolve(null);\n          }\n        };\n\n        getRequest.onerror = () => reject(getRequest.error);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains('posts')) {\n          db.createObjectStore('posts', { keyPath: 'id' });\n        }\n      };\n    });\n  }\n\n  private async saveToIndexedDB(id: string, post: Post): Promise<void> {\n    if (!window.indexedDB) return;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open('tribes_posts_cache', 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        const db = request.result;\n        const transaction = db.transaction(['posts'], 'readwrite');\n        const store = transaction.objectStore('posts');\n        const storagePost = { ...post, _timestamp: Date.now() };\n        \n        store.put(storagePost).onsuccess = () => resolve();\n        transaction.onerror = () => reject(transaction.error);\n      };\n    });\n  }\n\n  public getCacheMetrics(): CacheMetrics {\n    return { ...this.metrics };\n  }\n\n  public async clearExpiredCache(): Promise<void> {\n    const now = Date.now();\n    \n    // Clear memory cache\n    for (const [key, entry] of this.postsCache.entries()) {\n      if (this.isCacheExpired(entry)) {\n        this.postsCache.delete(key);\n      }\n    }\n\n    // Clear IndexedDB\n    if (!this.isServer) {\n      try {\n        const request = indexedDB.open('tribes_posts_cache', 1);\n        request.onsuccess = () => {\n          const db = request.result;\n          const transaction = db.transaction(['posts'], 'readwrite');\n          const store = transaction.objectStore('posts');\n          const range = IDBKeyRange.upperBound(now - this.LOCAL_STORAGE_TTL);\n          \n          store.index('timestamp').openCursor(range).onsuccess = (event) => {\n            const cursor = (event.target as IDBRequest).result;\n            if (cursor) {\n              store.delete(cursor.primaryKey);\n              cursor.continue();\n            }\n          };\n        };\n    } catch (error) {\n        console.warn('[Cache] Error clearing IndexedDB:', error);\n      }\n    }\n\n    console.info('[Cache] Cleared expired entries');\n  }\n\n  // Update the setCache method\n  private async setCache(key: string, post: Post): Promise<void> {\n    const cacheKey = `posts:${key}`;\n    \n    this.postsCache.set(cacheKey, {\n      data: post,\n      timestamp: Date.now()\n    });\n\n    if (!this.isServer) {\n      // Save to IndexedDB\n      try {\n        await this.saveToIndexedDB(post.id, post);\n      } catch (error) {\n        console.warn('[Cache] Failed to save to IndexedDB, falling back to localStorage:', error);\n        this.saveToLocalStorage(post.id, post);\n      }\n\n      // Queue for background processing\n      if (this.queueService) {\n        await this.queueService.addToQueue(TaskType.CACHE_POST, { postId: post.id, post }, { priority: 3 });\n      }\n    }\n  }\n\n  private async fetchFromBlockchain(id: string): Promise<Post | null> {\n    try {\n      const contract = await this.getContract();\n      if (!contract) {\n        console.warn('No blockchain contract available');\n        return null;\n      }\n      \n      const blockchainPost = await contract.getPost(parseInt(id));\n      if (blockchainPost) {\n        const mappedPost = await this.mapBlockchainPostToUIPost(blockchainPost);\n        if (mappedPost) {\n          // Save to DB through indexer\n          const dbPost: CreatePostInput = {\n            id: mappedPost.id,\n            authorId: mappedPost.author,\n            content: mappedPost.content,\n            type: mappedPost.type.toString(),\n            tribeId: mappedPost.tribeId.toString(),\n            metadata: mappedPost.metadata ? JSON.stringify(mappedPost.metadata) : {},\n            blockchainId: parseInt(mappedPost.id),\n            isConfirmed: true\n          };\n          \n          await this.dbService?.createOrUpdatePost(dbPost);\n          \n          this.setCache(id, mappedPost);\n          \n          if (!this.isServer) {\n            this.saveToLocalStorage(id, mappedPost);\n          }\n          \n          return mappedPost;\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching post from blockchain:', error);\n    }\n    return null;\n  }\n\n  private getFromLocalStorage(id: string): Post | null {\n    try {\n      const localStorageKey = `post_${id}`;\n      const localPost = localStorage.getItem(localStorageKey);\n      \n      if (localPost) {\n        const parsedPost = JSON.parse(localPost);\n        const timestamp = parsedPost._timestamp || 0;\n        \n        if (Date.now() - timestamp < this.LOCAL_STORAGE_TTL) {\n          delete parsedPost._timestamp;\n          const post = parsedPost as Post;\n          this.setCache(id, post);\n          \n          if (Date.now() - timestamp > this.CACHE_TTL / 2) {\n            this.queuePostRefresh(id);\n          }\n          \n          return post;\n        }\n      }\n    } catch (error) {\n      console.warn('Error reading post from localStorage:', error);\n    }\n    return null;\n  }\n\n  private saveToLocalStorage(id: string, post: Post): void {\n    try {\n      const storagePost = { ...post, _timestamp: Date.now() };\n      localStorage.setItem(`post_${id}`, JSON.stringify(storagePost));\n    } catch (error) {\n      console.warn('Error saving post to localStorage:', error);\n    }\n  }\n\n  // Update queuePostRefresh method\n  private queuePostRefresh(postId: string): void {\n    if (this.isServer) return;\n    \n    // Add to queue with low priority (3) so it doesn't block other operations\n    if (this.queueService) {\n      this.queueService.addToQueue(TaskType.REFRESH_POST, { postId }, { priority: 3 });\n    }\n  }\n\n  async getPost(id: string): Promise<Post | null> {\n    return this.getFromCacheOrDB(id);\n  }\n\n  // Sync status management\n  public getSyncStatus() {\n    return {\n      isSyncing: this.isSyncing,\n      progress: this.syncProgress,\n      total: this.syncTotal,\n      lastSyncTime: this.lastSyncTime,\n      errorCount: this.syncErrorCount,\n      lastError: this.lastError\n    };\n  }\n\n  // Add sync status listeners\n  public addSyncListener(callback: () => void) {\n    this.syncCallbacks.add(callback);\n    return () => this.syncCallbacks.delete(callback);\n  }\n\n  public isSyncingPosts() {\n    return this.isSyncing;\n  }\n\n  private notifySyncListeners() {\n    this.syncCallbacks.forEach(callback => callback());\n  }\n\n  // Improved background sync mechanism \n  private async startBackgroundSync() {\n    if (this.isServer) return;\n\n    const syncPosts = async () => {\n      if (this.isSyncing) return;\n      \n      try {\n        this.isSyncing = true;\n        this.syncProgress = 0;\n        this.syncTotal = 0;\n        this.lastError = null;\n        this.notifySyncListeners();\n\n        // Get tribe IDs to sync from cache\n        const tribeIds = Array.from(this.tribePostsCache.keys());\n        this.syncTotal = tribeIds.length;\n        \n        // If no tribes in cache, try to get them from localStorage\n        if (tribeIds.length === 0) {\n          try {\n            const keys = Object.keys(localStorage);\n            for (const key of keys) {\n              if (key.startsWith('tribe_posts_')) {\n                const tribeId = key.replace('tribe_posts_', '');\n                if (!tribeIds.includes(`tribe:${tribeId}`)) {\n                  tribeIds.push(`tribe:${tribeId}`);\n                }\n              }\n            }\n            this.syncTotal = tribeIds.length;\n    } catch (error) {\n            console.warn('Error reading localStorage for tribe IDs:', error);\n          }\n        }\n        \n        // Sync each tribe's posts\n        for (let i = 0; i < tribeIds.length; i++) {\n          const tribeKey = tribeIds[i];\n          const tribeId = tribeKey.replace('tribe:', '');\n          \n          try {\n            await this.syncTribePosts(tribeId);\n            this.syncProgress = i + 1;\n            this.notifySyncListeners();\n          } catch (error) {\n            console.error(`Error syncing posts for tribe ${tribeId}:`, error);\n            this.syncErrorCount++;\n            this.lastError = error instanceof Error ? error : new Error('Unknown sync error');\n          }\n        }\n        \n        this.lastSyncTime = Date.now();\n        \n        // Reset error count after successful sync\n        if (this.syncErrorCount > 0 && this.syncProgress === this.syncTotal) {\n          this.syncErrorCount = 0;\n        }\n      } catch (error) {\n        console.error('Error in sync process:', error);\n        this.syncErrorCount++;\n        this.lastError = error instanceof Error ? error : new Error('Unknown sync error');\n      } finally {\n        this.isSyncing = false;\n        this.notifySyncListeners();\n      }\n    };\n\n    // Initial sync with delay to allow app to load\n    setTimeout(async () => {\n      await syncPosts();\n    }, 5000);\n\n    // Set up periodic sync every 30 seconds\n    setInterval(syncPosts, 30000);\n  }\n\n  // Enhanced tribe posts sync\n  private async syncTribePosts(tribeId: string) {\n    try {\n          const contract = await this.getContract();\n          if (!contract) {\n        console.warn('[Blockchain] No contract available for syncing tribe posts');\n        return;\n      }\n\n      // Get posts from blockchain\n      const [postIds, total] = await contract.getPostsByTribe(tribeId, BigInt(0), BigInt(this.MAX_POSTS_PER_TRIBE));\n      \n      if (Array.isArray(postIds)) {\n        // Fetch all posts\n        const rawPosts = await Promise.all(\n          postIds.map(async postId => {\n            const post = await contract.getPost(Number(postId));\n            return post ? this.mapBlockchainPostToUIPost(post) : null;\n          })\n        );\n        \n        // Filter out null posts\n        const validPosts = rawPosts.filter((post): post is Post => post !== null);\n        \n        if (validPosts.length > 0) {\n          // Save posts individually (now type-safe since we filtered nulls)\n          await Promise.all(\n            validPosts.map(async (post) => {\n              this.setCache(post.id, post);\n              await this.dbService?.createPost({\n                id: post.id,\n                authorId: post.author,\n                content: post.content,\n                type: post.type.toString(),\n                tribeId: post.tribeId.toString(),\n                metadata: post.metadata ? JSON.stringify(post.metadata) : {},\n                blockchainId: parseInt(post.id),\n                isConfirmed: true\n              });\n            })\n          );\n          \n          // Save the list of post IDs (now type-safe since we're using validPosts)\n          const validPostIds = validPosts.map((post) => post.id);\n          const cacheKey = `tribe_${tribeId}`;\n          this.tribePostsCache.set(cacheKey, {\n            data: validPostIds,\n            timestamp: Date.now()\n          });\n          \n          // Save to localStorage if client-side\n          if (!this.isServer) {\n            try {\n              localStorage.setItem(cacheKey, JSON.stringify({\n                data: validPostIds,\n                timestamp: Date.now()\n              }));\n            } catch (error) {\n              console.warn('[Cache] Error saving tribe posts to localStorage:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('[Blockchain] Error syncing tribe posts:', error);\n    }\n  }\n\n  /**\n   * Clear a specific post from cache to force a fresh fetch\n   * @param postId Post ID to clear from cache\n   */\n  public clearPostFromCache(postId: string): void {\n    const cacheKey = `posts:${postId}`;\n    this.postsCache.delete(cacheKey);\n    \n    // Also clear from localStorage if client-side\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`post_${postId}`);\n      } catch (error) {\n        console.warn('Error removing post from localStorage:', error);\n      }\n    }\n  }\n  \n  /**\n   * Clear a tribe's posts from cache to force a fresh fetch\n   * @param tribeId Tribe ID to clear from cache\n   */\n  public clearTribeCache(tribeId: string): void {\n    const cacheKey = `tribe:${tribeId}`;\n    this.tribePostsCache.delete(cacheKey);\n    \n    // Also clear from localStorage if client-side\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`tribe_posts_${tribeId}`);\n          } catch (error) {\n        console.warn('Error removing tribe posts from localStorage:', error);\n      }\n    }\n  }\n\n  private invalidateCache(postId: string): void {\n    // Clear specific post from cache\n    this.clearPostFromCache(postId);\n    \n    // Clear related tribe cache\n    const post = this.postsCache.get(`posts:${postId}`)?.data;\n    if (post?.tribeId) {\n      this.clearTribeCache(post.tribeId.toString());\n    }\n    \n    // Clear user cache\n    if (post?.author) {\n      this.clearUserCache(post.author);\n    }\n  }\n\n  private clearUserCache(userAddress: string): void {\n    this.userPostsCache.delete(userAddress);\n    if (!this.isServer) {\n      try {\n        localStorage.removeItem(`user_posts_${userAddress}`);\n          } catch (error) {\n        console.warn('[Cache] Error removing user posts from localStorage:', error);\n      }\n    }\n  }\n\n  // Get contract with proper provider\n  private async getContract(): Promise<any> {\n    if (this.contract) {\n      return this.contract;\n    }\n\n    try {\n      // Connect to blockchain if not already connected\n      await blockchain.connect();\n      \n      const chainId = await blockchain.getChainId();\n      console.info('[Blockchain] Using chain ID:', chainId);\n      \n      const { postMinter } = getContracts(chainId);\n      \n      // Use viem's public client instead of ethers.js Contract\n      const publicClient = getPublicClient(chainId);\n      \n      // Create a wrapper for the contract that uses viem's publicClient\n      const contract = {\n        address: postMinter.address,\n        abi: postMinter.abi,\n        \n        // Generic method for calling read functions\n        callReadFunction: async (functionName: string, args: any[] = []) => {\n          try {\n            const result = await publicClient.readContract({\n              address: postMinter.address as `0x${string}`,\n              abi: postMinter.abi,\n              functionName,\n              args\n            });\n            return result;\n          } catch (error) {\n            console.error(`[Blockchain] Error calling ${functionName}:`, error);\n            throw error;\n          }\n        },\n        \n        // Define specific contract methods\n        getPostsByUser: async (userId: string, offset: bigint, limit: bigint) => {\n          return contract.callReadFunction('getPostsByUser', [userId, offset, limit]);\n        },\n        \n        getPost: async (postId: number) => {\n          return contract.callReadFunction('getPost', [postId]);\n        },\n        \n        getTribePosts: async (tribeId: number, offset: bigint, limit: bigint) => {\n          return contract.callReadFunction('getTribePosts', [tribeId, offset, limit]);\n        },\n        \n        getUserPosts: async (userId: string) => {\n          console.info('[Blockchain] getUserPosts not implemented, using fallback');\n      return [];\n    }\n      };\n      \n      // Cache the contract\n      this.contract = contract;\n      return contract;\n    } catch (error) {\n      console.error('[Blockchain] Error creating contract:', error);\n      \n      // Return a mock contract for fallback\n      return this.createMockContract();\n    }\n  }\n  \n  // Create a mock contract for fallback\n  private createMockContract(): any {\n    return {\n      getPostsByUser: async () => {\n        console.info('[Mock] Using mock contract getPostsByUser');\n        return [[], 0];\n      },\n      getUserPosts: async () => {\n        console.info('[Mock] Using mock contract getUserPosts');\n      return [];\n      },\n      getPost: async () => null,\n      getTribePosts: async () => {\n        console.info('[Mock] Using mock contract getTribePosts');\n        return [[], 0]; \n      }\n    };\n  }\n\n  // Add these methods back\n  private loadFromLocalStorage(): void {\n    try {\n      // Load posts cache\n      const postsCache = localStorage.getItem('posts_cache');\n      if (postsCache) {\n        const parsedCache = JSON.parse(postsCache);\n        const now = Date.now();\n        \n        // Only load non-expired items\n        Object.entries(parsedCache).forEach(([key, entry]: [string, any]) => {\n          if (entry.timestamp && (now - entry.timestamp) < this.LOCAL_STORAGE_TTL) {\n            this.postsCache.set(key, entry);\n          }\n        });\n      }\n      \n      // Load tribe posts cache\n      const tribeCache = localStorage.getItem('tribe_posts_cache');\n      if (tribeCache) {\n        const parsedCache = JSON.parse(tribeCache);\n        const now = Date.now();\n        \n        Object.entries(parsedCache).forEach(([key, entry]: [string, any]) => {\n          if (entry.timestamp && (now - entry.timestamp) < this.LOCAL_STORAGE_TTL) {\n            this.tribePostsCache.set(key, entry);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('[Cache] Error loading from localStorage:', error);\n    }\n  }\n\n  private isCacheExpired(entry: CacheEntry<any>): boolean {\n    return Date.now() - entry.timestamp > this.CACHE_TTL;\n  }\n\n  private logCacheAccess(key: string, hit: boolean, source: keyof CacheMetrics['source']): void {\n    this.metrics[hit ? 'hits' : 'misses']++;\n    if (hit) {\n      this.metrics.source[source]++;\n    }\n\n    const stats = this.cacheStats.get(key) || {\n      lastAccess: 0,\n      accessCount: 0,\n      dataSource: source\n    };\n\n    stats.lastAccess = Date.now();\n    stats.accessCount++;\n    this.cacheStats.set(key, stats);\n\n    // Log only important cache events\n    if (!hit || stats.accessCount % 10 === 0) {\n      console.info(`[Cache ${hit ? 'HIT' : 'MISS'}] ${key} from ${source} (Access #${stats.accessCount})`);\n    }\n  }\n\n  private async mapBlockchainPostToUIPost(blockchainPost: any): Promise<Post | null> {\n    if (!blockchainPost || (!Array.isArray(blockchainPost) && typeof blockchainPost !== 'object')) {\n      console.info('[Blockchain] Invalid post data received');\n          return null;\n        }\n\n    try {\n      let metadata;\n      try {\n        metadata = typeof blockchainPost[3] === 'string' ? JSON.parse(blockchainPost[3]) : blockchainPost[3];\n        \n        // If metadata is a string (which can happen with blockchain data), parse it again\n        if (typeof metadata === 'string') {\n          metadata = JSON.parse(metadata);\n        }\n      } catch (error) {\n        console.warn('[Blockchain] Using default metadata due to parsing error:', error);\n        metadata = {\n          title: '',\n          content: '',\n          type: 'TEXT',\n          tags: [],\n          createdAt: new Date().toISOString()\n        };\n      }\n\n      const postType = this.getPostType(metadata.type || PostType.TEXT);\n      const author = blockchainPost[1] || '0x0000000000000000000000000000000000000000';\n      const tribeId = Number(blockchainPost[2]);\n\n      // Only return null if essential data is missing\n      if (!author || tribeId === undefined) {\n        console.warn('[Blockchain] Missing essential post data');\n        return null;\n      }\n\n      const post: Post = {\n        id: blockchainPost[0]?.toString() || '0',\n        author: author as `0x${string}`,\n        content: metadata.content || '',\n        type: postType,\n        createdAt: metadata.createdAt ? new Date(metadata.createdAt).getTime() : Date.now(),\n        tribeId,\n        stats: {\n          likeCount: Number(blockchainPost[6]) || 0,\n          commentCount: 0,\n          shareCount: 0,\n          viewCount: 0,\n          saveCount: 0\n        },\n        metadata: {\n          type: postType,\n          content: metadata.content || '',\n          title: metadata.title || '',\n          description: metadata.description || '',\n          tags: metadata.tags || [],\n          media: metadata.mediaContent?.map((m: any) => ({\n            url: m.url,\n            type: m.type,\n            width: m.width,\n            height: m.height\n          })) || [],\n          createdAt: metadata.createdAt || new Date().toISOString()\n        }\n      };\n\n      return post;\n    } catch (error) {\n      console.error('[Blockchain] Error mapping post:', error);\n      return null;\n    }\n  }\n\n  // Update the getPostType method with proper type handling\n  private getPostType(type: string): PostType {\n    const upperType = type.toUpperCase();\n    const validTypes = Object.values(PostType) as string[];\n    if (validTypes.includes(upperType)) {\n      return upperType as unknown as PostType;\n    }\n    return PostType.TEXT;\n  }\n\n  // Update queue service methods\n  private async processQueue(): Promise<void> {\n    if (!this.queueService) return;\n    await this.queueService.processQueue();\n  }\n\n  private async enqueueTask(task: QueueTask): Promise<void> {\n    if (!this.queueService) return;\n    await this.queueService.addToQueue(task.type, task.data, { priority: task.priority });\n  }\n}","import { useState, useCallback, useEffect, useRef } from 'react';\nimport { useAccount } from 'wagmi';\nimport { Post } from '../types/post';\nimport { PostsService } from '../services/posts.service';\nimport { useNetwork } from './useNetwork';\n\nexport interface UsePostsManagementReturnType {\n  posts: Record<string, Post>;\n  loading: boolean;\n  error: Error | null;\n  fetchPost: (postId: string) => Promise<Post | null>;\n  fetchPostsByTribe: (tribeId: string) => Promise<Post[]>;\n  fetchFeed: () => Promise<Post[]>;\n}\n\nexport function usePostsManagement(): UsePostsManagementReturnType {\n  const { address } = useAccount();\n  const { chainId } = useNetwork();\n  const [posts, setPosts] = useState<Record<string, Post>>({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const postsServiceRef = useRef<PostsService | null>(null);\n\n  // Initialize PostsService\n  useEffect(() => {\n    postsServiceRef.current = PostsService.getInstance();\n    console.log('PostsService initialized:', postsServiceRef.current);\n  }, []);\n\n  // Ensure we have the PostsService instance\n  const getPostsService = () => {\n    if (!postsServiceRef.current) {\n      postsServiceRef.current = PostsService.getInstance();\n    }\n    return postsServiceRef.current;\n  };\n\n  const fetchPost = useCallback(async (postId: string) => {\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching post with ID: ${postId}`);\n      const post = await postsService.getPost(postId);\n      if (post) {\n        console.log('Post retrieved:', post);\n        setPosts(prev => ({ ...prev, [post.id]: post }));\n      } else {\n        console.log('No post found with ID:', postId);\n      }\n      return post;\n    } catch (err) {\n      console.error('Error fetching post:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch post');\n      setError(error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchPostsByTribe = useCallback(async (tribeId: string) => {\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching posts for tribe: ${tribeId}`);\n      const tribePosts = await postsService.getPostsByTribe(tribeId);\n      console.log(`Retrieved ${tribePosts.length} posts for tribe ${tribeId}:`, tribePosts);\n      const postsMap = tribePosts.reduce((acc, post) => {\n        acc[post.id] = post;\n        return acc;\n      }, {} as Record<string, Post>);\n      setPosts(prev => ({ ...prev, ...postsMap }));\n      return tribePosts;\n    } catch (err) {\n      console.error('Error fetching tribe posts:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch tribe posts');\n      setError(error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const fetchFeed = useCallback(async () => {\n    if (!address) {\n      console.error('Cannot fetch feed: Wallet not connected');\n      setError(new Error('Wallet not connected'));\n      return [];\n    }\n\n    try {\n      setLoading(true);\n      const postsService = getPostsService();\n      console.log(`Fetching feed for address: ${address}`);\n      const feedPosts = await postsService.getUserFeed(address);\n      console.log(`Retrieved ${feedPosts.length} posts for feed:`, feedPosts);\n      const postsMap = feedPosts.reduce((acc, post) => {\n        acc[post.id] = post;\n        return acc;\n      }, {} as Record<string, Post>);\n      setPosts(prev => ({ ...prev, ...postsMap }));\n      return feedPosts;\n    } catch (err) {\n      console.error('Error fetching feed:', err);\n      const error = err instanceof Error ? err : new Error('Failed to fetch feed');\n      setError(error);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  }, [address]);\n\n  return {\n    posts,\n    loading,\n    error,\n    fetchPost,\n    fetchPostsByTribe,\n    fetchFeed\n  };\n} ","import React, { useCallback, useMemo, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Plus } from 'lucide-react';\nimport { FeedLayout } from '../components/layout/FeedLayout';\nimport { UnifiedFeed } from '../components/feed/UnifiedFeed';\nimport { usePostsManagement } from '../hooks/usePostsManagement';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { setCreatingPost } from '../store/slices/postsSlice';\nimport { useDispatch } from 'react-redux';\nimport { Post, PostType } from '../types/post';\nimport CreatePostModal from '../components/posts/CreatePostModal';\nimport type { FeedItem } from '../types/feed';\nimport { useProfile } from '../hooks/useProfile';\nimport { useAuth } from '../hooks/useAuth';\nimport { Address } from 'viem';\nimport { useTribesData } from '../hooks/useTribesData';\n\nexport function Dashboard() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { chainId } = useNetwork();\n  const { posts, loading, error, fetchFeed } = usePostsManagement();\n  const { profile } = useProfile();\n  const { address } = useAuth();\n  const { tribes, isLoading: tribesLoading } = useTribesData();\n\n  // Debug tribes data to check for loading issues\n  useEffect(() => {\n    if (tribes?.length > 0) {\n      console.log('Dashboard - Loaded Tribes:', tribes);\n    } else if (tribesLoading) {\n      console.log('Dashboard - Tribes still loading...');\n      } else {\n      console.log('Dashboard - No tribes available or loading error');\n    }\n  }, [tribes, tribesLoading]);\n\n  // Fetch posts on component mount\n  useEffect(() => {\n    if (address) {\n      console.log('Fetching feed for address:', address);\n      fetchFeed().catch(error => {\n        console.error('Error fetching feed:', error);\n      });\n    }\n  }, [fetchFeed, address]);\n\n  const feedItems = useMemo(() => {\n    if (!posts) return [];\n    \n    // Debug: Log posts to see what we're working with\n    console.log(\"Dashboard posts:\", Object.values(posts));\n    \n    // Convert posts object to array and ensure all posts have a type\n    return Object.values(posts).map(post => {\n      // Ensure post has a type, defaulting to TEXT (0) if not present\n      if (post.type === undefined) {\n        console.warn(`Post ${post.id} has no type, defaulting to TEXT`);\n        return {\n          ...post,\n          type: PostType.TEXT\n        };\n      }\n      return post;\n    });\n  }, [posts]);\n\n  const handlePostClick = useCallback((item: Post | FeedItem) => {\n    if ('type' in item) {\n      navigate(`/post/${item.id}`);\n    }\n  }, [navigate]);\n\n  // Handler for opening the create post modal\n  const handleCreatePost = useCallback(() => {\n    dispatch(setCreatingPost(true));\n  }, [dispatch]);\n\n  const renderFeed = () => {\n    if (loading) {\n      return <div>Loading...</div>;\n    }\n\n    if (error) {\n      return <div>Error: {error.toString()}</div>;\n    }\n\n    if (feedItems.length === 0) {\n      return (\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-white mb-2\">No posts yet</h3>\n          <p className=\"text-gray-400 mb-6\">\n            Your feed is empty. Start by creating a post or joining tribes.\n          </p>\n          <button\n            onClick={handleCreatePost}\n            className=\"inline-flex items-center px-4 py-2 bg-[#4ADE80] text-black rounded-lg hover:bg-[#4ADE80]/90 transition-colors\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Create Post\n          </button>\n        </div>\n      );\n    }\n\n    return (\n      <UnifiedFeed \n        items={feedItems}\n        loading={loading}\n        showCreateButton={true}\n        onItemClick={handlePostClick}\n      />\n    );\n  };\n\n  return (\n    <FeedLayout>\n      {renderFeed()}\n      \n      {/* Floating Action Button for creating posts */}\n      <div className=\"fixed bottom-20 right-6 z-10\">\n        <button\n          onClick={handleCreatePost}\n          className=\"flex items-center justify-center w-14 h-14 rounded-full bg-[#4ADE80] text-black shadow-lg hover:bg-[#4ADE80]/90 transition-colors\"\n          aria-label=\"Create post\"\n        >\n          <Plus className=\"w-6 h-6\" />\n        </button>\n      </div>\n      \n      <CreatePostModal tribeId={profile?.tokenId || \"1\"} />\n    </FeedLayout>\n  );\n} ","export interface ContractAddresses {\n  tribes: string;\n}\n\n// Define chain constants for clarity\nconst CHAIN_IDS = {\n  ETHEREUM_MAINNET: 1,\n  GOERLI: 5,\n  MONAD_DEVNET: 20143,\n  FUSE_EMBER: 1264453517\n};\n\n// Define fallback addresses to use when a specific chain isn't supported\nconst FALLBACK_ADDRESSES: ContractAddresses = {\n  tribes: '0x54812005171F747f5E69afA08989F41Cf06eeE48' // Using Fuse tribes address as default\n};\n\nexport function getContractAddresses(chainId: number): ContractAddresses {\n  console.log(`Getting contract addresses for chain ID: ${chainId}`);\n  \n  switch (chainId) {\n    case CHAIN_IDS.ETHEREUM_MAINNET: // Ethereum Mainnet\n      return {\n        tribes: '0x1234567890123456789012345678901234567890' // Replace with actual mainnet address\n      };\n    case CHAIN_IDS.GOERLI: // Goerli\n      return {\n        tribes: '0x1234567890123456789012345678901234567890' // Replace with actual testnet address\n      };\n    case CHAIN_IDS.MONAD_DEVNET: // Monad Devnet\n      return {\n        tribes: '0x16C4F870B59E55bB80A620547987Bd9302FC567d'\n      };\n    case CHAIN_IDS.FUSE_EMBER: // Fuse Ember Testnet\n      return {\n        tribes: '0x54812005171F747f5E69afA08989F41Cf06eeE48'\n      };\n    default:\n      console.warn(`Using fallback addresses for unsupported chain ID: ${chainId}`);\n      return FALLBACK_ADDRESSES;\n  }\n} ","export const TribesABI = [\n  // Post functions\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"getPost\",\n    outputs: [\n      { name: \"id\", type: \"uint256\" },\n      { name: \"creator\", type: \"address\" },\n      { name: \"tribeId\", type: \"uint256\" },\n      { name: \"type\", type: \"string\" },\n      { name: \"content\", type: \"string\" },\n      { name: \"title\", type: \"string\" },\n      { name: \"description\", type: \"string\" },\n      { name: \"tags\", type: \"string[]\" },\n      { name: \"images\", type: \"string[]\" },\n      { name: \"videos\", type: \"string[]\" },\n      { name: \"timestamp\", type: \"uint256\" },\n      { name: \"likes\", type: \"uint256\" },\n      { name: \"comments\", type: \"uint256\" },\n      { name: \"shares\", type: \"uint256\" },\n      { name: \"views\", type: \"uint256\" },\n      { name: \"engagement\", type: \"uint256\" }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"tribeId\", type: \"uint256\" }],\n    name: \"getPostsByTribe\",\n    outputs: [\n      {\n        components: [\n          { name: \"id\", type: \"uint256\" },\n          { name: \"creator\", type: \"address\" },\n          { name: \"tribeId\", type: \"uint256\" },\n          { name: \"type\", type: \"string\" },\n          { name: \"content\", type: \"string\" },\n          { name: \"title\", type: \"string\" },\n          { name: \"description\", type: \"string\" },\n          { name: \"tags\", type: \"string[]\" },\n          { name: \"images\", type: \"string[]\" },\n          { name: \"videos\", type: \"string[]\" },\n          { name: \"timestamp\", type: \"uint256\" },\n          { name: \"likes\", type: \"uint256\" },\n          { name: \"comments\", type: \"uint256\" },\n          { name: \"shares\", type: \"uint256\" },\n          { name: \"views\", type: \"uint256\" },\n          { name: \"engagement\", type: \"uint256\" }\n        ],\n        name: \"\",\n        type: \"tuple[]\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"userId\", type: \"address\" }],\n    name: \"getUserPosts\",\n    outputs: [\n      {\n        components: [\n          { name: \"id\", type: \"uint256\" },\n          { name: \"creator\", type: \"address\" },\n          { name: \"tribeId\", type: \"uint256\" },\n          { name: \"type\", type: \"string\" },\n          { name: \"content\", type: \"string\" },\n          { name: \"title\", type: \"string\" },\n          { name: \"description\", type: \"string\" },\n          { name: \"tags\", type: \"string[]\" },\n          { name: \"images\", type: \"string[]\" },\n          { name: \"videos\", type: \"string[]\" },\n          { name: \"timestamp\", type: \"uint256\" },\n          { name: \"likes\", type: \"uint256\" },\n          { name: \"comments\", type: \"uint256\" },\n          { name: \"shares\", type: \"uint256\" },\n          { name: \"views\", type: \"uint256\" },\n          { name: \"engagement\", type: \"uint256\" }\n        ],\n        name: \"\",\n        type: \"tuple[]\"\n      }\n    ],\n    stateMutability: \"view\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"tribeId\", type: \"uint256\" },\n      { name: \"metadata\", type: \"string\" }\n    ],\n    name: \"createPost\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"postId\", type: \"uint256\" },\n      { name: \"metadata\", type: \"string\" }\n    ],\n    name: \"updatePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"deletePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"likePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [\n      { name: \"postId\", type: \"uint256\" },\n      { name: \"content\", type: \"string\" }\n    ],\n    name: \"commentPost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [{ name: \"postId\", type: \"uint256\" }],\n    name: \"sharePost\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  },\n  {\n    inputs: [],\n    name: \"getLastPostId\",\n    outputs: [{ name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n]; ","import { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useProfile } from '../hooks/useProfile'\nimport { useNotification } from '../contexts/NotificationContext'\nimport { useAuth } from '../hooks/useAuth'\nimport { ProfileForm } from '../components/profile/ProfileForm'\nimport type { Profile as ProfileType } from '../types/contracts'\nimport { Copy, ExternalLink, Edit2, Users2, Medal, Star } from 'lucide-react'\nimport { useNetwork } from '../hooks/useNetwork'\nimport { blockchain } from '../utils/blockchainUtils'\nimport { ethers } from 'ethers'\nimport { getContractAddresses } from '../utils/contracts'\nimport { TribesABI } from '../utils/abis'\nimport { PostsService } from '../services/posts.service'\nimport { Post } from '../types/post'\n\nexport function Profile() {\n  const navigate = useNavigate()\n  const { isConnected, address } = useAuth()\n  const { chainId } = useNetwork()\n  const { getProfileByAddress } = useProfile()\n  const { showNotification } = useNotification()\n  const [isEditing, setIsEditing] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [profileData, setProfileData] = useState<ProfileType | null>(null)\n  const [userPosts, setUserPosts] = useState<Post[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const postsService = PostsService.getInstance()\n\n  const loadProfile = async () => {\n    try {\n      if (!isConnected || !address) {\n        console.log('[Profile] Not connected or no address, redirecting to connect');\n        navigate('/connect');\n        return;\n      }\n\n      if (!chainId) {\n        console.log('[Profile] No chain ID, showing network error');\n        showNotification('Please connect to a supported network', 'error');\n        return;\n      }\n\n      setIsLoading(true);\n      setError(null);\n      \n      // Get profile from blockchain\n      console.log('🔍 Fetching profile from blockchain:', { address, chainId });\n      if (!getProfileByAddress) {\n        console.error('[Profile] Profile service not available');\n        showNotification('Profile service not available', 'error');\n        setIsLoading(false);\n        return;\n      }\n      \n      const { profile, error } = await getProfileByAddress(address as `0x${string}`);\n      \n      if (error?.code === 'WRONG_CHAIN') {\n        console.log('[Profile] Wrong chain detected');\n        showNotification('Please connect to a supported network', 'error');\n        return;\n      }\n      \n      if (profile) {\n        console.log('[Profile] Profile found:', profile);\n        const defaultMetadata = {\n          avatar: '',\n          bio: '',\n          createdAt: Date.now()\n        };\n        \n        let metadata;\n        try {\n          metadata = typeof profile.metadata === 'string' \n            ? JSON.parse(profile.metadata) \n            : profile.metadata || defaultMetadata;\n        } catch (e) {\n          console.warn('[Profile] Failed to parse metadata:', e);\n          metadata = defaultMetadata;\n        }\n        \n        const fullProfile: ProfileType = {\n          tokenId: BigInt(profile.tokenId),\n          username: profile.username,\n          metadata: JSON.stringify(metadata),\n          nftUri: metadata.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${profile.username}`,\n          owner: profile.owner.toLowerCase() as `0x${string}`\n        };\n        \n        console.log('[Profile] Setting profile data:', fullProfile);\n        setProfileData(fullProfile);\n        setError(null);\n        return;\n      }\n\n      console.log('[Profile] No profile found, redirecting to setup');\n      navigate('/username-setup');\n    } catch (error) {\n      console.error('[Profile] Error loading profile:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load profile');\n      showNotification('Failed to load profile', 'error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Load profile when chain or address changes\n  useEffect(() => {\n    loadProfile()\n  }, [isConnected, address, chainId])\n\n  // Format address for display (show first 6 and last 4 characters)\n  const formatAddress = (address: string | undefined) => {\n    if (!address) return ''\n    return `${address.slice(0, 6)}...${address.slice(-4)}`\n  }\n\n  useEffect(() => {\n    async function fetchUserPosts() {\n      if (!address) return;\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        console.log('Connecting to blockchain to fetch posts');\n        await blockchain.connect();\n        \n        // Use a default chainId (Fuse Ember) if chainId is undefined\n        const currentChainId = chainId || 1264453517; // Default to Fuse Ember if chainId is undefined\n        console.log('Using chain ID:', currentChainId);\n        \n        const addresses = getContractAddresses(currentChainId);\n        const signer = blockchain.getSigner();\n        const contract = new ethers.Contract(addresses.tribes, TribesABI);\n        \n        console.log('Fetching posts for user', address);\n        const posts = await contract.getUserPosts(address);\n        \n        if (posts && Array.isArray(posts) && posts.length > 0) {\n          console.log('Found posts:', posts);\n          \n          const mappedPosts: any = posts\n            .map((post: any) => {\n              try {\n                // return postsService.mapBlockchainPostToUIPost(post);\n              } catch (error) {\n                console.error('Failed to map post:', error);\n                return null;\n              }\n            })\n            .filter(Boolean);\n            \n          console.log('Processed posts:', mappedPosts);\n          setUserPosts(mappedPosts);\n        } else {\n          console.log('No posts found');\n          setUserPosts([]);\n        }\n      } catch (err) {\n        console.error('Error fetching user posts:', err);\n        setError('Failed to fetch posts');\n      } finally {\n        setLoading(false);\n      }\n    }\n    \n    fetchUserPosts();\n  }, [address, chainId, postsService]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-monad-purple\"></div>\n      </div>\n    )\n  }\n\n  if (!profileData || !profileData.owner) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <p className=\"text-gray-400 mb-4\">No profile found</p>\n        <button\n          onClick={() => navigate('/username-setup')}\n          className=\"px-6 py-3 bg-theme-primary text-white rounded-lg font-medium hover:bg-theme-primary/90 transition-colors\"\n        >\n          Create Profile\n        </button>\n      </div>\n    )\n  }\n\n  const metadata = profileData.metadata ? JSON.parse(profileData.metadata) : { bio: '' }\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 pb-20\">\n      {/* Profile Header with Wallet Info */}\n      <div className=\"relative py-6 border-b border-white/10\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-8 items-center\">\n          {/* Column 1: Avatar and Profile Info */}\n          <div className=\"flex items-start space-x-4\">\n            <img\n              src={profileData.nftUri || `https://api.dicebear.com/7.x/avataaars/svg?seed=${profileData.username}`}\n              alt=\"Profile\"\n              className=\"w-20 h-20 rounded-full border-4 border-[#4ADE80]/20\"\n            />\n            <div className=\"flex flex-col space-y-2\">\n              <h1 className=\"text-xl font-bold text-white\">@{profileData.username}</h1>\n              <div className=\"flex items-center space-x-2\">\n                <p className=\"text-gray-400 text-sm\">{formatAddress(profileData.owner)}</p>\n                <button\n                  onClick={() => {\n                    if (profileData.owner) {\n                      navigator.clipboard.writeText(profileData.owner)\n                      showNotification('Address copied!', 'success')\n                    }\n                  }}\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                >\n                  <Copy className=\"w-4 h-4\" />\n                </button>\n                <a\n                  href={`https://explorer-devnet.monadinfra.com/address/${profileData.owner}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-gray-400 hover:text-white transition-colors\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" />\n                </a>\n              </div>\n              <p className=\"text-gray-200 text-sm\">{metadata.bio || 'No bio yet'}</p>\n            </div>\n          </div>\n\n          {/* Column 2: Stats Row */}\n          <div className=\"flex items-center justify-center space-x-6\">\n            <div className=\"flex items-center space-x-2\">\n              <Users2 className=\"w-5 h-5 text-[#4ADE80]\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Medal className=\"w-5 h-5 text-[#4ADE80]\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"w-5 h-5 text-yellow-400\" />\n              <span className=\"text-lg font-bold text-white\">0</span>\n            </div>\n          </div>\n\n          {/* Column 3: Actions */}\n          <div className=\"flex justify-end\">\n            <button\n              onClick={() => setIsEditing(true)}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-[#4ADE80] text-black rounded-lg hover:bg-[#4ADE80]/90 transition-colors\"\n            >\n              <Edit2 className=\"w-4 h-4\" />\n              <span>Edit Profile</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Collectibles Section */}\n      <div className=\"mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-bold text-white\">Your Collectibles</h2>\n          <button className=\"text-[#4ADE80] hover:text-[#4ADE80]/80 transition-colors text-sm\">\n            View All\n          </button>\n        </div>\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n          {/* Placeholder for collectibles */}\n          <div className=\"aspect-square bg-white/5 backdrop-blur-xl rounded-lg border border-white/10 flex items-center justify-center\">\n            <p className=\"text-gray-400 text-sm\">No collectibles</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"mt-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-bold text-white\">Recent Activity</h2>\n          <button className=\"text-[#4ADE80] hover:text-[#4ADE80]/80 transition-colors text-sm\">\n            View All\n          </button>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n          {/* Placeholder for activity items */}\n          <div className=\"bg-white/5 backdrop-blur-xl rounded-lg p-3 border border-white/10\">\n            <p className=\"text-gray-400 text-sm text-center\">No recent activity</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Display user posts */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-2xl font-bold mb-4\">Your Posts</h2>\n        \n        {loading && <p>Loading posts...</p>}\n        {error && <p className=\"text-red-500\">{error}</p>}\n        \n        {userPosts.length === 0 && !loading && !error && (\n          <p className=\"text-gray-500\">No posts found. Create your first post!</p>\n        )}\n        \n        <div className=\"space-y-4\">\n          {userPosts.map(post => (\n            <div key={post.id} className=\"p-4 bg-gray-800 rounded-lg\">\n              <p className=\"text-lg\">{post.content}</p>\n              <p className=\"text-sm text-gray-400 mt-2\">\n                Posted on {new Date(post.createdAt).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Edit Profile Drawer */}\n      {isEditing && (\n        <div className=\"fixed inset-y-0 right-0 w-full max-w-md bg-gray-900 shadow-xl transform transition-transform duration-300 ease-in-out z-50\">\n          <div className=\"h-full overflow-y-auto p-6\">\n            <button\n              onClick={() => setIsEditing(false)}\n              className=\"absolute top-4 right-4 text-gray-400 hover:text-white\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n            <ProfileForm\n              mode=\"edit\"\n              existingProfile={profileData}\n              onSuccess={() => {\n                setIsEditing(false)\n                loadProfile()\n              }}\n              onCancel={() => setIsEditing(false)}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  )\n} ","import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Check, Users, Globe, Lock, MessageSquare, Activity, Plus } from 'lucide-react';\nimport type { Tribe } from '../../types/tribe';\nimport { Card, CardContent, Badge } from '../common/ui';\nimport { useTribesManagement } from '../../hooks/useTribesManagement';\nimport { \n  getTribeAvatar, \n  getTribePrivacy, \n  getTribeTopics, \n  getTribeDescription, \n  getTribeCoverImage,\n  getTribeMembershipStatus\n} from '../../utils/tribeHelpers';\n\n// Simpler interface that uses the base Tribe type\ninterface TribeCardEnhancedProps {\n  tribe: Tribe;\n  showJoinButton?: boolean;\n}\n\nexport function TribeCardEnhanced({ tribe, showJoinButton = true }: TribeCardEnhancedProps) {\n  const navigate = useNavigate();\n  const { joinTribe, requestToJoinTribe } = useTribesManagement();\n  const [isJoining, setIsJoining] = useState(false);\n  const [joinError, setJoinError] = useState<string | null>(null);\n  const [avatarUrl, setAvatarUrl] = useState<string>('');\n  const [coverImageUrl, setCoverImageUrl] = useState<string>('');\n  const [avatarError, setAvatarError] = useState(false);\n  const [coverError, setCoverError] = useState(false);\n\n  // Load and validate tribe data with metadata on mount\n  useEffect(() => {\n    if (!tribe) return;\n    \n    // Debug tribe data\n    console.log('TribeCardEnhanced processing tribe:', {\n      id: tribe.id,\n      name: tribe.name,\n      metadata: typeof tribe.metadata === 'string' ? (\n        tribe.metadata.length > 100 ? `${tribe.metadata.substring(0, 100)}...` : tribe.metadata\n      ) : 'Not a string',\n      memberCount: tribe.memberCount\n    });\n    \n    try {\n      // Get and set avatar URL with helper\n      const avatar = getTribeAvatar(tribe);\n      setAvatarUrl(avatar);\n      setAvatarError(false);\n      \n      // Get and set cover image URL with helper\n      const cover = getTribeCoverImage(tribe);\n      setCoverImageUrl(cover);\n      setCoverError(false);\n    } catch (error) {\n      console.error('Error loading tribe media:', error);\n    }\n  }, [tribe]);\n\n  const handleJoinTribe = async (e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent navigation to tribe page\n    \n    if (isJoining) return;\n    \n    setIsJoining(true);\n    setJoinError(null);\n    \n    try {\n      // Get privacy from helper function\n      const privacy = getTribePrivacy(tribe);\n      \n      if (privacy === 'public') {\n        await joinTribe(Number(tribe.id));\n      } else {\n        // For private tribes, we need to handle entry fee if applicable\n        const entryFee = tribe.entryFee || BigInt(0);\n        await requestToJoinTribe(Number(tribe.id), entryFee);\n      }\n      // Show success state or update UI\n    } catch (error) {\n      console.error('Failed to join tribe:', error);\n      setJoinError(error instanceof Error ? error.message : 'Failed to join tribe');\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  // Define activity levels\n  const activityLevels = ['low', 'medium', 'high'] as const;\n  type ActivityLevel = typeof activityLevels[number];\n\n  // Calculate activity level based on recent posts and online members\n  const getActivityLevel = (): ActivityLevel => {\n    // Use memberCount from the tribe object directly, as it's required in the Tribe interface\n    const memberCount = tribe.memberCount || 0;\n    // These values aren't in the Tribe type, so set defaults\n    const onlineCount = 0; // This would need to come from a different source\n    const ratio = memberCount > 0 ? onlineCount / memberCount : 0;\n    \n    if (ratio > 0.3) return 'high';\n    if (ratio > 0.1) return 'medium';\n    return 'low';\n  };\n\n  const activityLevel = getActivityLevel();\n  \n  const activityColors = {\n    low: 'text-gray-400',\n    medium: 'text-yellow-500',\n    high: 'text-green-500'\n  };\n\n  // Get membership status using helper function\n  const { isMember, isPending, isAdmin } = getTribeMembershipStatus(tribe);\n\n  // Use helper functions to get metadata properties\n  const privacy = getTribePrivacy(tribe);\n  const description = getTribeDescription(tribe);\n  const topics = getTribeTopics(tribe);\n  \n  // Image error handlers\n  const handleAvatarError = () => {\n    console.warn(`Avatar load failed for tribe ${tribe.id}`);\n    setAvatarError(true);\n    setAvatarUrl('/images/default-avatar.png');\n  };\n  \n  const handleCoverError = () => {\n    console.warn(`Cover image load failed for tribe ${tribe.id}`);\n    setCoverError(true);\n    setCoverImageUrl('/images/default-cover.png');\n  };\n\n  return (\n    <Card \n      className=\"overflow-hidden hover:border-theme-primary/30 transition-colors cursor-pointer h-full flex flex-col\" \n      onClick={() => navigate(`/tribes/${tribe.id}`)}\n    >\n      {/* Cover Image */}\n      {coverImageUrl && !coverError && (\n        <div className=\"h-28 relative\">\n          <img \n            src={coverImageUrl} \n            alt={`${tribe.name} banner`}\n            className=\"w-full h-full object-cover\"\n            onError={handleCoverError}\n          />\n          \n          {/* Privacy Badge */}\n          {privacy === 'private' && (\n            <div className=\"absolute top-2 right-2 bg-black/60 text-white px-2 py-1 rounded-full text-xs flex items-center\">\n              <Lock className=\"w-3 h-3 mr-1\" />\n              Private\n            </div>\n          )}\n        </div>\n      )}\n      \n      <CardContent className=\"flex-1 flex flex-col px-4 py-3\">\n        {/* Avatar and Status */}\n        <div className=\"flex items-start\">\n          <div className=\"relative -mt-6 mr-3\">\n            <img \n              src={avatarUrl}\n              alt={tribe.name}\n              className=\"w-14 h-14 rounded-xl ring-2 ring-theme-bg shadow-lg bg-theme-bg\"\n              onError={handleAvatarError}\n            />\n            \n            {/* Membership Badge */}\n            {isMember && (\n              <div className=\"absolute -bottom-1 -right-1 bg-green-500 text-white p-1 rounded-full\">\n                <Check className=\"w-3 h-3\" />\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex-1 mt-1\">\n            <h3 className=\"font-bold text-lg text-white leading-tight flex items-center\">\n              {tribe.name}\n            </h3>\n            \n            {/* Stats */}\n            <div className=\"flex items-center space-x-3 mt-1 text-xs text-gray-400\">\n              <div className=\"flex items-center space-x-1\">\n                {privacy === 'public' ? (\n                  <Globe className=\"w-3.5 h-3.5\" />\n                ) : (\n                  <Lock className=\"w-3.5 h-3.5\" />\n                )}\n                <span>{privacy === 'public' ? 'Public' : 'Private'}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Users className=\"w-3.5 h-3.5\" />\n                <span>{tribe.memberCount.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <MessageSquare className=\"w-3.5 h-3.5\" />\n                <span>0</span> {/* Default post count since it's not in the Tribe type */}\n              </div>\n              <div className={`flex items-center space-x-1 ${activityColors[activityLevel]}`}>\n                <Activity className=\"w-3.5 h-3.5\" />\n                <span className=\"capitalize\">{activityLevel}</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Join Button */}\n          {showJoinButton && !isMember && !isPending && !isAdmin && (\n            <button\n              onClick={handleJoinTribe}\n              disabled={isJoining}\n              className={`\n                flex items-center rounded-lg px-3 py-1.5 text-sm font-medium \n                ${isJoining ? 'bg-gray-700 text-gray-400' : 'bg-theme-primary text-black hover:bg-theme-primary/90'}\n                transition-colors\n              `}\n            >\n              {isJoining ? (\n                <span>Joining...</span>\n              ) : (\n                <>\n                  <Plus className=\"w-4 h-4 mr-1\" />\n                  <span>Join</span>\n                </>\n              )}\n            </button>\n          )}\n          \n          {/* Pending Badge */}\n          {isPending && (\n            <Badge variant=\"outline\" className=\"border-yellow-500 text-yellow-500 ml-auto\">\n              Pending\n            </Badge>\n          )}\n        </div>\n\n        <p className=\"mt-3 text-gray-300 line-clamp-2 text-sm\">{description}</p>\n\n        <div className=\"mt-4 flex flex-wrap gap-2\">\n          {topics.length > 0 ? (\n            <>\n              {topics.slice(0, 3).map((topic) => (\n                <Badge \n                  key={topic.id}\n                  variant=\"secondary\"\n                  className=\"bg-gray-800/80 text-gray-300 text-xs\"\n                >\n                  {topic.name}\n                </Badge>\n              ))}\n              {topics.length > 3 && (\n                <Badge \n                  variant=\"secondary\"\n                  className=\"bg-gray-800/80 text-gray-300 text-xs\"\n                >\n                  +{topics.length - 3} more\n                </Badge>\n              )}\n            </>\n          ) : (\n            <Badge \n              variant=\"secondary\"\n              className=\"bg-gray-800/80 text-gray-300 text-xs\"\n            >\n              No topics\n            </Badge>\n          )}\n        </div>\n        \n        {/* Error Message */}\n        {joinError && (\n          <div className=\"mt-3 text-red-500 text-xs\">\n            {joinError}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n} ","import { useTribesData } from '../../hooks/useTribesData';\nimport { TribeCardEnhanced } from './TribeCardEnhanced';\nimport { useEffect } from 'react';\nimport { Tribe } from '../../types/tribe';\n\n// Define the ExtendedTribe interface to match TribeCardEnhanced expectations\n// but without extending Tribe to avoid type conflicts\ninterface ExtendedTribe {\n  id: string;\n  name: string;\n  metadata: string;\n  owner: `0x${string}`;\n  admins: `0x${string}`[];\n  memberCount: number;\n  createdAt: number;\n  joinType: number;\n  entryFee: string | number;\n  nftRequirements: any[];\n  privacy?: 'public' | 'private';\n  onlineCount?: number;\n  postCount?: number;\n  coverImage?: string;\n  avatar?: string;\n  isVerified?: boolean;\n  description?: string;\n  topics?: Array<{ id: string; name: string }>;\n  userMembershipStatus?: {\n    isMember?: boolean;\n    isPending?: boolean;\n    isAdmin?: boolean;\n  };\n}\n\n// Adapter function to convert Tribe to ExtendedTribe\nfunction adaptTribeToExtendedTribe(tribe: Tribe): ExtendedTribe {\n  return {\n    id: tribe.id,\n    name: tribe.name,\n    metadata: tribe.metadata,\n    owner: tribe.owner,\n    admins: tribe.admins,\n    memberCount: tribe.memberCount,\n    createdAt: tribe.createdAt,\n    joinType: tribe.joinType,\n    entryFee: tribe.entryFee.toString(), // Convert bigint to string\n    nftRequirements: tribe.nftRequirements,\n    privacy: 'public', // Default to public if not specified\n    onlineCount: 0,\n    postCount: 0,\n    description: '',\n    topics: [],\n    userMembershipStatus: {\n      isMember: false,\n      isPending: false,\n      isAdmin: false\n    }\n  };\n}\n\nexport function TribeList() {\n  const { tribes, isLoading: loading, error, refreshTribes } = useTribesData();\n\n  // Add debug logging \n  useEffect(() => {\n    console.log('TribeList - Tribes data:', { \n      tribes, \n      loading, \n      error, \n      tribesLength: tribes?.length,\n      tribesEmpty: !tribes?.length\n    });\n    \n    if (!tribes?.length && !loading && !error) {\n      console.log('TribeList - No tribes found, triggering refresh');\n      refreshTribes().catch(err => {\n        console.error('Failed to refresh tribes:', err);\n      });\n    }\n  }, [tribes, loading, error, refreshTribes]);\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"animate-pulse bg-gray-800/30 rounded-xl h-48\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    console.error('TribeList - Error loading tribes:', error);\n    return (\n      <div className=\"text-center text-gray-400 py-8\">\n        Failed to load tribes. Please try again later.\n        <pre className=\"mt-2 text-xs text-left bg-gray-800/30 p-2 rounded overflow-auto\">\n          {typeof error === 'string' ? error : JSON.stringify(error, null, 2)}\n        </pre>\n        <button \n          className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\"\n          onClick={() => refreshTribes()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  if (!tribes?.length) {\n    return (\n      <div className=\"text-center text-gray-400 py-8\">\n        No tribes found on this network.\n        <div className=\"mt-4\">\n          <button \n            className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n            onClick={() => refreshTribes()}\n          >\n            Refresh\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  console.log('TribeList - Rendering tribes:', tribes.map(t => ({ id: t.id, name: t.name })));\n  \n  // Adapt tribes to expected format\n  const extendedTribes = tribes.map(adaptTribeToExtendedTribe);\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n      {extendedTribes.map((tribe) => (\n        <TribeCardEnhanced key={tribe.id} tribe={tribe as any} />\n      ))}\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { TribeList } from '../components/tribes/TribeList';\nimport { Plus, Search, Filter, Users, Sparkles } from 'lucide-react';\nimport { useTribesManagement } from '../hooks/useTribesManagement';\nimport { useNavigate } from 'react-router-dom';\n\nexport function Tribes() {\n  const navigate = useNavigate();\n  const { createTribe } = useTribesManagement();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [activeFilter, setActiveFilter] = useState<'all' | 'popular' | 'new' | 'joined'>('all');\n\n  const handleCreateTribe = () => {\n    // Navigate to create tribe page or open modal\n    navigate('/tribes/create');\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 py-8\">\n      {/* Hero Section */}\n      <div className=\"relative mb-10 rounded-2xl overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-900/90 to-purple-900/90 z-0\"></div>\n        <div className=\"absolute inset-0 bg-[url('/images/tribes-pattern.svg')] opacity-10 z-0\"></div>\n        \n        <div className=\"relative z-10 px-6 py-12 md:py-16 md:px-10\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-white mb-3\">Discover Tribes</h1>\n          <p className=\"text-gray-300 text-lg max-w-2xl mb-6\">\n            Join communities of like-minded individuals, share ideas, and collaborate on projects that matter to you.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1 max-w-xl\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <input\n                type=\"text\"\n                placeholder=\"Search tribes by name or description...\"\n                className=\"block w-full pl-10 pr-3 py-2.5 bg-gray-900/50 border border-gray-700/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            \n            <button\n              onClick={handleCreateTribe}\n              className=\"flex items-center justify-center space-x-2 px-5 py-2.5 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n            >\n              <Plus className=\"w-5 h-5\" />\n              <span>Create Tribe</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div className=\"flex items-center space-x-2 overflow-x-auto scrollbar-hide\">\n          <button\n            onClick={() => setActiveFilter('all')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              activeFilter === 'all'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            All Tribes\n          </button>\n          <button\n            onClick={() => setActiveFilter('popular')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center space-x-2 ${\n              activeFilter === 'popular'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            <span>Popular</span>\n          </button>\n          <button\n            onClick={() => setActiveFilter('new')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n              activeFilter === 'new'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            Newest\n          </button>\n          <button\n            onClick={() => setActiveFilter('joined')}\n            className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors flex items-center space-x-2 ${\n              activeFilter === 'joined'\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-800/30 text-gray-300 hover:bg-gray-800/50'\n            }`}\n          >\n            <Users className=\"w-4 h-4\" />\n            <span>Joined</span>\n          </button>\n        </div>\n        \n        <button className=\"p-2 bg-gray-800/30 border border-gray-700/50 rounded-lg text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors\">\n          <Filter className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      {/* Tribes List */}\n      <TribeList />\n    </div>\n  );\n} ","// Chain IDs (actual network IDs)\nexport const MONAD_CHAIN_ID = 20143; // Monad Devnet\nexport const FUSE_CHAIN_ID = 1264453517; // Fuse Ember\nexport const FLASH_CHAIN_ID = 1264453517; // Flash\n\nexport const getChainName = (chainId: number): string => {\n  switch (chainId) {\n    case MONAD_CHAIN_ID:\n      return 'Monad';\n    case FUSE_CHAIN_ID:\n      return 'Fuse';\n    default:\n      return 'Unknown';\n  }\n};\n\nexport const getChainColor = (chainId: number): string => {\n  switch (chainId) {\n    case MONAD_CHAIN_ID:\n      return 'var(--monad-green)'; // Monad Green\n    case FUSE_CHAIN_ID:\n      return 'var(--fuse-gold)'; // Fuse Gold\n    default:\n      return '#6B7280'; // Gray\n  }\n};\n\nexport const getChainGradient = (chainId: number): string => {\n  switch (chainId) {\n    case MONAD_CHAIN_ID:\n      return 'from-[var(--monad-green)] to-[var(--monad-dark-green)]';\n    case FUSE_CHAIN_ID:\n      return 'from-[var(--fuse-gold)] to-[var(--fuse-dark-blue)]';\n    default:\n      return 'from-gray-500 to-gray-600';\n  }\n};\n\nexport const getChainAccentColor = (chainId: number): string => {\n  switch (chainId) {\n    case MONAD_CHAIN_ID:\n      return 'var(--chain-accent)'; // Use CSS variable for accent color\n    case FUSE_CHAIN_ID:\n      return 'var(--chain-accent)'; // Use CSS variable for accent color\n    default:\n      return 'rgba(107, 114, 128, 0.2)'; // Gray with opacity\n  }\n};\n\n// Get the appropriate Tailwind class for a given chain\nexport const getChainColorClass = (chainId: number, type: 'bg' | 'text' | 'border' | 'ring' = 'bg'): string => {\n  switch (chainId) {\n    case MONAD_CHAIN_ID:\n      return type === 'bg' ? 'bg-monad-green' : \n             type === 'text' ? 'text-monad-green' :\n             type === 'border' ? 'border-monad-green' : 'ring-monad-green';\n    case FUSE_CHAIN_ID:\n      return type === 'bg' ? 'bg-fuse-gold' : \n             type === 'text' ? 'text-fuse-gold' :\n             type === 'border' ? 'border-fuse-gold' : 'ring-fuse-gold';\n    default:\n      return type === 'bg' ? 'bg-gray-500' : \n             type === 'text' ? 'text-gray-500' :\n             type === 'border' ? 'border-gray-500' : 'ring-gray-500';\n  }\n}; ","import React from 'react';\nimport { Card, CardContent, Badge } from '../common/ui';\nimport { getChainColor, getChainName } from '../../utils/chain';\nimport type { BaseFeedItem } from '../../types/feed';\n\ninterface FeedCardProps {\n  item: BaseFeedItem;\n  children: React.ReactNode;\n  className?: string;\n  onClick?: () => void;\n}\n\nexport function FeedCard({ item, children, className = '', onClick }: FeedCardProps) {\n  const chainColor = getChainColor(item.chainId);\n  const chainName = getChainName(item.chainId);\n\n  return (\n    <Card\n      variant=\"enhanced\"\n      className={`cursor-pointer hover:translate-y-[-2px] transition-transform ${className}`}\n      onClick={onClick}\n    >\n      <CardContent className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            {item.creator.avatar && (\n              <img\n                src={item.creator.avatar}\n                alt={item.creator.username || item.creator.address}\n                className=\"w-10 h-10 rounded-full\"\n              />\n            )}\n            <div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-medium\">\n                  {item.creator.username || item.creator.address}\n                </span>\n                <Badge\n                  style={{ backgroundColor: `${chainColor}20`, color: chainColor }}\n                  className=\"text-xs\"\n                >\n                  {chainName}\n                </Badge>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {new Date(item.createdAt).toLocaleDateString(undefined, {\n                  month: 'short',\n                  day: 'numeric',\n                  hour: 'numeric',\n                  minute: 'numeric',\n                })}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        {children}\n      </CardContent>\n    </Card>\n  );\n} ","import React from 'react';\nimport { Clock } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { ProposalFeedItem as ProposalFeedItemType } from '../../types/feed';\n\ninterface ProposalFeedItemProps {\n  item: ProposalFeedItemType;\n  onClick?: () => void;\n}\n\nconst formatTimeLeft = (endTime: number): string => {\n  const now = Date.now();\n  const timeLeft = endTime - now;\n  \n  if (timeLeft <= 0) return 'Ended';\n  \n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  if (days > 0) return `${days}d ${hours}h left`;\n  \n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  if (hours > 0) return `${hours}h ${minutes}m left`;\n  \n  return `${minutes}m left`;\n};\n\nconst statusColors: Record<string, { bg: string; text: string }> = {\n  active: {\n    bg: 'bg-success-main/20',\n    text: 'text-success-main'\n  },\n  passed: {\n    bg: 'bg-blue-500/20',\n    text: 'text-blue-500'\n  },\n  failed: {\n    bg: 'bg-destructive/20',\n    text: 'text-destructive'\n  }\n};\n\nexport function ProposalFeedItem({ item, onClick }: ProposalFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n  const now = Date.now();\n  const isActive = now < item.endTime;\n  const totalVotes = item.votesFor + item.votesAgainst;\n  const forPercentage = totalVotes > 0 ? (item.votesFor / totalVotes) * 100 : 0;\n  const againstPercentage = totalVotes > 0 ? (item.votesAgainst / totalVotes) * 100 : 0;\n  const quorumPercentage = item.minVotes ? (totalVotes / item.minVotes) * 100 : 0;\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.title}</h3>\n            <Badge \n              className={`${statusColors[item.status].bg} ${statusColors[item.status].text}`}\n            >\n              {item.status.charAt(0).toUpperCase() + item.status.slice(1)}\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* Voting Progress */}\n        <div className=\"space-y-3\">\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span>For</span>\n              <span>{forPercentage.toFixed(1)}%</span>\n            </div>\n            <div className=\"h-2 rounded-full bg-muted overflow-hidden\">\n              <div \n                className=\"h-full rounded-full bg-success-main transition-all duration-500\"\n                style={{ width: `${forPercentage}%` }}\n              />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {item.votesFor.toLocaleString()} votes\n            </p>\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span>Against</span>\n              <span>{againstPercentage.toFixed(1)}%</span>\n            </div>\n            <div className=\"h-2 rounded-full bg-muted overflow-hidden\">\n              <div \n                className=\"h-full rounded-full bg-destructive transition-all duration-500\"\n                style={{ width: `${againstPercentage}%` }}\n              />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {item.votesAgainst.toLocaleString()} votes\n            </p>\n          </div>\n        </div>\n\n        {/* Quorum Progress */}\n        {item.minVotes && (\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span>Quorum</span>\n              <span>{quorumPercentage.toFixed(1)}%</span>\n            </div>\n            <div className=\"h-1.5 rounded-full bg-muted overflow-hidden\">\n              <div \n                className=\"h-full rounded-full transition-all duration-500\"\n                style={{ \n                  width: `${Math.min(quorumPercentage, 100)}%`,\n                  backgroundColor: chainColor,\n                }}\n              />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {totalVotes.toLocaleString()} of {item.minVotes.toLocaleString()} votes needed\n            </p>\n          </div>\n        )}\n\n        {/* Proposal Info */}\n        <div className=\"flex items-center text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{formatTimeLeft(item.endTime)}</span>\n          </div>\n        </div>\n\n        {/* Action */}\n        {isActive && (\n          <div \n            className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full\"\n            style={{ \n              backgroundColor: `${chainColor}20`,\n              color: chainColor,\n            }}\n          >\n            Vote Now\n          </div>\n        )}\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Clock } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { BountyFeedItem as BountyFeedItemType } from '../../types/feed';\n\ninterface BountyFeedItemProps {\n  item: BountyFeedItemType;\n  onClick?: () => void;\n}\n\nconst formatTimeLeft = (deadline: number): string => {\n  const now = Date.now();\n  const timeLeft = deadline - now;\n  \n  if (timeLeft <= 0) return 'Ended';\n  \n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  if (days > 0) return `${days}d ${hours}h left`;\n  \n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  if (hours > 0) return `${hours}h ${minutes}m left`;\n  \n  return `${minutes}m left`;\n};\n\nconst difficultyColors: Record<string, { bg: string; text: string }> = {\n  easy: {\n    bg: 'bg-green-500/20',\n    text: 'text-green-500'\n  },\n  medium: {\n    bg: 'bg-yellow-500/20',\n    text: 'text-yellow-500'\n  },\n  hard: {\n    bg: 'bg-red-500/20',\n    text: 'text-red-500'\n  }\n};\n\nconst statusColors: Record<string, { bg: string; text: string }> = {\n  open: {\n    bg: 'bg-success-main/20',\n    text: 'text-success-main'\n  },\n  'in-progress': {\n    bg: 'bg-blue-500/20',\n    text: 'text-blue-500'\n  },\n  completed: {\n    bg: 'bg-muted',\n    text: 'text-muted-foreground'\n  }\n};\n\nexport function BountyFeedItem({ item, onClick }: BountyFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n  const now = Date.now();\n  const isActive = item.deadline ? now < item.deadline : false;\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.title}</h3>\n            <Badge \n              className=\"text-xs\"\n              style={{ \n                backgroundColor: `${chainColor}20`,\n                color: chainColor,\n              }}\n            >\n              Bounty\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* Bounty Details */}\n        <div className=\"flex flex-wrap gap-4\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Reward</p>\n            <p className=\"font-medium\">\n              {item.reward.amount} {item.reward.token}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Difficulty</p>\n            <Badge \n              className={`${difficultyColors[item.difficulty].bg} ${difficultyColors[item.difficulty].text}`}\n            >\n              {item.difficulty}\n            </Badge>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Status</p>\n            <Badge \n              className={`${statusColors[item.status].bg} ${statusColors[item.status].text}`}\n            >\n              {item.status === 'in-progress' ? 'In Progress' : item.status}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Bounty Info */}\n        <div className=\"flex items-center text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{item.deadline ? formatTimeLeft(item.deadline) : 'No deadline'}</span>\n          </div>\n        </div>\n\n        {/* Action */}\n        {isActive && item.status === 'open' && (\n          <div \n            className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full\"\n            style={{ \n              backgroundColor: `${chainColor}20`,\n              color: chainColor,\n            }}\n          >\n            Submit Solution\n          </div>\n        )}\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Calendar, Users, Video, MapPin } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { EventFeedItem as EventFeedItemType } from '../../types/feed';\n\ninterface EventFeedItemProps {\n  item: EventFeedItemType;\n  onClick?: () => void;\n}\n\nconst formatEventDate = (startTime: number, endTime: number): string => {\n  const start = new Date(startTime);\n  const end = new Date(endTime);\n  \n  const isSameDay = start.toDateString() === end.toDateString();\n  const startFormat = { month: 'short', day: 'numeric' } as const;\n  const timeFormat = { hour: 'numeric', minute: '2-digit' } as const;\n  \n  if (isSameDay) {\n    return `${start.toLocaleDateString(undefined, startFormat)} · ${start.toLocaleTimeString(undefined, timeFormat)} - ${end.toLocaleTimeString(undefined, timeFormat)}`;\n  }\n  \n  return `${start.toLocaleDateString(undefined, startFormat)} - ${end.toLocaleDateString(undefined, startFormat)}`;\n};\n\nexport function EventFeedItem({ item, onClick }: EventFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n  const now = Date.now();\n  const isUpcoming = now < item.startTime;\n  const isLive = now >= item.startTime && now <= item.endTime;\n  const hasEnded = now > item.endTime;\n\n  const getStatusBadge = () => {\n    if (isLive) {\n      return <Badge className=\"bg-success-main/20 text-success-main\">Live Now</Badge>;\n    }\n    if (hasEnded) {\n      return <Badge className=\"bg-muted text-muted-foreground\">Ended</Badge>;\n    }\n    if (item.maxAttendees && item.attendees >= item.maxAttendees) {\n      return <Badge className=\"bg-destructive/20 text-destructive\">Sold Out</Badge>;\n    }\n    return <Badge className=\"bg-blue-500/20 text-blue-500\">Upcoming</Badge>;\n  };\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.title}</h3>\n            {getStatusBadge()}\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* Event Details */}\n        <div className=\"flex flex-col space-y-3\">\n          <div className=\"flex items-center text-sm space-x-2\">\n            <Calendar className=\"w-4 h-4\" style={{ color: chainColor }} />\n            <span>{formatEventDate(item.startTime, item.endTime)}</span>\n          </div>\n\n          <div className=\"flex items-center text-sm space-x-2\">\n            {item.virtual ? (\n              <Video className=\"w-4 h-4\" style={{ color: chainColor }} />\n            ) : (\n              <MapPin className=\"w-4 h-4\" style={{ color: chainColor }} />\n            )}\n            <span>{item.virtual ? 'Virtual Event' : item.location || 'Location TBA'}</span>\n          </div>\n\n          <div className=\"flex items-center text-sm space-x-2\">\n            <Users className=\"w-4 h-4\" style={{ color: chainColor }} />\n            <span>\n              {item.attendees.toLocaleString()} attending\n              {item.maxAttendees && ` · ${item.maxAttendees - item.attendees} spots left`}\n            </span>\n          </div>\n        </div>\n\n        {/* Action */}\n        {isUpcoming && (!item.maxAttendees || item.attendees < item.maxAttendees) && (\n          <div \n            className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full mt-2\"\n            style={{ \n              backgroundColor: `${chainColor}20`,\n              color: chainColor,\n            }}\n          >\n            Register Now\n          </div>\n        )}\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Image } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { NFTFeedItem as NFTFeedItemType } from '../../types/feed';\n\ninterface NFTFeedItemProps {\n  item: NFTFeedItemType;\n  onClick?: () => void;\n}\n\nexport function NFTFeedItem({ item, onClick }: NFTFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.collection}</h3>\n            <Badge \n              className=\"text-xs\"\n              style={{ \n                backgroundColor: `${chainColor}20`,\n                color: chainColor,\n              }}\n            >\n              NFT\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* NFT Preview */}\n        <div className=\"relative aspect-[4/3] rounded-lg overflow-hidden bg-muted\">\n          {item.image ? (\n            <img \n              src={item.image} \n              alt={item.collection}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Image className=\"w-12 h-12 text-muted-foreground/50\" />\n            </div>\n          )}\n        </div>\n\n        {/* NFT Details */}\n        <div className=\"flex items-center\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">Price</p>\n            <p className=\"font-medium\">\n              {item.price ? `${item.price.amount} ${item.price.token}` : 'Not listed'}\n            </p>\n          </div>\n        </div>\n\n        {/* Action */}\n        <div \n          className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full\"\n          style={{ \n            backgroundColor: `${chainColor}20`,\n            color: chainColor,\n          }}\n        >\n          View Collection\n        </div>\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Github, Globe } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { ProjectFeedItem as ProjectFeedItemType } from '../../types/feed';\n\ninterface ProjectFeedItemProps {\n  item: ProjectFeedItemType;\n  onClick?: () => void;\n}\n\nexport function ProjectFeedItem({ item, onClick }: ProjectFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.title}</h3>\n            <Badge \n              className=\"text-xs\"\n              style={{ \n                backgroundColor: `${chainColor}20`,\n                color: chainColor,\n              }}\n            >\n              Project\n            </Badge>\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* Project Tags */}\n        {item.tags && item.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2\">\n            {item.tags.map((tag, index) => (\n              <Badge \n                key={index}\n                className=\"bg-muted text-muted-foreground text-xs\"\n              >\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        {/* Project Links */}\n        <div className=\"flex items-center space-x-4\">\n          {item.repository && (\n            <a \n              href={item.repository}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex items-center space-x-1 text-sm hover:underline\"\n              style={{ color: chainColor }}\n            >\n              <Github className=\"w-4 h-4\" />\n              <span>View Repository</span>\n            </a>\n          )}\n          {item.website && (\n            <a \n              href={item.website}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"flex items-center space-x-1 text-sm hover:underline\"\n              style={{ color: chainColor }}\n            >\n              <Globe className=\"w-4 h-4\" />\n              <span>Visit Website</span>\n            </a>\n          )}\n        </div>\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Calendar, Users, Video } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { LivestreamFeedItem as LivestreamFeedItemType } from '../../types/feed';\n\ninterface LivestreamFeedItemProps {\n  item: LivestreamFeedItemType;\n  onClick?: () => void;\n}\n\nconst formatStreamDate = (startTime: number): string => {\n  const start = new Date(startTime);\n  const dateFormat = { month: 'short', day: 'numeric' } as const;\n  const timeFormat = { hour: 'numeric', minute: '2-digit' } as const;\n  \n  return `${start.toLocaleDateString(undefined, dateFormat)} · ${start.toLocaleTimeString(undefined, timeFormat)}`;\n};\n\nexport function LivestreamFeedItem({ item, onClick }: LivestreamFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n  const now = Date.now();\n  const isLive = now >= item.startTime && item.endTime ? now <= item.endTime : false;\n  const isUpcoming = now < item.startTime;\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.title}</h3>\n            {isLive ? (\n              <Badge className=\"bg-success-main/20 text-success-main\">Live Now</Badge>\n            ) : (\n              <Badge \n                className=\"text-xs\"\n                style={{ \n                  backgroundColor: `${chainColor}20`,\n                  color: chainColor,\n                }}\n              >\n                Upcoming\n              </Badge>\n            )}\n          </div>\n          <p className=\"text-muted-foreground\">{item.description}</p>\n        </div>\n\n        {/* Thumbnail */}\n        {item.thumbnail && (\n          <div className=\"relative aspect-video rounded-lg overflow-hidden bg-muted\">\n            <img \n              src={item.thumbnail} \n              alt={item.title}\n              className=\"w-full h-full object-cover\"\n            />\n            {isLive && (\n              <div className=\"absolute top-2 left-2\">\n                <Badge className=\"bg-destructive text-destructive-foreground\">LIVE</Badge>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Stream Details */}\n        <div className=\"flex flex-col space-y-2\">\n          <div className=\"flex items-center text-sm space-x-2\">\n            <Calendar className=\"w-4 h-4\" style={{ color: chainColor }} />\n            <span>{formatStreamDate(item.startTime)}</span>\n          </div>\n\n          <div className=\"flex items-center text-sm space-x-2\">\n            <Users className=\"w-4 h-4\" style={{ color: chainColor }} />\n            <span>\n              {item.viewers?.toLocaleString() ?? '0'} {isLive ? 'watching' : 'interested'}\n            </span>\n          </div>\n        </div>\n\n        {/* Action */}\n        {isUpcoming && (\n          <div \n            className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full\"\n            style={{ \n              backgroundColor: `${chainColor}20`,\n              color: chainColor,\n            }}\n          >\n            Set Reminder\n          </div>\n        )}\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Clock } from 'lucide-react';\nimport { Badge } from '../common/ui';\nimport { FeedCard } from './FeedCard';\nimport { getChainColor } from '../../utils/chain';\nimport type { PollFeedItem as PollFeedItemType } from '../../types/feed';\n\ninterface PollFeedItemProps {\n  item: PollFeedItemType;\n  onClick?: () => void;\n}\n\nconst formatTimeLeft = (endTime: number): string => {\n  const now = Date.now();\n  const timeLeft = endTime - now;\n  \n  if (timeLeft <= 0) return 'Ended';\n  \n  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  \n  if (days > 0) return `${days}d ${hours}h left`;\n  \n  const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n  if (hours > 0) return `${hours}h ${minutes}m left`;\n  \n  return `${minutes}m left`;\n};\n\nexport function PollFeedItem({ item, onClick }: PollFeedItemProps) {\n  const chainColor = getChainColor(item.chainId);\n  const now = Date.now();\n  const isActive = now < item.endTime;\n  const totalVotes = item.options.reduce((sum, option) => sum + option.votes, 0);\n\n  return (\n    <FeedCard item={item} onClick={onClick}>\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <h3 className=\"text-lg font-semibold\">{item.question}</h3>\n            <Badge \n              className=\"text-xs\"\n              style={{ \n                backgroundColor: `${chainColor}20`,\n                color: chainColor,\n              }}\n            >\n              Poll\n            </Badge>\n          </div>\n        </div>\n\n        {/* Poll Options */}\n        <div className=\"space-y-2\">\n          {item.options.map((option, index) => {\n            const percentage = totalVotes > 0 ? (option.votes / totalVotes) * 100 : 0;\n            \n            return (\n              <div key={index} className=\"space-y-1\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>{option.text}</span>\n                  <span>{percentage.toFixed(1)}%</span>\n                </div>\n                <div className=\"h-2 rounded-full bg-muted overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full transition-all duration-500\"\n                    style={{ \n                      width: `${percentage}%`,\n                      backgroundColor: chainColor,\n                    }}\n                  />\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {option.votes.toLocaleString()} votes\n                </p>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Poll Info */}\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{formatTimeLeft(item.endTime)}</span>\n          </div>\n          <span>{totalVotes.toLocaleString()} total votes</span>\n        </div>\n\n        {/* Action */}\n        {isActive && (\n          <div \n            className=\"inline-flex items-center px-3 py-1 text-sm font-medium rounded-full\"\n            style={{ \n              backgroundColor: `${chainColor}20`,\n              color: chainColor,\n            }}\n          >\n            Vote Now\n          </div>\n        )}\n      </div>\n    </FeedCard>\n  );\n} ","import React from 'react';\nimport { Heart, MessageCircle, Share2, Bookmark } from 'lucide-react';\nimport type { Post } from '../../types/post';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface PostFeedItemProps {\n  post: Post;\n  onClick?: () => void;\n}\n\nexport function PostFeedItem({ post, onClick }: PostFeedItemProps) {\n  const handleLike = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement like functionality\n  };\n\n  const handleComment = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement comment functionality\n  };\n\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement share functionality\n  };\n\n  const handleSave = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement save functionality\n  };\n\n  return (\n    <div \n      onClick={onClick}\n      className=\"bg-card hover:bg-card/90 transition-colors p-4 rounded-xl cursor-pointer\"\n    >\n      {/* Author Info */}\n      <div className=\"flex items-center space-x-3 mb-3\">\n        <div className=\"w-10 h-10 rounded-full bg-accent/10\" />\n        <div>\n          <div className=\"font-medium\">\n            {typeof post.author === 'object' \n              ? ((post.author as any).username || (post.author as any).id || 'Unknown')\n              : post.author || (post as any).creator || 'Unknown'}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {formatDistanceToNow(new Date(post.createdAt || (post as any).timestamp || Date.now()), { addSuffix: true })}\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"space-y-3\">\n        {post.metadata?.title && (\n          <h3 className=\"text-lg font-medium\">{post.metadata.title}</h3>\n        )}\n        <p className=\"text-muted-foreground\">{post.content}</p>\n\n        {/* Media Content */}\n        {post.metadata?.mediaContent && post.metadata.mediaContent.length > 0 && (\n          <div className=\"grid grid-cols-2 gap-2 mt-3\">\n            {post.metadata.mediaContent.map((media: { type: string; url: string; name?: string }, index: number) => (\n              <div key={index} className=\"relative aspect-square rounded-lg overflow-hidden\">\n                {media.type === 'image' ? (\n                  <img \n                    src={media.url} \n                    alt={media.name || 'Media content'}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-accent/10\">\n                    Unsupported Media\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex items-center space-x-4 mt-4\">\n        <button \n          onClick={handleLike}\n          className=\"flex items-center space-x-1 text-muted-foreground hover:text-primary transition-colors\"\n        >\n          <Heart className=\"w-5 h-5\" />\n          <span>{post.stats?.likeCount || (post as any).likes || 0}</span>\n        </button>\n\n        <button \n          onClick={handleComment}\n          className=\"flex items-center space-x-1 text-muted-foreground hover:text-primary transition-colors\"\n        >\n          <MessageCircle className=\"w-5 h-5\" />\n          <span>{post.stats?.commentCount || (post as any).comments || 0}</span>\n        </button>\n\n        <button \n          onClick={handleShare}\n          className=\"flex items-center space-x-1 text-muted-foreground hover:text-primary transition-colors\"\n        >\n          <Share2 className=\"w-5 h-5\" />\n          <span>{post.stats?.shareCount || (post as any).shares || 0}</span>\n        </button>\n\n        <button \n          onClick={handleSave}\n          className=\"flex items-center space-x-1 text-muted-foreground hover:text-primary transition-colors\"\n        >\n          <Bookmark className=\"w-5 h-5\" />\n          <span>{post.stats?.saveCount || (post as any).stats?.engagement || 0}</span>\n        </button>\n      </div>\n    </div>\n  );\n} ","import type { FeedItem } from '../../types/feed';\nimport type { Post } from '../../types/post';\nimport { ProposalFeedItem } from './ProposalFeedItem';\nimport { BountyFeedItem } from './BountyFeedItem';\nimport { EventFeedItem } from './EventFeedItem';\nimport { NFTFeedItem } from './NFTFeedItem';\nimport { ProjectFeedItem } from './ProjectFeedItem';\nimport { LivestreamFeedItem } from './LivestreamFeedItem';\nimport { PollFeedItem } from './PollFeedItem';\nimport { PostFeedItem } from './PostFeedItem';\n\ninterface FeedProps {\n  items: (FeedItem | Post)[];\n  onItemClick?: (item: FeedItem | Post) => void;\n}\n\nexport function Feed({ items, onItemClick }: FeedProps) {\n  const renderFeedItem = (item: FeedItem | Post) => {\n    const handleClick = () => onItemClick?.(item);\n\n    // Check if item is a Post\n    if ('content' in item && 'metadata' in item) {\n      return <PostFeedItem key={item.id} post={item} onClick={handleClick} />;\n    }\n\n    // Handle other feed item types\n    switch (item.type) {\n      case 'proposal':\n        return <ProposalFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'bounty':\n        return <BountyFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'event':\n        return <EventFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'nft':\n        return <NFTFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'project':\n        return <ProjectFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'livestream':\n        return <LivestreamFeedItem key={item.id} item={item} onClick={handleClick} />;\n      case 'poll':\n        return <PollFeedItem key={item.id} item={item} onClick={handleClick} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {items.map(renderFeedItem)}\n    </div>\n  );\n} ","import { Link } from 'react-router-dom';\nimport { Hash, Crown, Shield } from 'lucide-react';\nimport { Card, CardContent } from '../common/ui';\nimport type { Topic, TribeMember } from '../../types/tribe';\n\ninterface TribeSidebarProps {\n  members: TribeMember[];\n  topics: Topic[];\n  onTopicSelect?: (topic: Topic) => void;\n  selectedTopicId?: string;\n}\n\nexport function TribeSidebar({\n  members = [],\n  topics = [],\n  onTopicSelect,\n  selectedTopicId,\n}: TribeSidebarProps) {\n  // Ensure members and topics are arrays\n  const safeMembers = Array.isArray(members) ? members : [];\n  const safeTopics = Array.isArray(topics) ? topics : [];\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Top Members */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4 flex items-center gap-2\">\n            <Crown className=\"w-4 h-4 text-green-500\" />\n            Top Members\n          </h3>\n          <div className=\"space-y-2\">\n            {safeMembers.slice(0, 5).map((member) => (\n              <Link\n                key={member.id}\n                to={`/profile/${member.username}`}\n                className=\"flex items-center space-x-3 group p-2 hover:bg-green-100/20 rounded-lg transition-colors\"\n              >\n                <div className=\"relative flex-shrink-0\">\n                  <img\n                    src={member.avatar}\n                    alt={member.username}\n                    className=\"w-10 h-10 rounded-full object-cover\"\n                  />\n                  {member.role === 'admin' && (\n                    <Shield className=\"w-3.5 h-3.5 text-green-500 absolute -right-0.5 -bottom-0.5 bg-black rounded-full p-0.5\" />\n                  )}\n                </div>\n                <div className=\"flex-grow min-w-0 pr-1\">\n                  <p className=\"font-medium text-sm group-hover:text-green-500 truncate max-w-full\">\n                    @{member.username}\n                  </p>\n                  {member.role && (\n                    <p className=\"text-xs text-gray-400 truncate max-w-full\">\n                      {member.role === 'admin' ? 'Admin' : member.role}\n                    </p>\n                  )}\n                </div>\n              </Link>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Topics */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <h3 className=\"text-lg font-medium mb-4 flex items-center gap-2\">\n            <Hash className=\"w-4 h-4 text-green-500\" />\n            Topics\n          </h3>\n          <div className=\"space-y-2\">\n            {safeTopics.map((topic) => (\n              <button\n                key={topic.id}\n                onClick={() => onTopicSelect?.(topic)}\n                className={`w-full flex items-center space-x-2 px-3 py-2 rounded-lg transition-colors ${\n                  selectedTopicId === topic.id\n                    ? 'bg-green-500 text-white'\n                    : 'hover:bg-green-100/20 text-gray-400 hover:text-white'\n                }`}\n              >\n                <Hash className=\"w-4 h-4 flex-shrink-0\" />\n                <span className=\"text-sm truncate text-left\">{topic.name}</span>\n                {topic.postCount && (\n                  <span className={`text-xs ml-auto flex-shrink-0 px-1.5 py-0.5 rounded-full ${\n                    selectedTopicId === topic.id\n                      ? 'bg-green-600 text-white' \n                      : 'bg-green-200/10 text-gray-400'\n                  }`}>\n                    {topic.postCount}\n                  </span>\n                )}\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","import React from 'react';\nimport PostCreator from './post/PostCreator';\n\ninterface CreatePostProps {\n  isOpen: boolean;\n  onClose: () => void;\n  tribeId?: string; // Make tribeId optional for backward compatibility\n}\n\n/**\n * Backward-compatible CreatePost that uses the new PostCreator component\n */\nexport function CreatePost({ isOpen, onClose, tribeId }: CreatePostProps) {\n  return (\n    <PostCreator \n      mode=\"dialog\"\n      isOpen={isOpen}\n      onClose={onClose}\n      tribeId={tribeId || ''}\n    />\n  );\n}","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { Post } from '../types/post';\nimport { PostsService } from '../services/posts.service';\nimport { getPostsService as getPostsServiceFromIndex } from '../services/index';\n\n// Define the sync status type\ninterface SyncStatus {\n  isSyncing: boolean;\n  progress: number;\n  total: number;\n  lastSyncTime: number;\n  errorCount: number;\n}\n\nexport interface PostsDataHookResult {\n  posts: Post[];\n  postsByTribe: Record<string, Post[]>;\n  postsById: Record<string, Post>;\n  isLoading: boolean;\n  error: string | null;\n  syncStatus: SyncStatus;\n  getPostById: (postId: string) => Promise<Post | null>;\n  getPostsByTribe: (tribeId: string, limit?: number, offset?: number) => Promise<Post[]>;\n  refreshPost: (postId: string) => Promise<Post | null>;\n  refreshTribePosts: (tribeId: string) => Promise<void>;\n}\n\nexport function usePostsData(): PostsDataHookResult {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postsById, setPostsById] = useState<Record<string, Post>>({});\n  const [postsByTribe, setPostsByTribe] = useState<Record<string, Post[]>>({});\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [syncStatus, setSyncStatus] = useState<SyncStatus>({\n    isSyncing: false,\n    progress: 0,\n    total: 0,\n    lastSyncTime: 0,\n    errorCount: 0\n  });\n  \n  const postsServiceRef = useRef<PostsService | null>(null);\n  \n  // Initialize the posts service\n  useEffect(() => {\n    console.log(\"Initializing posts service\");\n    if (!postsServiceRef.current) {\n      postsServiceRef.current = getPostsServiceFromIndex();\n    }\n    \n    // Set up sync listener - match the expected signature from the service\n    const service = postsServiceRef.current;\n    if (!service) {\n      console.error(\"Failed to initialize posts service\");\n      return () => {};\n    }\n    \n    const cleanupFunction = service.addSyncListener(function syncListener() {\n      // Get the current status from the service\n      const currentStatus = service.getSyncStatus() || {\n        isSyncing: false,\n        progress: 0,\n        total: 0,\n        lastSyncTime: 0,\n        errorCount: 0\n      };\n      \n      setSyncStatus(currentStatus);\n    });\n    \n    // Initial status update\n    setSyncStatus(service.getSyncStatus());\n    \n    return () => {\n      cleanupFunction();\n    };\n  }, []); // Empty dependency array to prevent infinite loop\n  \n  // Get the posts service instance, initializing if needed\n  const getLocalPostsService = useCallback((): PostsService | null => {\n    if (!postsServiceRef.current) {\n      postsServiceRef.current = getPostsServiceFromIndex();\n    }\n    return postsServiceRef.current;\n  }, []);\n\n  // Get a post by ID\n  const getPostById = useCallback(async (postId: string): Promise<Post | null> => {\n    try {\n      if (!postId) {\n        console.warn(\"getPostById called with invalid postId\");\n        return null;\n      }\n      \n      const service = getLocalPostsService();\n      if (!service) {\n        throw new Error(\"Posts service not initialized\");\n      }\n      \n      const post = await service.getPost(postId);\n      \n      if (post) {\n        // Update state\n        setPostsById(prev => ({\n          ...prev,\n          [postId]: post\n        }));\n        \n        return post;\n      }\n      \n      return null;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      console.error(\"Error fetching post:\", errorMessage);\n      setError(errorMessage);\n      return null;\n    }\n  }, [getLocalPostsService]);\n\n  // Get posts by tribe ID\n  const getPostsByTribe = useCallback(async (tribeId: string, limit?: number, offset?: number): Promise<Post[]> => {\n    try {\n      if (!tribeId) {\n        console.warn(\"getPostsByTribe called with invalid tribeId\");\n        return [];\n      }\n      \n      setIsLoading(true);\n      \n      const service = getLocalPostsService();\n      if (!service) {\n        throw new Error(\"Posts service not initialized\");\n      }\n      \n      const tribePosts = await service.getPostsByTribe(tribeId, limit, offset);\n      \n      // Update state\n      setPostsByTribe(prev => ({\n        ...prev,\n        [tribeId]: tribePosts\n      }));\n      \n      // Update postsById for quick lookup\n      const newPostsById = { ...postsById };\n      tribePosts.forEach((post: Post) => {\n        newPostsById[post.id] = post;\n      });\n      \n      setPostsById(newPostsById);\n      \n      return tribePosts;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      console.error(\"Error fetching tribe posts:\", errorMessage);\n      setError(errorMessage);\n      return [];\n    } finally {\n      setIsLoading(false);\n    }\n  }, [postsById, getLocalPostsService]);\n\n  // Refresh a post by ID\n  const refreshPost = useCallback(async (postId: string): Promise<Post | null> => {\n    try {\n      if (!postId) {\n        console.warn(\"refreshPost called with invalid postId\");\n        return null;\n      }\n      \n      const service = getLocalPostsService();\n      if (!service) {\n        throw new Error(\"Posts service not initialized\");\n      }\n      \n      // Force a refresh by temporarily removing from cache\n      service.clearPostFromCache(postId);\n      \n      // Fetch again\n      const post = await service.getPost(postId);\n      \n      if (post) {\n        // Update state\n        setPostsById(prev => ({\n          ...prev,\n          [postId]: post\n        }));\n        \n        // Update post in any tribe collections it belongs to\n        if (post.tribeId) {\n          setPostsByTribe(prev => {\n            const tribePosts = prev[post.tribeId] || [];\n            \n            // Replace the post in the tribe's posts if it exists\n            const updatedTribePosts = tribePosts.map(p => \n              p.id === post.id ? post : p\n            );\n            \n            return {\n              ...prev,\n              [post.tribeId]: updatedTribePosts\n            };\n          });\n        }\n        \n        return post;\n      }\n      \n      return null;\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      console.error(\"Error refreshing post:\", errorMessage);\n      setError(errorMessage);\n      return null;\n    }\n  }, [getLocalPostsService]);\n\n  // Refresh posts for a specific tribe\n  const refreshTribePosts = useCallback(async (tribeId: string): Promise<void> => {\n    try {\n      if (!tribeId) {\n        console.warn(\"refreshTribePosts called with invalid tribeId\");\n        return;\n      }\n      \n      const service = getLocalPostsService();\n      if (!service) {\n        throw new Error(\"Posts service not initialized\");\n      }\n      \n      // Force a refresh by temporarily clearing the tribe's cache\n      service.clearTribeCache(tribeId);\n      \n      // Fetch again\n      const tribePosts = await service.getPostsByTribe(tribeId);\n      \n      // Update state\n      setPostsByTribe(prev => ({\n        ...prev,\n        [tribeId]: tribePosts\n      }));\n      \n      // Update postsById for quick lookup\n      const newPostsById = { ...postsById };\n      tribePosts.forEach((post: Post) => {\n        newPostsById[post.id] = post;\n      });\n      \n      setPostsById(newPostsById);\n    } catch (e) {\n      const errorMessage = e instanceof Error ? e.message : String(e);\n      console.error(\"Error refreshing tribe posts:\", errorMessage);\n      setError(errorMessage);\n    }\n  }, [postsById, getLocalPostsService]);\n\n  return {\n    posts,\n    postsByTribe,\n    postsById,\n    isLoading,\n    error,\n    syncStatus,\n    getPostById,\n    getPostsByTribe,\n    refreshPost,\n    refreshTribePosts\n  };\n} ","import React, { useState, useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Plus, Users } from 'lucide-react';\nimport { Feed } from '../components/feed/Feed';\nimport { FeedLayout } from '../components/layout/FeedLayout';\nimport { TribeSidebar } from '../components/sidebars/TribeSidebar';\nimport { CreatePost } from '../components/CreatePost';\nimport { useTribesData } from '../hooks/useTribesData';\nimport { usePostsData } from '../hooks/usePostsData';\nimport { Tribe } from '../types/tribe';\nimport { \n  getTribeAvatar, \n  getTribeDescription, \n  getTribeCoverImage,\n  getTribeTopics\n} from '../utils/tribeHelpers';\n\n// Define Topic type directly since it might be missing from tribe.ts\ninterface Topic {\n  id: string;\n  name: string;\n}\n\nimport type { FeedItem } from '../types/feed';\nimport clsx from 'clsx';\n\nexport function TribeView() {\n  const { tribeId } = useParams();\n  const { tribes, isLoading: isLoadingTribes } = useTribesData();\n  const { postsByTribe, isLoading: isLoadingPosts } = usePostsData();\n  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);\n  const [isJoined, setIsJoined] = useState(false);\n  const [showCreatePost, setShowCreatePost] = useState(false);\n  const [activeTab, setActiveTab] = useState<'all' | 'media' | 'events'>('all');\n  \n  // Find tribe by ID with proper type checking\n  const tribe = useMemo(() => {\n    return tribes?.find(t => t.id.toString() === tribeId?.toString());\n  }, [tribes, tribeId]);\n\n  // Extract tribe display properties using helper functions to avoid linter errors\n  const tribeDisplay = useMemo(() => {\n    if (!tribe) return null;\n    \n    return {\n      id: tribe.id,\n      name: tribe.name,\n      description: getTribeDescription(tribe),\n      avatar: getTribeAvatar(tribe),\n      coverImage: getTribeCoverImage(tribe),\n      memberCount: tribe.memberCount,\n      // We can safely cast the tribe to any inside this helper fn\n      isVerified: (tribe as any).isVerified || false,\n      members: (tribe as any).members || [],\n      topics: getTribeTopics(tribe)\n    };\n  }, [tribe]);\n\n  // Debug logging to help troubleshoot tribe data issues - with proper dependencies\n  useEffect(() => {\n    if (tribe) {\n      console.log('Found tribe:', tribe);\n      console.log('Formatted tribe display:', tribeDisplay);\n    } else if (tribes?.length > 0) {\n      console.log('Tribes available but none match ID:', tribeId);\n      console.log('Available tribe IDs:', tribes.map(t => t.id));\n    }\n  }, [tribe, tribes, tribeId]); // Removed tribeDisplay to prevent infinite loop\n\n  // Replace tribe posts loading logic with this:\n  const tribePosts = useMemo(() => {\n    if (!tribe || !tribe.id) return [];\n    return postsByTribe[tribe.id] || [];\n  }, [tribe, postsByTribe]);\n\n  if (isLoadingTribes) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-pulse bg-accent/10 rounded-xl h-48 w-96\" />\n      </div>\n    );\n  }\n\n  if (!tribe || !tribeDisplay) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        Tribe not found\n      </div>\n    );\n  }\n\n  const handleItemClick = (item: any) => {\n    // Handle item clicks here\n    console.log('Clicked item:', item);\n  };\n\n  const rightSidebar = (\n    <div className=\"space-y-4\">\n      {/* Tribe Info Card */}\n      <div className=\"bg-card rounded-xl overflow-hidden\">\n        {/* Cover Image */}\n        <div className=\"h-24 relative\">\n          {tribeDisplay.coverImage && (\n            <img\n              src={tribeDisplay.coverImage}\n              alt={tribeDisplay.name}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/default-cover.png';\n              }}\n            />\n          )}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/60 to-transparent\" />\n        </div>\n\n        {/* Tribe Info */}\n        <div className=\"p-4\">\n          <div className=\"flex items-center space-x-3 mt-2\">\n            <img\n              src={tribeDisplay.avatar}\n              alt={tribeDisplay.name}\n              className=\"w-16 h-16 rounded-xl border-4 border-background\"\n              onError={(e) => {\n                (e.target as HTMLImageElement).src = '/images/default-avatar.png';\n              }}\n            />\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold flex items-center gap-1\">\n                {tribeDisplay.name}\n                {tribeDisplay.isVerified && (\n                  <span className=\"text-theme-primary text-sm\">✓</span>\n                )}\n              </h3>\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Users className=\"w-4 h-4 mr-1\" />\n                <span>{tribeDisplay.memberCount.toLocaleString()} members</span>\n              </div>\n            </div>\n          </div>\n          <p className=\"mt-3 text-sm text-muted-foreground\">{tribeDisplay.description}</p>\n          <button\n            onClick={() => setIsJoined(!isJoined)}\n            className={clsx(\n              'w-full mt-4 px-4 py-2 rounded-lg text-sm font-medium transition-colors',\n              isJoined\n                ? 'bg-gray-700/10 hover:bg-gray-700/20 text-white'\n                : 'bg-theme-primary hover:bg-theme-primary/90 text-white'\n            )}\n          >\n            {isJoined ? 'Joined' : 'Join Tribe'}\n          </button>\n        </div>\n      </div>\n\n      {/* Topics */}\n      <TribeSidebar\n        members={tribeDisplay.members}\n        topics={tribeDisplay.topics}\n        onTopicSelect={setSelectedTopic}\n        selectedTopicId={selectedTopic?.id}\n      />\n    </div>\n  );\n\n  return (\n    <FeedLayout rightSidebar={rightSidebar}>\n      <div className=\"min-w-[320px] overflow-x-hidden\">\n        {/* Feed Controls */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6\">\n          <div className=\"flex space-x-4 overflow-x-auto\">\n            <button\n              onClick={() => setActiveTab('all')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'all'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              All Posts\n            </button>\n            <button\n              onClick={() => setActiveTab('media')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'media'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              Media\n            </button>\n            <button\n              onClick={() => setActiveTab('events')}\n              className={clsx(\n                'px-4 py-2 rounded-full whitespace-nowrap',\n                activeTab === 'events'\n                  ? 'bg-foreground/10 text-foreground'\n                  : 'text-muted-foreground hover:text-foreground'\n              )}\n            >\n              Events\n            </button>\n          </div>\n          <button\n            onClick={() => setShowCreatePost(true)}\n            className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-theme-primary text-white rounded-full font-medium hover:bg-theme-primary/90 transition-colors w-full sm:w-auto\"\n          >\n            <Plus className=\"w-5 h-5\" />\n            <span>Create Post</span>\n          </button>\n        </div>\n\n        {/* Feed */}\n        <div className=\"space-y-4\">\n          {tribePosts.length > 0 ? (\n            <Feed \n              items={tribePosts}\n              onItemClick={handleItemClick}\n            />\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              No posts available in this tribe\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create Post Modal */}\n      {showCreatePost && (\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm flex items-end sm:items-center justify-center z-50 p-4\">\n          <div className=\"bg-card w-full max-w-[600px] rounded-t-xl sm:rounded-xl\">\n            <CreatePost \n              onClose={() => setShowCreatePost(false)} \n              isOpen={showCreatePost}\n              tribeId={tribe.id}\n            />\n          </div>\n        </div>\n      )}\n    </FeedLayout>\n  );\n} ","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { TribeView } from './TribeView';\n\nexport function TribeDetails() {\n  // TribeDetails is just a wrapper for TribeView\n  // No need to duplicate the hooks as TribeView already handles this logic\n  return <TribeView />;\n} ","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTribesManagement } from '../hooks/useTribesManagement';\nimport { Image, X, Plus, Upload, Lock, Globe } from 'lucide-react';\n\nexport function CreateTribe() {\n  const navigate = useNavigate();\n  const { createTribe } = useTribesManagement();\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [avatar, setAvatar] = useState<File | null>(null);\n  const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n  const [coverImage, setCoverImage] = useState<File | null>(null);\n  const [coverPreview, setCoverPreview] = useState<string | null>(null);\n  const [tags, setTags] = useState<string[]>([]);\n  const [tagInput, setTagInput] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  // Handle avatar selection\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setAvatar(file);\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setAvatarPreview(event.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Handle cover image selection\n  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setCoverImage(file);\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setCoverPreview(event.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Add tag\n  const handleAddTag = () => {\n    if (tagInput && !tags.includes(tagInput) && tags.length < 5) {\n      setTags([...tags, tagInput]);\n      setTagInput('');\n    }\n  };\n\n  // Remove tag\n  const handleRemoveTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(null);\n\n    // Validate inputs\n    if (!name.trim()) {\n      setError('Tribe name is required');\n      return;\n    }\n\n    if (!description.trim()) {\n      setError('Description is required');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Call the createTribe function from the hook with correct parameters\n      const metadataObj = {\n        name: name.trim(),\n        description,\n        privacy: isPrivate ? 'private' : 'public',\n        tags,\n        avatar: avatarPreview,\n        coverImage: coverPreview,\n        createdAt: new Date().toISOString()\n      };\n      console.log('Creating tribe with metadata:', metadataObj);\n      const metadataStr = JSON.stringify(metadataObj);\n      const joinType = isPrivate ? 1 : 0; // 0 = public, 1 = private\n      await createTribe(name, metadataStr);\n      \n      setSuccess(true);\n\n      // Redirect after successful creation (with a short delay to show success)\n      setTimeout(() => {\n        navigate('/tribes');\n      }, 2000);\n    } catch (err) {\n      console.error('Error creating tribe:', err);\n      setError(err instanceof Error ? err.message : 'Failed to create tribe');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-white\">Create a New Tribe</h1>\n        <p className=\"text-gray-400 mt-2\">Create a community around your interests, project, or organization.</p>\n      </div>\n\n      {success ? (\n        <div className=\"bg-green-500/20 border border-green-500/30 rounded-lg p-4 text-center\">\n          <h3 className=\"text-xl font-semibold text-white mb-2\">Tribe Created Successfully!</h3>\n          <p className=\"text-gray-300\">Redirecting you to the tribes page...</p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Cover Image Upload */}\n          <div className=\"relative\">\n            <div className={`h-48 w-full rounded-xl overflow-hidden bg-gray-800/50 border-2 border-dashed ${coverPreview ? 'border-transparent' : 'border-gray-700'}`}>\n              {coverPreview ? (\n                <>\n                  <img src={coverPreview} alt=\"Cover Preview\" className=\"w-full h-full object-cover\" />\n                  <button \n                    type=\"button\"\n                    onClick={() => {\n                      setCoverImage(null);\n                      setCoverPreview(null);\n                    }}\n                    className=\"absolute top-2 right-2 bg-black/70 text-white p-1.5 rounded-full hover:bg-black/90\"\n                  >\n                    <X size={18} />\n                  </button>\n                </>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-full text-gray-400\">\n                  <Image className=\"w-10 h-10 mb-2\" />\n                  <p className=\"text-sm\">Upload cover image (optional)</p>\n                </div>\n              )}\n            </div>\n            \n            <input \n              type=\"file\" \n              id=\"cover-image\" \n              accept=\"image/*\" \n              onChange={handleCoverChange} \n              className=\"hidden\" \n            />\n            \n            {!coverPreview && (\n              <label \n                htmlFor=\"cover-image\" \n                className=\"absolute bottom-4 right-4 bg-gray-800 text-white px-3 py-2 rounded-lg flex items-center cursor-pointer hover:bg-gray-700\"\n              >\n                <Upload size={16} className=\"mr-2\" />\n                <span>Upload Cover</span>\n              </label>\n            )}\n          </div>\n\n          {/* Basic Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {/* Avatar Upload */}\n            <div className=\"col-span-1\">\n              <label className=\"block text-sm font-medium text-gray-300 mb-2\">Avatar</label>\n              <div className=\"relative\">\n                <div className={`w-24 h-24 rounded-xl overflow-hidden bg-gray-800/50 border-2 border-dashed ${avatarPreview ? 'border-transparent' : 'border-gray-700'}`}>\n                  {avatarPreview ? (\n                    <img src={avatarPreview} alt=\"Avatar Preview\" className=\"w-full h-full object-cover\" />\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-gray-400\">\n                      <Plus size={24} />\n                    </div>\n                  )}\n                </div>\n                \n                <input \n                  type=\"file\" \n                  id=\"avatar\" \n                  accept=\"image/*\" \n                  onChange={handleAvatarChange} \n                  className=\"hidden\" \n                />\n                \n                <label \n                  htmlFor=\"avatar\" \n                  className=\"absolute -bottom-1 -right-1 bg-blue-600 text-white p-1.5 rounded-full cursor-pointer hover:bg-blue-700\"\n                >\n                  <Plus size={14} />\n                </label>\n              </div>\n            </div>\n\n            {/* Name and Description */}\n            <div className=\"col-span-3 space-y-4\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-300 mb-2\">Tribe Name*</label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Enter a name for your tribe\"\n                  maxLength={50}\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-300 mb-2\">Description*</label>\n                <textarea\n                  id=\"description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none\"\n                  placeholder=\"What is your tribe about?\"\n                  rows={3}\n                  maxLength={300}\n                />\n                <p className=\"text-gray-400 text-xs mt-1\">{description.length}/300 characters</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Privacy Settings */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">Privacy</label>\n            <div className=\"flex space-x-4\">\n              <button\n                type=\"button\"\n                onClick={() => setIsPrivate(false)}\n                className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                  !isPrivate \n                    ? 'border-blue-500 bg-blue-500/10' \n                    : 'border-gray-700 bg-gray-800/50 hover:bg-gray-800'\n                }`}\n              >\n                <Globe className={`w-5 h-5 ${!isPrivate ? 'text-blue-500' : 'text-gray-400'}`} />\n                <div className=\"text-left\">\n                  <div className={`font-medium ${!isPrivate ? 'text-blue-500' : 'text-white'}`}>Public</div>\n                  <div className=\"text-xs text-gray-400\">Anyone can join and view content</div>\n                </div>\n              </button>\n              \n              <button\n                type=\"button\"\n                onClick={() => setIsPrivate(true)}\n                className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                  isPrivate \n                    ? 'border-blue-500 bg-blue-500/10' \n                    : 'border-gray-700 bg-gray-800/50 hover:bg-gray-800'\n                }`}\n              >\n                <Lock className={`w-5 h-5 ${isPrivate ? 'text-blue-500' : 'text-gray-400'}`} />\n                <div className=\"text-left\">\n                  <div className={`font-medium ${isPrivate ? 'text-blue-500' : 'text-white'}`}>Private</div>\n                  <div className=\"text-xs text-gray-400\">Members must be approved to join</div>\n                </div>\n              </button>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-300 mb-2\">Tags (up to 5)</label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              {tags.map((tag) => (\n                <div key={tag} className=\"flex items-center bg-gray-800 text-white px-3 py-1 rounded-full\">\n                  <span className=\"text-sm\">{tag}</span>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveTag(tag)}\n                    className=\"ml-2 text-gray-400 hover:text-white\"\n                  >\n                    <X size={14} />\n                  </button>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"flex\">\n              <input\n                type=\"text\"\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    handleAddTag();\n                  }\n                }}\n                className=\"flex-1 px-3 py-2 bg-gray-800/50 border border-r-0 border-gray-700 rounded-l-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Add a tag\"\n                disabled={tags.length >= 5}\n              />\n              <button\n                type=\"button\"\n                onClick={handleAddTag}\n                disabled={tags.length >= 5 || !tagInput.trim()}\n                className=\"px-3 py-2 bg-gray-700 text-white rounded-r-lg hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Add\n              </button>\n            </div>\n            <p className=\"text-gray-400 text-xs mt-1\">Tags help people discover your tribe</p>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"bg-red-500/20 border border-red-500/30 text-red-200 px-4 py-3 rounded-lg\">\n              {error}\n            </div>\n          )}\n\n          {/* Submit Buttons */}\n          <div className=\"flex items-center justify-end space-x-4 mt-8\">\n            <button\n              type=\"button\"\n              onClick={() => navigate('/tribes')}\n              className=\"px-4 py-2 text-gray-300 hover:text-white\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"px-6 py-2.5 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-70 disabled:cursor-not-allowed\"\n            >\n              {isSubmitting ? 'Creating...' : 'Create Tribe'}\n            </button>\n          </div>\n        </form>\n      )}\n    </div>\n  );\n} ","export enum OnboardingStep {\n  WALLET_CONNECTION = 'WALLET_CONNECTION',\n  PROFILE_CREATION = 'PROFILE_CREATION',\n  FOLLOW_SUGGESTIONS = 'FOLLOW_SUGGESTIONS',\n  COMPLETED = 'COMPLETED'\n}\n\nexport interface OnboardingState {\n  currentStep: OnboardingStep\n  isCompleted: boolean\n  walletAddress?: string\n  chainId?: number\n  profileId?: string\n}\n\nexport const ONBOARDING_STORAGE_KEY = 'tribes_onboarding'\n\nexport const STEP_TITLES = {\n  [OnboardingStep.WALLET_CONNECTION]: 'Connect Wallet',\n  [OnboardingStep.PROFILE_CREATION]: 'Create Profile',\n  [OnboardingStep.FOLLOW_SUGGESTIONS]: 'Follow Users',\n  [OnboardingStep.COMPLETED]: 'Welcome to Tribes'\n}\n\nexport const INITIAL_ONBOARDING_STATE: OnboardingState = {\n  currentStep: OnboardingStep.WALLET_CONNECTION,\n  isCompleted: false\n} ","import { Address, keccak256, toHex, Log } from 'viem';\nimport { getPublicClient, getContracts } from '../config/contracts';\nimport { blockchain } from './blockchainUtils';\n\nexport interface ProfileMetadata {\n  avatar: string;\n  bio: string;\n  createdAt: number;\n}\n\nexport interface ProfileData {\n  tokenId: string;\n  username: string;\n  metadata?: ProfileMetadata;\n  owner: string;\n}\n\nexport interface ProfileSearchResult {\n  tokenId: string;\n  username: string;\n  bio: string;\n  avatarNFT: string;\n  avatarTokenId: string;\n  website: string;\n  twitter: string;\n}\n\ninterface ProfileResponse {\n  username: string;\n  metadataURI: string;\n  owner: string;\n}\n\n// Make storage key chain-specific\nconst getProfileStorageKey = (chainId: number) => `tribes_profile_data_${chainId}`;\n\n// Save profile data to local storage with chain ID\nconst saveProfileToStorage = (profile: ProfileData, chainId: number) => {\n  localStorage.setItem(getProfileStorageKey(chainId), JSON.stringify(profile));\n};\n\n// // Get profile data from local storage for specific chain\n// const getProfileFromStorage = (chainId: number): ProfileData | null => {\n//   const stored = localStorage.getItem(getProfileStorageKey(chainId));\n//   if (stored) {\n//     const profile = JSON.parse(stored);\n//     return profile;\n//   }\n//   return null;\n// };\n\n// Read Operations\nexport async function searchProfileByUsername(username: string, chainId: number): Promise<ProfileSearchResult | null> {\n  try {\n    const contracts = getContracts(chainId);\n    const client = getPublicClient(chainId);\n\n    // First check if username exists\n    const exists = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'usernameExists',\n      args: [username]\n    });\n\n    if (!exists) {\n      return null;\n    }\n    \n    // Get token ID by username\n    const tokenId = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getTokenIdByUsername',\n      args: [username]\n    }) as bigint;\n\n    // Get profile data using token ID\n    const profileData = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [tokenId]\n    }) as ProfileResponse;\n\n    if (!profileData) return null;\n\n    const owner = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'ownerOf',\n      args: [tokenId]\n    });\n\n    return {\n      tokenId: tokenId.toString(),\n      username: profileData.username,\n      bio: profileData.metadataURI,\n      avatarNFT: owner as string,\n      avatarTokenId: '0',\n      website: '',\n      twitter: ''\n    };\n  } catch (error) {\n    console.error('Error searching profile:', error);\n    return null;\n  }\n}\n\nexport async function getProfileByAddress(address: Address, chainId: number): Promise<ProfileData | null> {\n  // If chainId is undefined, log an error and try to get it\n  if (!chainId) {\n    console.error('❌ Chain ID is undefined in getProfileByAddress, using fallback');\n    try {\n      // Try to get chainId from ethereum provider\n      const provider = window.ethereum;\n      if (provider) {\n        const rawChainId = await provider.request({ method: 'eth_chainId' });\n        chainId = parseInt(rawChainId as string, 16);\n        console.log('🔄 Retrieved chainId from provider:', chainId);\n      } else {\n        chainId = 20143; // Your target chain as fallback\n        console.warn('⚠️ No provider, using fallback chainId:', chainId);\n      }\n    } catch (e) {\n      console.error('❌ Failed to get chainId, using fallback:', e);\n      chainId = 20143; // Your target chain as fallback\n    }\n  }\n\n  const contracts = getContracts(chainId);\n  const client = getPublicClient(chainId);\n  \n  try {\n    // Ensure chainId is included in every log object\n    const chainIdForLogs = chainId; // Store in a separate variable to be safe\n    \n    console.log('🔍 Checking profile on chain:', {\n      chainId: chainIdForLogs, // Use the safe variable\n      address,\n      contractAddress: contracts.profileNFTMinter.address,\n      rpcUrl: client.transport.url\n    });\n    \n    // 1. Get token balance for the address\n    const balance = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'balanceOf',\n      args: [address]\n    }) as bigint;\n\n    console.log('📊 Balance check result:', {\n      balance: balance.toString(),\n      chainId: chainIdForLogs, // Use the safe variable\n      address\n    });\n\n    // Check if user has any profiles\n    if (balance === BigInt(0)) {\n      console.log('❌ No profile found - balance is 0', { chainId: chainIdForLogs, address });\n      return null;\n    }\n\n    // 2. Find the first token ID owned by this address\n    let userTokenId: number | null = null;\n    \n    for (let i = 0; i < 10; i++) {\n      try {\n        console.log('🔍 Checking token ownership:', { tokenId: i, chainId: chainIdForLogs });\n        \n        const owner = await client.readContract({\n          address: contracts.profileNFTMinter.address,\n          abi: contracts.profileNFTMinter.abi,\n          functionName: 'ownerOf',\n          args: [BigInt(i)]\n        }) as string;\n\n        console.log('👤 Token owner:', { tokenId: i, owner, chainId: chainIdForLogs });\n\n        if (owner.toLowerCase() === address.toLowerCase()) {\n          userTokenId = i;\n          console.log('✅ Found matching token:', { tokenId: i, chainId: chainIdForLogs });\n          break;\n        }\n      } catch (e) {\n        console.log('⚠️ Token check error:', { tokenId: i, chainId: chainIdForLogs, error: e });\n        continue;\n      }\n    }\n\n    if (userTokenId === null) {\n      console.log('❌ No owned token found', { chainId: chainIdForLogs, address });\n      return null;\n    }\n    \n    console.log('🔍 Fetching profile data:', { tokenId: userTokenId, chainId: chainIdForLogs });\n    \n    const profileResponse = await client.readContract({\n      address: contracts.profileNFTMinter.address,\n      abi: contracts.profileNFTMinter.abi,\n      functionName: 'getProfileByTokenId',\n      args: [BigInt(userTokenId)]\n    }) as [string, string, string];\n\n    const [username, metadataURI, owner] = profileResponse;\n    \n    console.log('📦 Raw profile data:', { \n      username, \n      metadataURI, \n      owner,\n      chainId: chainIdForLogs \n    });\n\n    // 4. Verify owner matches\n    if (owner.toLowerCase() !== address.toLowerCase()) {\n      console.log('❌ Owner mismatch:', {\n        expectedOwner: address.toLowerCase(),\n        actualOwner: owner.toLowerCase(),\n        chainId: chainIdForLogs\n      });\n      return null;\n    }\n\n    let metadata: ProfileMetadata;\n    try {\n      const parsedMetadata = JSON.parse(metadataURI);\n      metadata = {\n        avatar: parsedMetadata.avatar || '',\n        bio: parsedMetadata.bio || '',\n        createdAt: parsedMetadata.createdAt || Date.now()\n      };\n      console.log('✅ Parsed metadata:', { metadata, chainId: chainIdForLogs });\n    } catch (e) {\n      console.warn('⚠️ Failed to parse metadata:', { metadataURI, error: e, chainId: chainIdForLogs });\n      metadata = {\n        avatar: '',\n        bio: '',\n        createdAt: Date.now()\n      };\n    }\n\n    const profile: ProfileData = {\n      tokenId: userTokenId.toString(),\n      owner: address,\n      username,\n      metadata\n    };\n\n    console.log('✅ Profile found:', { profile, chainId: chainIdForLogs });\n    return profile;\n\n  } catch (error: any) {\n    console.error('❌ Profile fetch error:', {\n      error,\n      chainId, // Use the original chainId variable\n      address,\n      contractAddress: contracts.profileNFTMinter.address,\n      rpcUrl: client.transport.url\n    });\n    return null;\n  }\n}\n\n// Write Operations - These now use the blockchain utility\nexport async function createProfile(\n  username: string,\n  metadata: ProfileMetadata,\n  chainId: number\n): Promise<{ success: boolean; tokenId?: string; error?: string }> {\n  try {\n    const metadataString = JSON.stringify(metadata);\n    const hash = await blockchain.mintProfile({\n      username,\n      metadataURI: metadataString\n    });\n\n    // Get tokenId from event\n    const client = getPublicClient(chainId);\n    const receipt = await client.waitForTransactionReceipt({ hash });\n    \n    const eventSignature = 'ProfileCreated(uint256,address,string)';\n    const eventTopic = keccak256(toHex(eventSignature));\n    const createEvent = receipt.logs.find(\n      (log: Log) => log.topics[0] === eventTopic\n    );\n    \n    const tokenId = createEvent ? Number(createEvent.topics[1]).toString() : hash;\n\n    // Save initial profile data to storage\n    const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const profileData: ProfileData = {\n      tokenId,\n      username,\n      metadata,\n      owner: account\n    };\n    saveProfileToStorage(profileData, chainId);\n\n    return { success: true, tokenId };\n  } catch (error: any) {\n    console.error('❌ Error creating profile:', error);\n    return { \n      success: false, \n      error: error.message || 'Failed to create profile'\n    };\n  }\n}\n\nexport async function updateProfile(\n  tokenId: string,\n  metadata: ProfileMetadata,\n  chainId: number\n): Promise<{ success: boolean; error?: string }> {\n  try {\n    const metadataString = JSON.stringify(metadata);\n    await blockchain.updateProfile({\n      tokenId: Number(tokenId),\n      metadata: metadataString\n    });\n\n    // Update local storage\n    const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    const profile = await getProfileByAddress(account as Address, chainId);\n    if (profile) {\n      const updatedProfile = { ...profile, metadata };\n      saveProfileToStorage(updatedProfile, chainId);\n    }\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('❌ Error updating profile:', error);\n    return { \n      success: false, \n      error: error.message || 'Failed to update profile'\n    };\n  }\n} ","import { useState, useEffect, useCallback, useRef } from 'react'\nimport {\n  OnboardingStep,\n  OnboardingState,\n  INITIAL_ONBOARDING_STATE,\n  ONBOARDING_STORAGE_KEY\n} from '../constants/onboarding'\nimport { getProfileByAddress } from '../utils/profile'\nimport { Address } from 'viem'\n\nconst WALLET_CHECK_TIMEOUT = 3000 // 3 seconds\nconst MAX_RETRIES = 3\n\nexport const useOnboarding = () => {\n  const [state, setState] = useState<OnboardingState>(() => {\n    const stored = localStorage.getItem(ONBOARDING_STORAGE_KEY)\n    return stored ? JSON.parse(stored) : INITIAL_ONBOARDING_STATE\n  })\n  \n  const retryCount = useRef(0)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>()\n\n  // Effect to check wallet connection status\n  useEffect(() => {\n    const checkWalletConnection = async () => {\n      \n      if (!window.ethereum) {\n        console.log('❌ No ethereum provider found')\n        return\n      }\n\n      try {\n        // Set timeout for wallet check\n        const timeoutPromise = new Promise((_, reject) => {\n          timeoutRef.current = setTimeout(() => {\n            reject(new Error('Wallet check timeout'))\n          }, WALLET_CHECK_TIMEOUT)\n        })\n\n        // Race between wallet check and timeout\n        const accounts = await Promise.race([\n          window.ethereum.request({ method: 'eth_accounts' }),\n          timeoutPromise\n        ]) as string[]\n\n        clearTimeout(timeoutRef.current)\n        \n        const isConnected = accounts && accounts.length > 0\n        const address = isConnected ? accounts[0] : undefined\n        const chainId = isConnected ? \n          await window.ethereum.request({ method: 'eth_chainId' }) : undefined\n\n\n        if (isConnected && address) {\n          \n          // Check for existing profile\n          const profile = await getProfileByAddress(address as Address, chainId as number)\n\n          setState(prev => ({\n            ...prev,\n            walletAddress: address,\n            chainId: chainId ? parseInt(chainId as string) : undefined,\n            currentStep: profile ? OnboardingStep.COMPLETED : OnboardingStep.PROFILE_CREATION,\n            isCompleted: !!profile,\n            profileId: profile?.tokenId\n          }))\n\n          // Update wallet data atomically\n          const walletData = { \n            isConnected, \n            address, \n            chainId,\n            profileId: profile?.tokenId \n          }\n          localStorage.setItem('wallet_data', JSON.stringify(walletData))\n          \n          retryCount.current = 0 // Reset retry count on success\n        } else {\n          throw new Error('No wallet connected')\n        }\n      } catch (error) {\n        console.error('❌ Error checking wallet connection:', error)\n        \n        // Clear timeout if it exists\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n\n        // Retry logic\n        if (retryCount.current < MAX_RETRIES) {\n          retryCount.current++\n          setTimeout(checkWalletConnection, 1000) // Retry after 1 second\n        } else {\n          console.log('❌ Max retries reached, resetting to initial state')\n          setState(prev => ({\n            ...prev,\n            walletAddress: undefined,\n            chainId: undefined,\n            currentStep: OnboardingStep.WALLET_CONNECTION\n          }))\n        }\n      }\n    }\n\n    checkWalletConnection()\n\n    // Listen for account and chain changes\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', checkWalletConnection)\n      window.ethereum.on('chainChanged', checkWalletConnection)\n      \n      return () => {\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n        window.ethereum.removeListener('accountsChanged', checkWalletConnection)\n        window.ethereum.removeListener('chainChanged', checkWalletConnection)\n      }\n    }\n  }, []) // Empty dependency array since we want this to run only on mount\n\n  // Save state changes to localStorage\n  useEffect(() => {\n    localStorage.setItem(ONBOARDING_STORAGE_KEY, JSON.stringify(state))\n  }, [state])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  const getCurrentStep = useCallback((): OnboardingStep => {\n    \n    // Check wallet data from localStorage to ensure sync\n    const walletData = localStorage.getItem('wallet_data')\n    const { isConnected, address, profileId } = walletData ? JSON.parse(walletData) : {}\n    \n    if (!isConnected || !address) {\n      return OnboardingStep.WALLET_CONNECTION\n    }\n    \n    if (!profileId) {\n      return OnboardingStep.PROFILE_CREATION\n    }\n    \n    if (!state.isCompleted) {\n      return OnboardingStep.FOLLOW_SUGGESTIONS\n    }\n    \n    return OnboardingStep.COMPLETED\n  }, [state])\n\n  const updateWalletInfo = useCallback(async (walletAddress: string, chainId: number) => {\n    \n    // Check for existing profile\n    const profile = await getProfileByAddress(walletAddress as Address, chainId as number)\n\n    setState(prev => ({\n      ...prev,\n      walletAddress,\n      chainId,\n      currentStep: profile ? OnboardingStep.COMPLETED : OnboardingStep.PROFILE_CREATION,\n      isCompleted: !!profile,\n      profileId: profile?.tokenId\n    }))\n    \n    localStorage.setItem('wallet_data', JSON.stringify({\n      isConnected: true,\n      address: walletAddress,\n      chainId,\n      profileId: profile?.tokenId\n    }))\n  }, [])\n\n  const clearWalletInfo = useCallback(() => {\n    setState(INITIAL_ONBOARDING_STATE)\n    localStorage.removeItem('wallet_data')\n    localStorage.removeItem(ONBOARDING_STORAGE_KEY)\n  }, [])\n\n  const updateProfileId = useCallback((profileId: string) => {\n    setState(prev => ({\n      ...prev,\n      profileId,\n      currentStep: OnboardingStep.FOLLOW_SUGGESTIONS\n    }))\n  }, [])\n\n  const completeOnboarding = useCallback(() => {\n    setState(prev => ({\n      ...prev,\n      currentStep: OnboardingStep.COMPLETED,\n      isCompleted: true\n    }))\n  }, [])\n\n  const resetOnboarding = useCallback(() => {\n    setState(INITIAL_ONBOARDING_STATE)\n    localStorage.removeItem('wallet_data')\n    localStorage.removeItem(ONBOARDING_STORAGE_KEY)\n  }, [])\n\n  return {\n    ...state,\n    getCurrentStep,\n    updateWalletInfo,\n    clearWalletInfo,\n    updateProfileId,\n    completeOnboarding,\n    resetOnboarding\n  }\n} ","import React, { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useProfile } from '../hooks/useProfile'\nimport { useOnboarding } from '../hooks/useOnboarding'\nimport { COLORS, SPACING, BORDER_RADIUS, SHADOWS } from '../constants/theme'\n\ninterface ProfileFormData {\n  username: string\n  avatar: string\n  bio: string\n}\n\nconst inputStyles = {\n  base: `block w-full rounded-lg border-2 shadow-sm \n    focus:ring-2 focus:ring-opacity-50 focus:outline-none\n    transition-colors duration-200`,\n  default: `border-gray-700 bg-gray-900 text-white placeholder-gray-500\n    focus:border-green-500 focus:ring-green-500/20`,\n  error: `border-red-500 bg-gray-900 text-white placeholder-gray-500\n    focus:border-red-500 focus:ring-red-500/20`,\n  disabled: `border-gray-600 bg-gray-800 text-gray-400 cursor-not-allowed`\n}\n\nconst buttonStyles = {\n  base: `w-full flex justify-center items-center py-3 px-6 rounded-lg font-medium\n    transition-all duration-200 ease-in-out transform`,\n  primary: `bg-green-500 hover:bg-green-600 active:bg-green-700 \n    text-white shadow-lg shadow-green-500/20 \n    hover:shadow-green-500/30 hover:-translate-y-0.5`,\n  secondary: `bg-gray-800 hover:bg-gray-700 active:bg-gray-600\n    text-gray-300 hover:text-white border border-gray-700\n    hover:border-gray-600`,\n  disabled: `bg-gray-600 text-gray-300 cursor-not-allowed opacity-50`\n}\n\nexport const ProfileCreation: React.FC = () => {\n  const navigate = useNavigate()\n  const { createProfile, skipProfileCreation, hasSkippedProfileCreation, checkProfileOwnership } = useProfile()\n  const { updateProfileId, completeOnboarding } = useOnboarding()\n  const [isLoading, setIsLoading] = useState(false)\n  const [isSkipping, setIsSkipping] = useState(false)\n  const [existingProfile, setExistingProfile] = useState<{ tokenId: string; username: string } | null>(null)\n  const [formData, setFormData] = useState<ProfileFormData>({\n    username: '',\n    avatar: '',\n    bio: ''\n  })\n\n  useEffect(() => {\n    // Check if user has already skipped or has a profile\n    const checkStatus = async () => {\n      const walletClient = await window.ethereum?.request({ method: 'eth_requestAccounts' })\n      if (walletClient?.[0]) {\n        const hasSkipped = await hasSkippedProfileCreation(walletClient[0])\n        if (hasSkipped) {\n          completeOnboarding()\n          navigate('/dashboard')\n          return\n        }\n\n        // Check for existing profile\n        const profile = await checkProfileOwnership(walletClient[0])\n        if (profile) {\n          setExistingProfile({ tokenId: profile.tokenId, username: profile.username })\n          setFormData(prev => ({\n            ...prev,\n            username: profile.username,\n            avatar: profile.metadata?.avatar || '',\n            bio: profile.metadata?.bio || ''\n          }))\n          // If username exists, mark onboarding as complete\n          updateProfileId(profile.tokenId)\n          completeOnboarding()\n          navigate('/dashboard')\n        }\n      }\n    }\n    checkStatus()\n  }, [hasSkippedProfileCreation, checkProfileOwnership, completeOnboarding, navigate, updateProfileId])\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const metadata = JSON.stringify({\n        avatar: formData.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${formData.username}`,\n        bio: formData.bio,\n        createdAt: Date.now()\n      });\n\n      const hash = await createProfile(formData.username, metadata);\n      if (hash) {\n        updateProfileId(hash.toString());\n        navigate('/onboarding/follow');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const handleSkip = async () => {\n    setIsSkipping(true)\n    try {\n      const skipped = await skipProfileCreation()\n      if (skipped) {\n        completeOnboarding()\n        navigate('/dashboard')\n      }\n    } finally {\n      setIsSkipping(false)\n    }\n  }\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target\n    setFormData(prev => ({ ...prev, [name]: value }))\n  }\n\n  if (existingProfile) {\n    return (\n      <div className=\"w-full max-w-lg mx-auto px-4 py-8\">\n        <div className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl border border-gray-700/50 shadow-xl\">\n          <h2 className=\"text-3xl font-bold mb-8 text-white text-center\">\n            Profile Already Exists\n          </h2>\n          <p className=\"text-gray-300 text-center mb-6\">\n            You already have a profile with username: <span className=\"text-green-500 font-semibold\">{existingProfile.username}</span>\n          </p>\n          <button\n            onClick={() => navigate('/dashboard')}\n            className={buttonStyles.primary}\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full max-w-lg mx-auto px-4 py-8\">\n      <div className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl border border-gray-700/50 shadow-xl\">\n        <h2 className=\"text-3xl font-bold mb-8 text-white text-center\">\n          Create Your Profile\n        </h2>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Username Input */}\n          <div className=\"space-y-2\">\n            <label \n              htmlFor=\"username\" \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Username\n            </label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              id=\"username\"\n              required\n              value={formData.username}\n              onChange={handleChange}\n              disabled={!!existingProfile}\n              className={`${inputStyles.base} ${existingProfile ? inputStyles.disabled : inputStyles.default}`}\n              placeholder=\"Enter your username\"\n            />\n          </div>\n\n          {/* Avatar Selection */}\n          <div className=\"space-y-2\">\n            <label \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Avatar\n            </label>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <img\n                  src={formData.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${formData.username || 'default'}`}\n                  alt=\"Avatar preview\"\n                  className=\"w-20 h-20 rounded-full bg-gray-700 ring-2 ring-green-500/20\"\n                />\n                <div className=\"absolute inset-0 rounded-full shadow-inner\"></div>\n              </div>\n              <input\n                type=\"text\"\n                name=\"avatar\"\n                value={formData.avatar}\n                onChange={handleChange}\n                className={`${inputStyles.base} ${inputStyles.default}`}\n                placeholder=\"Avatar URL (optional)\"\n              />\n            </div>\n          </div>\n\n          {/* Bio Input */}\n          <div className=\"space-y-2\">\n            <label \n              htmlFor=\"bio\" \n              className=\"block text-sm font-medium text-gray-200\"\n            >\n              Bio\n            </label>\n            <textarea\n              name=\"bio\"\n              id=\"bio\"\n              rows={3}\n              value={formData.bio}\n              onChange={handleChange}\n              className={`${inputStyles.base} ${inputStyles.default} resize-none`}\n              placeholder=\"Tell us about yourself\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-4\">\n            <button\n              type=\"submit\"\n              disabled={isLoading || !!existingProfile}\n              className={`${buttonStyles.base} ${\n                isLoading || existingProfile ? buttonStyles.disabled : buttonStyles.primary\n              }`}\n            >\n              {isLoading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Creating Profile...\n                </>\n              ) : (\n                'Create Profile'\n              )}\n            </button>\n\n            {!existingProfile && (\n              <button\n                type=\"button\"\n                onClick={handleSkip}\n                disabled={isSkipping}\n                className={`${buttonStyles.base} ${\n                  isSkipping ? buttonStyles.disabled : buttonStyles.secondary\n                }`}\n              >\n                {isSkipping ? 'Skipping...' : 'Skip for now'}\n              </button>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n} \n","import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useOnboarding } from '../hooks/useOnboarding'\n\n// Mock data for suggested users\nconst SUGGESTED_USERS = [\n  {\n    id: '1',\n    username: 'alice',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=alice',\n    bio: 'Web3 Developer & DeFi enthusiast'\n  },\n  {\n    id: '2',\n    username: 'bob',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=bob',\n    bio: 'NFT Artist & Collector'\n  },\n  {\n    id: '3',\n    username: 'charlie',\n    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=charlie',\n    bio: 'Blockchain Researcher'\n  }\n]\n\nexport const FollowSuggestions: React.FC = () => {\n  const navigate = useNavigate()\n  const { completeOnboarding } = useOnboarding()\n  const [selectedUsers, setSelectedUsers] = useState<Set<string>>(new Set())\n\n  const toggleUser = (userId: string) => {\n    setSelectedUsers(prev => {\n      const newSet = new Set(prev)\n      if (newSet.has(userId)) {\n        newSet.delete(userId)\n      } else {\n        newSet.add(userId)\n      }\n      return newSet\n    })\n  }\n\n  const handleComplete = () => {\n    // Here you would typically make API calls to follow the selected users\n    // For now, we'll just complete the onboarding\n    completeOnboarding()\n    navigate('/dashboard')\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">\n          Follow some interesting people\n        </h2>\n        <p className=\"mt-2 text-sm text-gray-600\">\n          Follow at least 3 people to get started\n        </p>\n      </div>\n\n      <div className=\"space-y-4\">\n        {SUGGESTED_USERS.map(user => (\n          <div\n            key={user.id}\n            className={`flex items-center justify-between p-4 rounded-lg border ${\n              selectedUsers.has(user.id)\n                ? 'border-green-500 bg-green-50'\n                : 'border-gray-200'\n            }`}\n          >\n            <div className=\"flex items-center space-x-4\">\n              <img\n                src={user.avatar}\n                alt={user.username}\n                className=\"w-12 h-12 rounded-full\"\n              />\n              <div>\n                <h3 className=\"font-medium text-gray-900\">@{user.username}</h3>\n                <p className=\"text-sm text-gray-500\">{user.bio}</p>\n              </div>\n            </div>\n            <button\n              onClick={() => toggleUser(user.id)}\n              className={`px-4 py-2 rounded-full text-sm font-medium ${\n                selectedUsers.has(user.id)\n                  ? 'bg-green-500 text-white'\n                  : 'bg-gray-100 text-gray-900'\n              }`}\n            >\n              {selectedUsers.has(user.id) ? 'Following' : 'Follow'}\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex justify-between\">\n        <button\n          onClick={() => navigate('/dashboard')}\n          className=\"text-gray-600 hover:text-gray-900\"\n        >\n          Skip for now\n        </button>\n        <button\n          onClick={handleComplete}\n          disabled={selectedUsers.size < 3}\n          className={`px-6 py-2 rounded-full font-medium ${\n            selectedUsers.size >= 3\n              ? 'bg-green-500 text-white hover:bg-green-600'\n              : 'bg-gray-200 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          Continue\n        </button>\n      </div>\n    </div>\n  )\n} ","import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { OnboardingStep } from '../constants/onboarding'\nimport { useOnboarding } from '../hooks/useOnboarding'\nimport { Navigation } from '../components/Navigation'\nimport { WalletConnect } from '../components/WalletConnect'\nimport { ProfileCreation } from './ProfileCreation'\nimport { FollowSuggestions } from '../components/FollowSuggestions'\n\nexport const Onboarding: React.FC = () => {\n  const { getCurrentStep } = useOnboarding()\n  const currentStep = getCurrentStep()\n\n  // If onboarding is completed, redirect to dashboard\n  if (currentStep === OnboardingStep.COMPLETED) {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  // Render the appropriate component based on current step\n  const renderStep = () => {\n    switch (currentStep) {\n      case OnboardingStep.WALLET_CONNECTION:\n        return <WalletConnect />\n      case OnboardingStep.PROFILE_CREATION:\n        return <ProfileCreation />\n      case OnboardingStep.FOLLOW_SUGGESTIONS:\n        return <FollowSuggestions />\n      default:\n        return null\n    }\n  }\n\n  return (\n    <>\n      <style>\n        {`\n          body {\n            background-color: #111827;\n            min-height: 100vh;\n            margin: 0;\n          }\n        `}\n      </style>\n      <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-gray-900 to-black\">\n        <Navigation onMenuClick={() => {}} />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"w-full\">\n            {renderStep()}\n          </div>\n        </main>\n      </div>\n    </>\n  )\n} ","import React from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Info } from 'lucide-react';\n\n// Comment out the extended interfaces for now\n// We will properly map topics to post tags in a future implementation\n\n/**\n * TopicsView - Display a global view of topics across the platform\n * \n * TODO: Implement proper mapping between topics and post tags\n */\nexport function TopicsView() {\n  const { topicId } = useParams();\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        <div className=\"bg-gray-800/30 border border-gray-700/50 rounded-xl p-6 text-center\">\n          <Info className=\"w-12 h-12 mx-auto text-blue-400 mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-2\">Topics View</h1>\n          <p className=\"text-gray-300 mb-4\">\n            This feature is currently under development. Topics will soon be mapped to post tags \n            to provide a unified view of content across tribes.\n          </p>\n          <p className=\"text-gray-400\">\n            Topic ID: {topicId || 'None selected'}\n          </p>\n          <div className=\"mt-6\">\n            <Link \n              to=\"/\"\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Return to Home\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n} ","import { TopicsView } from '../components/topics/TopicsView';\n\nexport function TopicDetails() {\n  return <TopicsView />;\n} ","import { ReactNode, useEffect, useState, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useProfile } from '../hooks/useProfile';\nimport { getWalletClient } from '../config/contracts';\nimport { useNetwork } from '../hooks/useNetwork';\nimport { FUSE_EMBER } from '../constants/networks';\nimport { useTribesSDK } from '../contexts/TribesContext';\n\ninterface AuthGuardProps {\n  children: ReactNode;\n}\n\nconst STORAGE_KEY = 'tribes_auth_state';\nconst DEBUG = true; // Toggle debugging\n\ninterface AuthState {\n  address: string;\n  chainId: number;\n  profile?: {\n    tokenId: string;\n    username: string;\n    metadata: {\n      uri: string;\n    };\n  };\n  timestamp: number;\n}\n\n// Debug function to track auth flow\nconst logDebug = (message: string, data?: any) => {\n  if (!DEBUG) return;\n  const timestamp = new Date().toISOString().split('T')[1].split('.')[0];\n  if (data) {\n    console.log(`[AuthGuard:${timestamp}] ${message}`, data);\n  } else {\n    console.log(`[AuthGuard:${timestamp}] ${message}`);\n  }\n};\n\nexport const AuthGuard = ({ children }: AuthGuardProps) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { getProfileByAddress, isLoading: isSdkLoading } = useProfile();\n  const { chainId, switchNetwork } = useNetwork();\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastCheckedChainId, setLastCheckedChainId] = useState<number>();\n  const [retryCount, setRetryCount] = useState(0);\n  const profileCheckInProgress = useRef(false);\n  const MAX_RETRIES = 3;\n  const SDK_INIT_TIMEOUT = 5000; // 5 seconds timeout for SDK initialization\n  const { sdk, isInitialized } = useTribesSDK();\n  \n  // Track navigation attempts to prevent loops\n  const navigationAttempts = useRef(new Map<string, number>());\n  const MAX_NAVIGATION_ATTEMPTS = 3;\n  const sdkInitTimer = useRef<NodeJS.Timeout>();\n\n  // Load stored auth state\n  const loadStoredAuthState = (): AuthState | null => {\n    try {\n      // First check tribes_auth_state\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const state = JSON.parse(stored) as AuthState;\n        // Check if stored state is less than 1 hour old\n        if (Date.now() - state.timestamp <= 3600000) {\n          logDebug('Found valid tribes_auth_state', { address: state.address, chainId: state.chainId });\n          return state;\n        }\n        localStorage.removeItem(STORAGE_KEY);\n        logDebug('Removed expired tribes_auth_state');\n      }\n\n      // If no valid tribes_auth_state, check tribes_auth and tribes_profile\n      const authData = localStorage.getItem('tribes_auth');\n      const profileData = localStorage.getItem('tribes_profile');\n      \n      if (authData) {\n        const auth = JSON.parse(authData);\n        const profile = profileData ? JSON.parse(profileData) : null;\n        \n        if (auth.isConnected && auth.address) {\n          const state = {\n            address: auth.address,\n            chainId: chainId || 0,\n            profile: profile ? {\n              tokenId: profile.tokenId?.toString() || '0',\n              username: profile.username || '',\n              metadata: {\n                uri: profile.avatarNFT || ''\n              }\n            } : undefined,\n            timestamp: Date.now()\n          };\n          logDebug('Created auth state from tribes_auth/profile', { address: state.address });\n          return state;\n        }\n      }\n      \n      logDebug('No valid auth state found');\n      return null;\n    } catch (err) {\n      console.error('Failed to load stored auth state:', err);\n      return null;\n    }\n  };\n\n  // Save auth state\n  const saveAuthState = (state: AuthState) => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        ...state,\n        timestamp: Date.now()\n      }));\n      logDebug('Saved auth state', { address: state.address, chainId: state.chainId });\n    } catch (err) {\n      console.error('Failed to save auth state:', err);\n    }\n  };\n  \n  // Safe navigation that prevents loops\n  const safeNavigate = (path: string) => {\n    if (location.pathname === path) {\n      logDebug(`Already at ${path}, not navigating`);\n      return;\n    }\n    \n    const currentCount = navigationAttempts.current.get(path) || 0;\n    if (currentCount >= MAX_NAVIGATION_ATTEMPTS) {\n      logDebug(`Too many navigation attempts to ${path}, stopping`);\n      setIsLoading(false);\n      return;\n    }\n    \n    navigationAttempts.current.set(path, currentCount + 1);\n    logDebug(`Navigating to ${path} (attempt ${currentCount + 1})`);\n    navigate(path);\n  };\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      // Reset navigation attempts when pathname changes\n      if (location.pathname !== '/connect') {\n        navigationAttempts.current.delete('/connect');\n      }\n      \n      // Skip check if SDK is still loading or not initialized\n      if (isSdkLoading || !sdk || !isInitialized) {\n        logDebug('SDK not ready, waiting...', { isSdkLoading, hasSdk: !!sdk, isInitialized });\n        return;\n      }\n\n      // Clear any existing SDK init timer\n      if (sdkInitTimer.current) {\n        clearTimeout(sdkInitTimer.current);\n      }\n\n      // Prevent multiple simultaneous profile checks\n      if (profileCheckInProgress.current) {\n        logDebug('Profile check already in progress, skipping');\n        return;\n      }\n\n      try {\n        profileCheckInProgress.current = true;\n        logDebug(`Starting auth check on path: ${location.pathname}, chainId: ${chainId}`);\n\n        // Skip check if we're already on connect, create-profile, or username-setup routes\n        if (['/connect', '/create-profile', '/username-setup'].includes(location.pathname)) {\n          logDebug('On auth/profile page, skipping check');\n          setIsLoading(false);\n          return;\n        }\n\n        // If chain hasn't changed and we're not retrying, don't recheck\n        if (chainId === lastCheckedChainId && retryCount === 0) {\n          logDebug('Chain ID unchanged and not retrying, skipping check');\n          return;\n        }\n\n        setIsLoading(true);\n\n        // Try to get wallet client first\n        let walletClient;\n        try {\n          logDebug('Getting wallet client');\n          walletClient = await getWalletClient(chainId);\n        } catch (error) {\n          logDebug('No wallet connected, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        const [address] = await walletClient.getAddresses();\n        if (!address) {\n          logDebug('No address in wallet client, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n        logDebug('Found wallet address', { address });\n\n        // Load stored auth state first\n        const storedState = loadStoredAuthState();\n        if (storedState?.profile && storedState.address === address && storedState.chainId === chainId) {\n          logDebug('Valid stored auth state found, proceeding');\n          // If we have a valid stored state and we're not on profile creation pages, proceed\n          if (location.pathname === '/create-profile' || location.pathname === '/username-setup') {\n            logDebug('On profile creation page with valid profile, redirecting to dashboard');\n            safeNavigate('/dashboard');\n          }\n          setIsLoading(false);\n          return;\n        }\n\n        // Ensure we're on a supported chain\n        if (!chainId) {\n          if (retryCount < MAX_RETRIES) {\n            logDebug('No chainId, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            return;\n          }\n          logDebug('No chainId after max retries, switching network');\n          await switchNetwork(FUSE_EMBER.id);\n          setRetryCount(0);\n          return;\n        }\n\n        setLastCheckedChainId(chainId);\n        logDebug('Checking profile on chain', { chainId, address });\n\n        // Check for profile on current chain\n        const { profile, error } = await getProfileByAddress(address);\n        \n        if (error) {\n          logDebug('Profile check returned error', { code: error.code });\n          \n          // If SDK is not initialized, wait and retry\n          if (error.code === 'SDK_NOT_INITIALIZED' && retryCount < MAX_RETRIES) {\n            logDebug('SDK not initialized, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            // Set a timeout to retry\n            sdkInitTimer.current = setTimeout(() => {\n              setRetryCount(prev => prev + 1);\n            }, 1000);\n            return;\n          }\n        }\n\n        if (error?.code === 'WRONG_CHAIN') {\n          if (retryCount < MAX_RETRIES) {\n            logDebug('Wrong chain, retrying', { retryCount });\n            setRetryCount(prev => prev + 1);\n            return;\n          }\n          logDebug('Wrong chain after max retries, redirecting to connect');\n          safeNavigate('/connect');\n          setRetryCount(0);\n          return;\n        }\n\n        // Reset retry count on successful chain connection\n        setRetryCount(0);\n\n        if (error?.code === 'NO_PROFILE') {\n          logDebug('No profile found, redirecting to create-profile');\n          // Only redirect to create-profile if we're not already there\n          if (location.pathname !== '/create-profile') {\n            safeNavigate('/create-profile');\n          }\n          setIsLoading(false);\n          return;\n        }\n\n        if (!profile) {\n          logDebug('No profile and no specific error, redirecting to connect');\n          safeNavigate('/connect');\n          return;\n        }\n\n        logDebug('Profile found, saving auth state', { username: profile.username });\n        // Save successful auth state\n        saveAuthState({\n          address,\n          chainId,\n          profile: {\n            tokenId: profile.tokenId,\n            username: profile.username,\n            metadata: {\n              uri: profile.metadata?.avatar || ''\n            }\n          },\n          timestamp: Date.now()\n        });\n\n        // If we have a profile and we're on create-profile, redirect to dashboard\n        if (location.pathname === '/create-profile') {\n          logDebug('On profile creation page with valid profile, redirecting to dashboard');\n          safeNavigate('/dashboard');\n        }\n\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        if (retryCount < MAX_RETRIES) {\n          logDebug('Auth check error, retrying', { retryCount });\n          setRetryCount(prev => prev + 1);\n          return;\n        }\n        logDebug('Auth check failed after max retries, redirecting to connect');\n        safeNavigate('/connect');\n        setRetryCount(0);\n      } finally {\n        profileCheckInProgress.current = false;\n        if (retryCount >= MAX_RETRIES) {\n          logDebug('Max retries reached, stopping loading');\n          setIsLoading(false);\n          setRetryCount(0);\n        }\n      }\n    };\n\n    checkAuth();\n\n    // Cleanup timer on unmount\n    return () => {\n      if (sdkInitTimer.current) {\n        clearTimeout(sdkInitTimer.current);\n      }\n    };\n  }, [chainId, location.pathname, isSdkLoading, sdk, isInitialized]);\n\n  if (isLoading || isSdkLoading || !sdk || !isInitialized) {\n    logDebug('Rendering loading state', { isLoading, isSdkLoading, hasSdk: !!sdk, isInitialized });\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  logDebug('Rendering children');\n  return <>{children}</>;\n}; ","// Define CSS variables in :root\nconst cssVariables = `\n:root {\n  /* Blockchain brand colors */\n  --monad-green: #4ADE80;\n  --monad-dark-green: #22c55e;\n  --monad-bg: #0F2416;\n  --monad-bg-rgb: 15, 36, 22;\n  --fuse-blue: #1E88FA;\n  --fuse-gold: #F9C846;\n  --fuse-dark-blue: #0D2B47;\n  --fuse-bg: #0A1F35;\n  --fuse-bg-rgb: 10, 31, 53;\n  --text-primary: #FBFAF9;\n  --text-secondary: rgba(251, 250, 249, 0.7);\n  --text-disabled: rgba(251, 250, 249, 0.5);\n  --success-main: #22c55e;\n  --error-main: #ef4444;\n  \n  /* Set chain-specific colors - default to Monad */\n  --chain-primary: var(--monad-green);\n  --chain-secondary: var(--monad-dark-green);\n  --chain-bg: var(--monad-bg);\n  --chain-bg-rgb: var(--monad-bg-rgb);\n  --chain-accent: rgba(74, 222, 128, 0.2);\n}\n`;\n\n// Add cssVariables to your index.css or inject it into the document head\nconst style = document.createElement('style');\nstyle.textContent = cssVariables;\ndocument.head.appendChild(style);\n\n// Chain IDs\nexport const MONAD_DEVNET_ID = 20143;\nexport const FUSE_EMBER_ID = 1264453517;\n\n// Function to update chain colors based on current chain\nexport const updateChainColors = (chainId: number) => {\n  if (chainId === MONAD_DEVNET_ID) {\n    document.documentElement.style.setProperty('--chain-primary', 'var(--monad-green)');\n    document.documentElement.style.setProperty('--chain-secondary', 'var(--monad-dark-green)');\n    document.documentElement.style.setProperty('--chain-bg', 'var(--monad-bg)');\n    document.documentElement.style.setProperty('--chain-bg-rgb', 'var(--monad-bg-rgb)');\n    document.documentElement.style.setProperty('--chain-accent', 'rgba(74, 222, 128, 0.2)');\n    document.documentElement.style.setProperty('--theme-color', '#4ADE80');\n    // Update theme-color meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', '#4ADE80');\n    }\n  } else if (chainId === FUSE_EMBER_ID) {\n    document.documentElement.style.setProperty('--chain-primary', 'var(--fuse-gold)');\n    document.documentElement.style.setProperty('--chain-secondary', 'var(--fuse-dark-blue)');\n    document.documentElement.style.setProperty('--chain-bg', 'var(--fuse-bg)');\n    document.documentElement.style.setProperty('--chain-bg-rgb', 'var(--fuse-bg-rgb)');\n    document.documentElement.style.setProperty('--chain-accent', 'rgba(249, 200, 70, 0.2)');\n    document.documentElement.style.setProperty('--theme-color', '#F9C846');\n    // Update theme-color meta tag for browser UI\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', '#F9C846');\n    }\n  }\n};\n\nexport const COLORS = {\n  primary: {\n    light: 'var(--chain-primary)',\n    main: 'var(--chain-primary)',\n    dark: 'var(--chain-secondary)',\n    contrastText: 'var(--text-primary)'\n  },\n  secondary: {\n    light: 'var(--text-primary)',\n    main: 'var(--chain-primary)',\n    dark: 'var(--chain-secondary)',\n    contrastText: 'var(--text-primary)'\n  },\n  background: {\n    default: 'var(--chain-bg)',\n    paper: 'var(--chain-bg)',\n    accent: 'var(--chain-primary)'\n  },\n  text: {\n    primary: 'var(--text-primary)',\n    secondary: 'var(--text-secondary)',\n    disabled: 'var(--text-disabled)'\n  },\n  error: {\n    main: 'var(--error-main)',\n    dark: '#dc2626',\n    contrastText: 'var(--text-primary)'\n  },\n  success: {\n    main: 'var(--success-main)',\n    dark: '#16a34a',\n    contrastText: 'var(--text-primary)'\n  },\n  monad: {\n    green: 'var(--monad-green)',\n    darkGreen: 'var(--monad-dark-green)',\n    bg: 'var(--monad-bg)',\n    purple: 'var(--monad-purple)'\n  },\n  fuse: {\n    gold: 'var(--fuse-gold)',\n    blue: 'var(--fuse-blue)',\n    darkBlue: 'var(--fuse-dark-blue)',\n    bg: 'var(--fuse-bg)'\n  }\n}\n\nexport const FONTS = {\n  primary: 'Inter, sans-serif',\n  weights: {\n    regular: 400,\n    medium: 500,\n    semibold: 600,\n    bold: 700\n  }\n}\n\nexport const SPACING = {\n  xs: '0.5rem',\n  sm: '0.75rem',\n  md: '1rem',\n  lg: '1.5rem',\n  xl: '2rem',\n  '2xl': '3rem'\n}\n\nexport const BORDER_RADIUS = {\n  sm: '0.375rem',\n  md: '0.5rem',\n  lg: '0.75rem',\n  full: '9999px'\n}\n\nexport const TRANSITIONS = {\n  default: 'all 0.2s ease-in-out'\n}\n\nexport const SHADOWS = {\n  sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',\n  md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',\n  lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',\n  green: '0 4px 14px 0 rgba(74, 222, 128, 0.3)',\n  gold: '0 4px 14px 0 rgba(249, 200, 70, 0.3)'\n} ","import { getIndexerService } from '../services';\nimport { PostsService } from '../services/posts.service';\n// import { DBService } from '../services/db.service';\n// import { QueueService } from '../services/queue.service';\nimport { blockchain } from '../utils/blockchainUtils';\nimport { TribesSDK } from '../services/TribesSDK';\nimport { MONAD_DEVNET } from '../constants/networks';\n\nconst INIT_TIMEOUT = 30000; // 30 seconds timeout (increased from 10 seconds)\n\n/**\n * Initialize the application services\n * This should be called once when the app starts\n */\nexport async function initializeApp(): Promise<void> {\n  // Check if running on server\n  const isServer = typeof window === 'undefined';\n  if (isServer) {\n    console.log('Initializing server-side services');\n    return;\n  }\n\n  // Create a promise that rejects after timeout\n  const timeoutPromise = new Promise((_, reject) => {\n    setTimeout(() => reject(new Error('Initialization timed out')), INIT_TIMEOUT);\n  });\n\n  try {\n    // Race between initialization and timeout\n    await Promise.race([\n      initializeServices(),\n      timeoutPromise\n    ]);\n  } catch (error) {\n    console.error('App initialization failed:', error);\n    // Initialize with fallback mode instead of throwing error\n    await initializeFallbackMode();\n  }\n}\n\n/**\n * Initialize in fallback mode when main initialization fails\n */\nasync function initializeFallbackMode(): Promise<void> {\n  console.log('Initializing in fallback mode...');\n  \n  // Initialize with default chain ID\n  const chainId = MONAD_DEVNET.id;\n  console.log('Using default chain ID:', chainId);\n  \n  // Initialize minimum required services \n  const indexerService = getIndexerService(chainId);\n  \n  // Initialize TribesSDK in fallback mode\n  try {\n    const tribesSDK = new TribesSDK(chainId);\n    await tribesSDK.initialize().catch(err => {\n      console.warn('Failed to initialize TribesSDK in fallback mode', err);\n    });\n  } catch (err) {\n    console.warn('Error creating TribesSDK in fallback mode', err);\n  }\n  \n  // Initialize PostsService\n  PostsService.getInstance();\n  \n  console.log('Fallback initialization complete');\n}\n\nasync function initializeServices(): Promise<void> {\n  try {\n    console.log('Initializing client-side services');\n    \n    // Initialize with default chain ID first in case blockchain connection fails\n    let chainId: number = MONAD_DEVNET.id;\n    let indexerService = getIndexerService(chainId);\n    console.log('[IndexerService] Pre-initializing with default chainId:', chainId);\n    \n    // First, try to connect to blockchain\n    try {\n      console.log('Connecting to blockchain...');\n      await blockchain.connect();\n      const newChainId = await blockchain.getChainId();\n      console.log('Successfully connected to blockchain with chainId:', newChainId);\n      \n      // Update indexer with actual chain ID\n      chainId = newChainId;\n      indexerService = getIndexerService(chainId);\n      console.log('[IndexerService] Initializing with chainId:', chainId);\n      \n      // Initialize TribesSDK\n      const tribesSDK = new TribesSDK(chainId);\n      // Don't await the initialization to prevent timeouts\n      tribesSDK.initialize().catch(err => {\n        console.warn('TribesSDK initialization had an error, but app will continue:', err);\n      });\n      console.log('[TribesSDK] Initialization started with chainId:', chainId);\n      \n      // Initialize PostsService\n      const postsService = PostsService.getInstance();\n      // No need to initialize PostsService as it doesn't have an initialize method\n      console.log('[PostsService] Initialized with chainId:', chainId);\n      \n      // Start indexing in the background\n      setTimeout(async () => {\n        try {\n          const address = await blockchain.getAddress();\n          if (address) {\n            indexerService.setConnectedUser(address);\n          }\n        } catch (err) {\n          console.warn('Failed to set connected user in indexer:', err);\n        }\n      }, 2000); // Delay start to ensure app is fully loaded\n    } catch (error) {\n      console.warn('Failed to connect to blockchain. Some features may not work:', error);\n      // Continue with initialization even if blockchain connection fails\n      // We already initialized with default chain ID above\n    }\n    \n    console.log('App services initialized successfully');\n  } catch (error) {\n    console.error('Error initializing app services:', error);\n    throw error;\n  }\n}\n\n/**\n * Call this function to manually refresh data\n */\nexport async function refreshData(): Promise<void> {\n  const isServer = typeof window === 'undefined';\n  if (isServer) return;\n  \n  try {\n    const indexerService = getIndexerService();\n    const postsService = PostsService.getInstance();\n    \n    // Refresh connected user data\n    const address = await blockchain.getAddress();\n    if (address) {\n      indexerService.setConnectedUser(address);\n    }\n    \n    console.log('Data refresh initiated');\n  } catch (error) {\n    console.error('Error refreshing data:', error);\n  }\n} ","import React, { useEffect, useState } from 'react'\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'\nimport { Layout } from './components/Layout'\nimport { RootRoute } from './components/RootRoute'\nimport { WalletConnect } from './components/WalletConnect'\nimport { UsernameAvatarSetup } from './screens/UsernameAvatarSetup'\nimport { Dashboard } from './screens/Dashboard'\nimport { Profile } from './screens/Profile'\nimport { Tribes } from './screens/Tribes'\nimport { TribeDetails } from './screens/TribeDetails'\nimport { CreateTribe } from './screens/CreateTribe'\nimport { Onboarding } from './screens/Onboarding'\nimport { TopicDetails } from './screens/TopicDetails'\nimport { AuthGuard } from './components/AuthGuard'\nimport { useChainId } from 'wagmi'\nimport { updateChainColors } from './constants/theme'\nimport { initializeApp } from './utils/initApp'\nimport { TribesSDK } from './services/TribesSDK'\nimport { TribesProvider } from './contexts/TribesContext'\n\nconst App: React.FC = () => {\n  const chainId = useChainId()\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [sdk, setSdk] = useState<TribesSDK | null>(null);\n\n  // Update theme colors when chain changes\n  useEffect(() => {\n    if (chainId) {\n      updateChainColors(chainId)\n    }\n  }, [chainId])\n\n  useEffect(() => {\n    // Initialize app services\n    const init = async () => {\n      try {\n        setIsInitializing(true);\n        // Initialize app services\n        await initializeApp();\n\n        // Initialize TribesSDK\n        const tribesSDK = new TribesSDK(chainId);\n        await tribesSDK.initialize();\n        setSdk(tribesSDK);\n\n        setIsInitialized(true);\n      } catch (error) {\n        console.error('Failed to initialize app:', error);\n        // Even if initialization fails, we should still set isInitialized\n        // to true so the app can render and show appropriate error states\n        setIsInitialized(true);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n\n    init();\n  }, [chainId]);\n\n  if (isInitializing) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <TribesProvider sdk={sdk} isInitialized={isInitialized}>\n      <Router>\n        <Routes>\n          {/* Public Routes */}\n          <Route path=\"/\" element={<RootRoute />} />\n          <Route path=\"/connect\" element={<WalletConnect />} />\n          <Route path=\"/create-profile\" element={<UsernameAvatarSetup />} />\n          <Route path=\"/username-setup\" element={<UsernameAvatarSetup />} />\n          \n          {/* Protected Routes */}\n          <Route element={<AuthGuard><Layout /></AuthGuard>}>\n            <Route path=\"/dashboard\" element={<Dashboard />} />\n            <Route path=\"/profile\" element={<Profile />} />\n            <Route path=\"/tribes\" element={<Tribes />} />\n            <Route path=\"/tribes/create\" element={<CreateTribe />} />\n            <Route path=\"/tribes/:tribeId\" element={<TribeDetails />} />\n            <Route path=\"/tribes/:tribeId/topics/:topicId\" element={<TopicDetails />} />\n            <Route path=\"/onboarding\" element={<Onboarding />} />\n          </Route>\n\n          {/* Catch all redirect */}\n          <Route path=\"*\" element={<Navigate to=\"/dashboard\" replace />} />\n        </Routes>\n      </Router>\n    </TribesProvider>\n  )\n}\n\nexport default App","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MONAD_DEVNET } from '../../constants/networks';\n\ninterface ChainState {\n  chainId: number | undefined;\n  isCorrectNetwork: boolean;\n  isChainSwitching: boolean;\n  lastValidChainId: number | undefined;\n}\n\nconst initialState: ChainState = {\n  chainId: undefined,\n  isCorrectNetwork: false,\n  isChainSwitching: false,\n  lastValidChainId: MONAD_DEVNET.id\n};\n\nconst chainSlice = createSlice({\n  name: 'chain',\n  initialState,\n  reducers: {\n    setChainId: (state, action: PayloadAction<number | undefined>) => {\n      state.chainId = action.payload;\n    },\n    setIsCorrectNetwork: (state, action: PayloadAction<boolean>) => {\n      state.isCorrectNetwork = action.payload;\n    },\n    setIsChainSwitching: (state, action: PayloadAction<boolean>) => {\n      state.isChainSwitching = action.payload;\n    },\n    setLastValidChainId: (state, action: PayloadAction<number>) => {\n      state.lastValidChainId = action.payload;\n    }\n  }\n});\n\nexport const { \n  setChainId, \n  setIsCorrectNetwork, \n  setIsChainSwitching,\n  setLastValidChainId \n} = chainSlice.actions;\n\nexport default chainSlice.reducer; ","import { configureStore } from '@reduxjs/toolkit';\nimport chainReducer from './slices/chainSlice';\nimport postsReducer from './slices/postsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    chain: chainReducer,\n    posts: postsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport './styles/globals.css';\n\n// Import Redux provider\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\n\n// Import notification context\nimport { NotificationProvider } from './contexts/NotificationContext';\nimport { WagmiProvider } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { http, createConfig } from 'wagmi';\nimport { MONAD_DEVNET, FUSE_EMBER } from './constants/networks';\n\n// Create a new query client for react-query (required by wagmi v2)\nconst queryClient = new QueryClient();\n\n// Create wagmi config with the supported chains\n// Note: Using explicit definition of chains to avoid type issues\nconst config = createConfig({\n  chains: [MONAD_DEVNET, FUSE_EMBER] as const,\n  transports: {\n    [MONAD_DEVNET.id]: http(MONAD_DEVNET.rpcUrls.default.http[0]),\n    [FUSE_EMBER.id]: http(FUSE_EMBER.rpcUrls.default.http[0]),\n  },\n});\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* Add WagmiProvider with the config */}\n      <WagmiProvider config={config}>\n        {/* React Query is required by wagmi v2 */}\n        <QueryClientProvider client={queryClient}>\n          {/* Notification provider */}\n          <NotificationProvider>\n            <App />\n          </NotificationProvider>\n        </QueryClientProvider>\n      </WagmiProvider>\n    </Provider>\n  </React.StrictMode>\n);\n"],"names":["MONAD_DEVNET_DECIMAL","FUSE_EMBER_DECIMAL","MONAD_DEVNET","defineChain","FUSE_EMBER","SUPPORTED_CHAINS","getEthereumProvider","error","ABIS","ProfileNFTMinterABI","TribeControllerABI","CollectibleControllerABI","EventControllerABI","CommunityPointsABI","VotingABI","RoleManagerABI","SuperCommunityControllerABI","ContentManagerABI","PostMinterABI","CONTRACT_ADDRESSES","getContractAddresses","chainId","addresses","getCurrentChain","chain","getAddresses","getPublicClient","createPublicClient","http","getWalletClient","provider","account","createWalletClient","custom","getContracts","viemGetPublicClient","configGetContracts","getCurrentChainId","chainIdHex","requestError","getChainConfig","c","extractMetadataFromTransaction","tribeId","publicClient","tribeController","events","waitForTransaction","txHash","blockchain","message","params","contracts","client","postId","optionIndex","attending","comment","metadata","tokenId","username","metadataURI","address","initializeProvider","BrowserProvider","resetProvider","STORAGE_KEY","AUTH_EXPIRATION","isValidAuthState","state","useAuth","setAddress","useState","stored","setChainId","isConnected","setIsConnected","profile","setProfile","_a","_b","isInitializing","setIsInitializing","initializationRef","useRef","providerInitializedRef","useEffect","handleChainChanged","newChainId","handleAccountsChanged","accounts","disconnect","fetchProfile","mounted","chainIdNum","saveAuthState","currentState","parsedState","newState","err","connect","userAddress","result","metadataStr","useNetwork","useAccount","chains","useConfig","isSupported","isCorrectNetwork","switchNetwork","targetChainId","targetChain","Navigation","onMenuClick","navigate","useNavigate","location","useLocation","showDropdown","setShowDropdown","React","handleDisconnect","navigateToDashboard","formatChainName","getChainLogo","getChainLogoAlt","primaryColor","jsxDEV","Menu","ChevronDown","LogOut","Bell","PostType","createBlockchainPost","preparePostMetadata","hash","tempPostId","baseMetadata","_c","initialState","validatePostData","draft","createMetadata","postData","m","o","createPost","createAsyncThunk","rejectWithValue","validation","blockchainResult","fetchPostsByTribe","resolve","dummyPosts","i","postTypeString","postType","post","postsSlice","createSlice","action","confirmed","p","blockchainData","builder","setCreatingPost","setPostType","updateDraft","resetDraft","updatePostStatus","selectPostDraft","selectCreatingPost","selectPostsError","postsReducer","useWallet","connectAsync","useConnect","disconnectAsync","useDisconnect","walletClient","setWalletClient","connectWallet","useCallback","injected","disconnectWallet","parseMetadata","defaultValue","metadataCache","CACHE_TIMEOUT_MS","getMetadataFromCache","key","cachedData","storeMetadataInCache","data","ErrorType","mapTribeDataToUI","tribeData","metadataObj","contractName","metadataName","name","isGenericContractName","hasMetadataName","createdAt","nftRequirements","entryFee","e","_TribeService","__publicField","type","originalError","admins","joinType","trimmedName","tribeCreatedEvent","log","rawConfig","config","rc","parsedMetadata","cacheKey","details","parsed","configView","userStatus","memberAddress","status","nextId","TribeService","ProfileService","profileId","profileNFTMinter","balance","userTokenId","event","skipped","skippedAddress","IndexerService","partialMessage","context","callback","cb","getAddress","timestamp","id","tribe","addr","profileOwner","postMinter","nextPostId","batchSize","totalPosts","batches","start","end","creator","isGated","collectibleContract","collectibleId","isEncrypted","accessSigner","userPosts","tribePosts","nextTribeId","admin","memberCount","tribeName","tribeMetadata","userTribes","code","consecutiveErrors","MAX_CONSECUTIVE_ERRORS","BATCH_SIZE","profilesFound","owner","normalizedOwner","contentType","contentManager","content","author","normalizedAddress","hasProfile","emptyProfile","found","value","TribesSDK","uiTribe","tribes","completeTribe","count","limit","tribeError","fallbackError","profileServiceExists","profileServiceConnected","sdk","useTribesManagement","setSdk","isLoading","setIsLoading","setError","tribesSDK","createTribe","errorMessage","joinTribe","requestToJoinTribe","getTribesCount","useTribesProfile","useChainId","getProfileById","getProfileByUsername","mockProfile","createProfile","updateProfileMetadata","checkUsernameAvailability","validateUsername","cn","inputs","twMerge","clsx","buttonVariants","cva","Button","className","variant","size","leftIcon","rightIcon","children","props","ref","Loader2","this","badgeVariants","Badge","cardVariants","Card","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","DialogTitle","DialogDescription","inputVariants","Input","TribeJoinType","addTribe","TribeCreationForm","onSuccess","onCancel","setName","description","setDescription","avatar","setAvatar","coverImage","setCoverImage","adminInput","setAdminInput","adminUsers","setAdminUsers","setJoinType","setEntryFee","chainError","setChainError","loading","setLoading","adminInputRef","supportedChainIds","detectedChainId","getTribeMetadata","getAdminAddresses","fetchProfileByUsername","addAdminUsername","prev","profileResult","handleSubmit","handleAdminInputKeyDown","removeAdminUsername","AlignLeft","ImageIcon","Users","Globe","Lock","index","POST_TYPE_MAPPING","inputClass","buttonClass","selectedBtnClass","actionBtnClass","PostTypeFields","dispatch","useDispatch","postDraft","useSelector","handleUpdateDraft","compatibleData","renderEventFields","locationType","setLocationType","defaultLocation","getLocationObject","handleLocationTypeChange","currentLocation","newLocation","_d","_e","_f","fixPhysicalLocation","fixVirtualLocation","fixMaxTickets","fixPrice","format","eventDetails","renderPollFields","newOption","setNewOption","currentOptions","handleAddOption","newPollOption","handleRemoveOption","newOptions","filterByIndex","fixPollEndDate","fixPollMultipleChoices","option","Trash","Plus","renderProjectFields","handleRemoveMilestone","newMilestones","item","milestone","renderResourceFields","handleRemoveAttachment","newAttachments","attachment","Upload","file","renderMediaFields","handleRemoveMedia","newMedia","media","files","mediaFiles","mediaType","_","postTypeOptions","CalendarDays","BarChartHorizontal","Briefcase","BookOpen","PostCreator","mode","isOpen","onClose","onError","availableTypes","t","defaultType","isReduxOpen","validationError","setValidationError","isSubmitting","setIsSubmitting","titleInputRef","closeButtonRef","submitButtonRef","effectiveIsOpen","handleClose","handleSelectType","useMemo","normalizedType","val","renderContent","Icon","label","color","isSelected","X","Transition","Dialog","CreatePostModal","BottomNav","showMenu","setShowMenu","showTribeModal","setShowTribeModal","showNotificationModal","setShowNotificationModal","creationOptions","FileText","handleAddClick","handleTribeCreationSuccess","handleHomeClick","Fragment","HomeIcon","PlusCircle","UserCircle","defaultContext","TribesContext","createContext","TribesProvider","isInitialized","setTribes","refreshTribes","allTribes","getTribe","useTribesSDK","useContext","useTribesData","contextRefreshTribes","contextGetTribe","getAllTribes","getUserTribes","getMemberStatus","getTribeAvatar","defaultAvatar","tribeAny","parseError","generatedAvatar","getTribePrivacy","getTribeTopics","topic","getTribeDescription","getTribeCoverImage","defaultCover","getTribeMembershipStatus","Sidebar","currentPath","allTopics","avatarUrl","privacy","Hash","Layout","isSidebarOpen","setIsSidebarOpen","Outlet","STORAGE_KEYS","getAuthData","getFollowers","hasMinimumFollows","getOnboardingState","logDebug","RootRoute","checkInProgress","trackRedirect","path","redirects","attempts","safeNavigate","savedAuth","onboardingState","getIcon","CheckCircle","AlertCircle","AlertTriangle","Info","toastVariants","NotificationToast","isVisible","duration","timer","AnimatePresence","motion","NotificationContext","useNotification","NotificationProvider","notification","setNotification","showNotification","hideNotification","isChainSupported","useProfile","networkChainId","profileData","connectionAttempts","maxAttempts","getProfileByAddress","checkProfileOwnership","skipProfileCreation","hasSkippedProfileCreation","findUsernameByAddress","updateProfileCache","updateProfile","checkUsername","wallets","WalletConnect","isConnecting","setIsConnecting","connectionAttempt","profileError","ArrowLeft","wallet","USERNAME_CONSTRAINTS","ProfileForm","existingProfile","currentChainId","isTargetNetwork","wagmiWalletClient","isWalletLoading","useWalletClient","setUsername","bio","setBio","setLocation","website","setWebsite","twitter","setTwitter","instagram","setInstagram","discord","setDiscord","isUsernameAvailable","setIsUsernameAvailable","isCheckingUsername","setIsCheckingUsername","hasCheckedProfile","setHasCheckedProfile","checkedUsernamesRef","currentUsername","isMounted","cachedResult","available","checkExistingProfile","storedData","onProfileCreationPage","createProfileDirectly","currentChain","wagmiError","handleSwitchNetwork","UsernameAvatarSetup","FeedLayout","rightSidebar","generateAvatarFromAddress","UserAvatar","TYPE_COLORS","postContainerStyles","postTypeBadgeStyles","postTypeIconStyles","tagStyles","actionButtonStyles","contentStyles","mediaContainerStyles","authorStyles","authorNameStyles","timestampStyles","dividerStyles","buttonStyles","TextPost","onLike","onComment","onShare","onReport","onClick","showActions","handleClick","formattedDate","formatDistanceToNow","getTagVariant","tag","variants","acc","char","Heart","MessageCircle","Share2","Flag","ImagePost","isImageExpanded","setIsImageExpanded","handleImageClick","mainImage","Maximize2","_g","_h","_i","VideoPost","videoRef","isPlaying","setIsPlaying","isMuted","setIsMuted","handlePlayPause","handleMuteToggle","mainVideo","Pause","Play","VolumeX","Volume2","LinkPost","handleLinkClick","ExternalLink","extractEventDetails","eventFromDetails","eventFromLegacy","isEventPost","EventsService","eventId","amount","currentTickets","BasePost","typeIcon","typeName","isLiked","setIsLiked","handleLike","EventPost","isAttending","setIsAttending","ticketCount","setTicketCount","setUserAddress","ticketQuantity","setTicketQuantity","showTicketModal","setShowTicketModal","setErrorMessage","eventDates","startDate","endDate","formattedStartDate","formattedEndDate","formattedStartTime","formattedEndTime","isSameDay","isBefore","isAfter","now","diffTime","diffDays","daysRemainingText","getEventStatusInfo","generateCalendarLink","title","tickets","handleAttend","handlePurchaseTickets","userAddr","Calendar","Ticket","MapPin","LinkIcon","User","Tag","DollarSign","Accessibility","speaker","CalendarCheck","Share","PollPost","liked","setLiked","saved","setSaved","selectedOption","setSelectedOption","hasVoted","setHasVoted","formattedTime","date","pollData","pollQuestion","pollOptions","pollEndDate","isPollEnded","totalVotes","sum","remainingTime","diffMs","diffHours","handleVote","optionId","handleComment","handleShare","handleSave","handleCardClick","authorName","authorAddress","likeCount","commentCount","percentage","HeartIconSolid","HeartIcon","ChatBubbleLeftIcon","ArrowPathRoundedSquareIcon","BookmarkIconSolid","BookmarkIcon","BountyPost","bountyData","getDifficultyColor","difficulty","Bug","Clock","req","Github","ArrowUpRight","ProjectPost","projectData","GitBranch","PostTypeMapper","isEventType","isEventString","hasEventMetadata","numericType","filterOptions","UnifiedFeed","items","showCreateButton","showFilters","onItemClick","contentFilter","setContentFilter","timeFilter","setTimeFilter","sortFilter","setSortFilter","showAdvancedFilters","setShowAdvancedFilters","timeFilters","sortFilters","TrendingUp","Star","_id","handleReport","openCreatePostModal","filteredItems","filtered","typeStr","filterStr","postTypeNum","enumName","itemDate","weekAgo","a","b","aStats","bStats","aEngagement","aTimestamp","renderItem","SlidersHorizontal","Filter","isBrowser","_DBService","PrismaClient","blockchainId","offset","userId","tribeIds","slicedIds","tribeIdsKey","parsedIds","userData","usernameMap","parsedMap","user","usernameMapKey","users","userAddresses","blockNumber","startBlock","endBlock","DBService","indexerInstance","getIndexerService","getPostsService","PostsService","LRUCache","maxSize","oldestKey","oldestTime","time","_PostsService","request","transaction","postsStore","tribesStore","_timestamp","cleanPost","db","contract","postIds","total","validPosts","cachedEntry","idbPost","localPost","response","dbPost","mappedPost","postsPromises","posts","reject","getRequest","store","storagePost","entry","range","cursor","blockchainPost","localStorageKey","parsedPost","syncPosts","keys","validPostIds","functionName","args","postsCache","parsedCache","tribeCache","hit","source","stats","upperType","task","usePostsManagement","setPosts","postsServiceRef","fetchPost","postsService","postsMap","fetchFeed","feedPosts","Dashboard","tribesLoading","feedItems","handlePostClick","handleCreatePost","renderFeed","CHAIN_IDS","FALLBACK_ADDRESSES","TribesABI","Profile","isEditing","setIsEditing","setProfileData","setUserPosts","loadProfile","defaultMetadata","fullProfile","formatAddress","fetchUserPosts","signer","ethers.Contract","mappedPosts","Copy","Users2","Medal","Edit2","TribeCardEnhanced","showJoinButton","isJoining","setIsJoining","joinError","setJoinError","setAvatarUrl","coverImageUrl","setCoverImageUrl","avatarError","setAvatarError","coverError","setCoverError","cover","handleJoinTribe","activityLevel","ratio","activityColors","isMember","isPending","isAdmin","topics","handleAvatarError","handleCoverError","Check","MessageSquare","Activity","adaptTribeToExtendedTribe","TribeList","extendedTribes","Tribes","searchQuery","setSearchQuery","activeFilter","setActiveFilter","handleCreateTribe","Search","Sparkles","MONAD_CHAIN_ID","FUSE_CHAIN_ID","getChainName","getChainColor","FeedCard","chainColor","chainName","formatTimeLeft","endTime","timeLeft","days","hours","minutes","statusColors","ProposalFeedItem","isActive","forPercentage","againstPercentage","quorumPercentage","deadline","difficultyColors","BountyFeedItem","formatEventDate","startTime","startFormat","timeFormat","EventFeedItem","isUpcoming","isLive","hasEnded","getStatusBadge","Video","NFTFeedItem","Image","ProjectFeedItem","formatStreamDate","dateFormat","LivestreamFeedItem","PollFeedItem","PostFeedItem","Bookmark","Feed","renderFeedItem","TribeSidebar","members","onTopicSelect","selectedTopicId","safeMembers","safeTopics","Crown","member","Link","Shield","CreatePost","usePostsData","postsById","setPostsById","postsByTribe","setPostsByTribe","syncStatus","setSyncStatus","getPostsServiceFromIndex","service","cleanupFunction","currentStatus","getLocalPostsService","getPostById","getPostsByTribe","newPostsById","refreshPost","updatedTribePosts","refreshTribePosts","TribeView","useParams","isLoadingTribes","selectedTopic","setSelectedTopic","isJoined","setIsJoined","showCreatePost","setShowCreatePost","activeTab","setActiveTab","tribeDisplay","handleItemClick","TribeDetails","CreateTribe","isPrivate","setIsPrivate","avatarPreview","setAvatarPreview","coverPreview","setCoverPreview","tags","setTags","tagInput","setTagInput","success","setSuccess","handleAvatarChange","reader","handleCoverChange","handleAddTag","handleRemoveTag","tagToRemove","OnboardingStep","ONBOARDING_STORAGE_KEY","INITIAL_ONBOARDING_STATE","rawChainId","chainIdForLogs","profileResponse","WALLET_CHECK_TIMEOUT","MAX_RETRIES","useOnboarding","setState","retryCount","timeoutRef","checkWalletConnection","timeoutPromise","walletData","getCurrentStep","updateWalletInfo","walletAddress","clearWalletInfo","updateProfileId","completeOnboarding","resetOnboarding","inputStyles","ProfileCreation","isSkipping","setIsSkipping","setExistingProfile","formData","setFormData","handleSkip","handleChange","SUGGESTED_USERS","FollowSuggestions","selectedUsers","setSelectedUsers","toggleUser","newSet","handleComplete","Onboarding","currentStep","Navigate","renderStep","TopicsView","topicId","TopicDetails","AuthGuard","isSdkLoading","lastCheckedChainId","setLastCheckedChainId","setRetryCount","profileCheckInProgress","navigationAttempts","MAX_NAVIGATION_ATTEMPTS","sdkInitTimer","loadStoredAuthState","authData","auth","currentCount","storedState","cssVariables","style","MONAD_DEVNET_ID","FUSE_EMBER_ID","updateChainColors","metaThemeColor","INIT_TIMEOUT","initializeApp","initializeServices","initializeFallbackMode","indexerService","App","setIsInitialized","Router","Routes","Route","chainSlice","setIsCorrectNetwork","setIsChainSwitching","setLastValidChainId","chainReducer","configureStore","queryClient","QueryClient","createConfig","ReactDOM","Provider","WagmiProvider","QueryClientProvider"],"mappings":"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"}